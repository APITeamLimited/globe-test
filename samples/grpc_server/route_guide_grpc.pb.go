// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeatureExplorerClient is the client API for FeatureExplorer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureExplorerClient interface ***REMOVED***
	// A simple RPC.
	//
	// Obtains the feature at a given position.
	//
	// A feature with an empty name is returned if there's no feature at the given
	// position.
	GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error)
	// A server-to-client streaming RPC.
	//
	// Obtains the Features available within the given Rectangle.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the rectangle may cover a large area and contain a
	// huge number of features.
	ListFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (FeatureExplorer_ListFeaturesClient, error)
***REMOVED***

type featureExplorerClient struct ***REMOVED***
	cc grpc.ClientConnInterface
***REMOVED***

func NewFeatureExplorerClient(cc grpc.ClientConnInterface) FeatureExplorerClient ***REMOVED***
	return &featureExplorerClient***REMOVED***cc***REMOVED***
***REMOVED***

func (c *featureExplorerClient) GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error) ***REMOVED***
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/main.FeatureExplorer/GetFeature", in, out, opts...)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return out, nil
***REMOVED***

func (c *featureExplorerClient) ListFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (FeatureExplorer_ListFeaturesClient, error) ***REMOVED***
	stream, err := c.cc.NewStream(ctx, &FeatureExplorer_ServiceDesc.Streams[0], "/main.FeatureExplorer/ListFeatures", opts...)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	x := &featureExplorerListFeaturesClient***REMOVED***stream***REMOVED***
	if err := x.ClientStream.SendMsg(in); err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	if err := x.ClientStream.CloseSend(); err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return x, nil
***REMOVED***

type FeatureExplorer_ListFeaturesClient interface ***REMOVED***
	Recv() (*Feature, error)
	grpc.ClientStream
***REMOVED***

type featureExplorerListFeaturesClient struct ***REMOVED***
	grpc.ClientStream
***REMOVED***

func (x *featureExplorerListFeaturesClient) Recv() (*Feature, error) ***REMOVED***
	m := new(Feature)
	if err := x.ClientStream.RecvMsg(m); err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return m, nil
***REMOVED***

// FeatureExplorerServer is the server API for FeatureExplorer service.
// All implementations must embed UnimplementedFeatureExplorerServer
// for forward compatibility
type FeatureExplorerServer interface ***REMOVED***
	// A simple RPC.
	//
	// Obtains the feature at a given position.
	//
	// A feature with an empty name is returned if there's no feature at the given
	// position.
	GetFeature(context.Context, *Point) (*Feature, error)
	// A server-to-client streaming RPC.
	//
	// Obtains the Features available within the given Rectangle.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the rectangle may cover a large area and contain a
	// huge number of features.
	ListFeatures(*Rectangle, FeatureExplorer_ListFeaturesServer) error
	mustEmbedUnimplementedFeatureExplorerServer()
***REMOVED***

// UnimplementedFeatureExplorerServer must be embedded to have forward compatible implementations.
type UnimplementedFeatureExplorerServer struct ***REMOVED***
***REMOVED***

func (UnimplementedFeatureExplorerServer) GetFeature(context.Context, *Point) (*Feature, error) ***REMOVED***
	return nil, status.Errorf(codes.Unimplemented, "method GetFeature not implemented")
***REMOVED***
func (UnimplementedFeatureExplorerServer) ListFeatures(*Rectangle, FeatureExplorer_ListFeaturesServer) error ***REMOVED***
	return status.Errorf(codes.Unimplemented, "method ListFeatures not implemented")
***REMOVED***
func (UnimplementedFeatureExplorerServer) mustEmbedUnimplementedFeatureExplorerServer() ***REMOVED******REMOVED***

// UnsafeFeatureExplorerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureExplorerServer will
// result in compilation errors.
type UnsafeFeatureExplorerServer interface ***REMOVED***
	mustEmbedUnimplementedFeatureExplorerServer()
***REMOVED***

func RegisterFeatureExplorerServer(s grpc.ServiceRegistrar, srv FeatureExplorerServer) ***REMOVED***
	s.RegisterService(&FeatureExplorer_ServiceDesc, srv)
***REMOVED***

func _FeatureExplorer_GetFeature_Handler(srv interface***REMOVED******REMOVED***, ctx context.Context, dec func(interface***REMOVED******REMOVED***) error, interceptor grpc.UnaryServerInterceptor) (interface***REMOVED******REMOVED***, error) ***REMOVED***
	in := new(Point)
	if err := dec(in); err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	if interceptor == nil ***REMOVED***
		return srv.(FeatureExplorerServer).GetFeature(ctx, in)
	***REMOVED***
	info := &grpc.UnaryServerInfo***REMOVED***
		Server:     srv,
		FullMethod: "/main.FeatureExplorer/GetFeature",
	***REMOVED***
	handler := func(ctx context.Context, req interface***REMOVED******REMOVED***) (interface***REMOVED******REMOVED***, error) ***REMOVED***
		return srv.(FeatureExplorerServer).GetFeature(ctx, req.(*Point))
	***REMOVED***
	return interceptor(ctx, in, info, handler)
***REMOVED***

func _FeatureExplorer_ListFeatures_Handler(srv interface***REMOVED******REMOVED***, stream grpc.ServerStream) error ***REMOVED***
	m := new(Rectangle)
	if err := stream.RecvMsg(m); err != nil ***REMOVED***
		return err
	***REMOVED***
	return srv.(FeatureExplorerServer).ListFeatures(m, &featureExplorerListFeaturesServer***REMOVED***stream***REMOVED***)
***REMOVED***

type FeatureExplorer_ListFeaturesServer interface ***REMOVED***
	Send(*Feature) error
	grpc.ServerStream
***REMOVED***

type featureExplorerListFeaturesServer struct ***REMOVED***
	grpc.ServerStream
***REMOVED***

func (x *featureExplorerListFeaturesServer) Send(m *Feature) error ***REMOVED***
	return x.ServerStream.SendMsg(m)
***REMOVED***

// FeatureExplorer_ServiceDesc is the grpc.ServiceDesc for FeatureExplorer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureExplorer_ServiceDesc = grpc.ServiceDesc***REMOVED***
	ServiceName: "main.FeatureExplorer",
	HandlerType: (*FeatureExplorerServer)(nil),
	Methods: []grpc.MethodDesc***REMOVED***
		***REMOVED***
			MethodName: "GetFeature",
			Handler:    _FeatureExplorer_GetFeature_Handler,
		***REMOVED***,
	***REMOVED***,
	Streams: []grpc.StreamDesc***REMOVED***
		***REMOVED***
			StreamName:    "ListFeatures",
			Handler:       _FeatureExplorer_ListFeatures_Handler,
			ServerStreams: true,
		***REMOVED***,
	***REMOVED***,
	Metadata: "route_guide.proto",
***REMOVED***

// RouteGuideClient is the client API for RouteGuide service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteGuideClient interface ***REMOVED***
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of Points on a route being traversed, returning a
	// RouteSummary when traversal is completed.
	RecordRoute(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_RecordRouteClient, error)
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of RouteNotes sent while a route is being traversed,
	// while receiving other RouteNotes (e.g. from other users).
	RouteChat(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_RouteChatClient, error)
***REMOVED***

type routeGuideClient struct ***REMOVED***
	cc grpc.ClientConnInterface
***REMOVED***

func NewRouteGuideClient(cc grpc.ClientConnInterface) RouteGuideClient ***REMOVED***
	return &routeGuideClient***REMOVED***cc***REMOVED***
***REMOVED***

func (c *routeGuideClient) RecordRoute(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_RecordRouteClient, error) ***REMOVED***
	stream, err := c.cc.NewStream(ctx, &RouteGuide_ServiceDesc.Streams[0], "/main.RouteGuide/RecordRoute", opts...)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	x := &routeGuideRecordRouteClient***REMOVED***stream***REMOVED***
	return x, nil
***REMOVED***

type RouteGuide_RecordRouteClient interface ***REMOVED***
	Send(*Point) error
	CloseAndRecv() (*RouteSummary, error)
	grpc.ClientStream
***REMOVED***

type routeGuideRecordRouteClient struct ***REMOVED***
	grpc.ClientStream
***REMOVED***

func (x *routeGuideRecordRouteClient) Send(m *Point) error ***REMOVED***
	return x.ClientStream.SendMsg(m)
***REMOVED***

func (x *routeGuideRecordRouteClient) CloseAndRecv() (*RouteSummary, error) ***REMOVED***
	if err := x.ClientStream.CloseSend(); err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	m := new(RouteSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return m, nil
***REMOVED***

func (c *routeGuideClient) RouteChat(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_RouteChatClient, error) ***REMOVED***
	stream, err := c.cc.NewStream(ctx, &RouteGuide_ServiceDesc.Streams[1], "/main.RouteGuide/RouteChat", opts...)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	x := &routeGuideRouteChatClient***REMOVED***stream***REMOVED***
	return x, nil
***REMOVED***

type RouteGuide_RouteChatClient interface ***REMOVED***
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ClientStream
***REMOVED***

type routeGuideRouteChatClient struct ***REMOVED***
	grpc.ClientStream
***REMOVED***

func (x *routeGuideRouteChatClient) Send(m *RouteNote) error ***REMOVED***
	return x.ClientStream.SendMsg(m)
***REMOVED***

func (x *routeGuideRouteChatClient) Recv() (*RouteNote, error) ***REMOVED***
	m := new(RouteNote)
	if err := x.ClientStream.RecvMsg(m); err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return m, nil
***REMOVED***

// RouteGuideServer is the server API for RouteGuide service.
// All implementations must embed UnimplementedRouteGuideServer
// for forward compatibility
type RouteGuideServer interface ***REMOVED***
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of Points on a route being traversed, returning a
	// RouteSummary when traversal is completed.
	RecordRoute(RouteGuide_RecordRouteServer) error
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of RouteNotes sent while a route is being traversed,
	// while receiving other RouteNotes (e.g. from other users).
	RouteChat(RouteGuide_RouteChatServer) error
	mustEmbedUnimplementedRouteGuideServer()
***REMOVED***

// UnimplementedRouteGuideServer must be embedded to have forward compatible implementations.
type UnimplementedRouteGuideServer struct ***REMOVED***
***REMOVED***

func (UnimplementedRouteGuideServer) RecordRoute(RouteGuide_RecordRouteServer) error ***REMOVED***
	return status.Errorf(codes.Unimplemented, "method RecordRoute not implemented")
***REMOVED***
func (UnimplementedRouteGuideServer) RouteChat(RouteGuide_RouteChatServer) error ***REMOVED***
	return status.Errorf(codes.Unimplemented, "method RouteChat not implemented")
***REMOVED***
func (UnimplementedRouteGuideServer) mustEmbedUnimplementedRouteGuideServer() ***REMOVED******REMOVED***

// UnsafeRouteGuideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteGuideServer will
// result in compilation errors.
type UnsafeRouteGuideServer interface ***REMOVED***
	mustEmbedUnimplementedRouteGuideServer()
***REMOVED***

func RegisterRouteGuideServer(s grpc.ServiceRegistrar, srv RouteGuideServer) ***REMOVED***
	s.RegisterService(&RouteGuide_ServiceDesc, srv)
***REMOVED***

func _RouteGuide_RecordRoute_Handler(srv interface***REMOVED******REMOVED***, stream grpc.ServerStream) error ***REMOVED***
	return srv.(RouteGuideServer).RecordRoute(&routeGuideRecordRouteServer***REMOVED***stream***REMOVED***)
***REMOVED***

type RouteGuide_RecordRouteServer interface ***REMOVED***
	SendAndClose(*RouteSummary) error
	Recv() (*Point, error)
	grpc.ServerStream
***REMOVED***

type routeGuideRecordRouteServer struct ***REMOVED***
	grpc.ServerStream
***REMOVED***

func (x *routeGuideRecordRouteServer) SendAndClose(m *RouteSummary) error ***REMOVED***
	return x.ServerStream.SendMsg(m)
***REMOVED***

func (x *routeGuideRecordRouteServer) Recv() (*Point, error) ***REMOVED***
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return m, nil
***REMOVED***

func _RouteGuide_RouteChat_Handler(srv interface***REMOVED******REMOVED***, stream grpc.ServerStream) error ***REMOVED***
	return srv.(RouteGuideServer).RouteChat(&routeGuideRouteChatServer***REMOVED***stream***REMOVED***)
***REMOVED***

type RouteGuide_RouteChatServer interface ***REMOVED***
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ServerStream
***REMOVED***

type routeGuideRouteChatServer struct ***REMOVED***
	grpc.ServerStream
***REMOVED***

func (x *routeGuideRouteChatServer) Send(m *RouteNote) error ***REMOVED***
	return x.ServerStream.SendMsg(m)
***REMOVED***

func (x *routeGuideRouteChatServer) Recv() (*RouteNote, error) ***REMOVED***
	m := new(RouteNote)
	if err := x.ServerStream.RecvMsg(m); err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return m, nil
***REMOVED***

// RouteGuide_ServiceDesc is the grpc.ServiceDesc for RouteGuide service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteGuide_ServiceDesc = grpc.ServiceDesc***REMOVED***
	ServiceName: "main.RouteGuide",
	HandlerType: (*RouteGuideServer)(nil),
	Methods:     []grpc.MethodDesc***REMOVED******REMOVED***,
	Streams: []grpc.StreamDesc***REMOVED***
		***REMOVED***
			StreamName:    "RecordRoute",
			Handler:       _RouteGuide_RecordRoute_Handler,
			ClientStreams: true,
		***REMOVED***,
		***REMOVED***
			StreamName:    "RouteChat",
			Handler:       _RouteGuide_RouteChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		***REMOVED***,
	***REMOVED***,
	Metadata: "route_guide.proto",
***REMOVED***
