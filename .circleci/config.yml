version: 2
jobs:
  deps:
    docker:
      - image: circleci/golang:1.14
    environment:
      GOPATH: /home/circleci/.go_workspace
    working_directory: /home/circleci/.go_workspace/src/github.com/loadimpact/k6
    steps:
      - checkout
      - run:
          name: Check dependencies
          command: |
            go version
            export PATH="$GOPATH/bin:$PATH"
            mkdir -p "$GOPATH/bin"
            curl --fail https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep version
            dep status
            case $(dep ensure 2>&1 | head -n 1) in Warning*) false ;; esac
            dep check


  lint:
    docker:
      - image: circleci/golang:1.14
    environment:
      GOPATH: /home/circleci/.go_workspace
      GOLANGCI_VERSION: v1.20.0
    working_directory: /home/circleci/.go_workspace/src/github.com/loadimpact/k6
    steps:
      # Workaround for custom env vars not available in cache keys
      # https://discuss.circleci.com/t/cannot-use-circle-yml-environment-variables-in-cache-keys/10994/8
      - run: echo $GOLANGCI_VERSION > /tmp/.golangci.version
      - restore_cache:
          name: Restore golangci-lint cache
          key: golangci-lint-***REMOVED******REMOVED*** arch ***REMOVED******REMOVED***-***REMOVED******REMOVED*** checksum "/tmp/.golangci.version" ***REMOVED******REMOVED***-***REMOVED******REMOVED*** .Environment.CACHE_VERSION ***REMOVED******REMOVED***
          paths:
            - /home/circleci/.go_workspace/bin/golangci-lint
      - run:
          name: Install golangci-lint
          command: |
            export PATH="$GOPATH/bin:$PATH"
            command -v golangci-lint && exit
            GO111MODULE=on go get github.com/golangci/golangci-lint/cmd/golangci-lint@$GOLANGCI_VERSION
      - save_cache:
          name: Save golangci-lint cache
          key: golangci-lint-***REMOVED******REMOVED*** arch ***REMOVED******REMOVED***-***REMOVED******REMOVED*** checksum "/tmp/.golangci.version" ***REMOVED******REMOVED***-***REMOVED******REMOVED*** .Environment.CACHE_VERSION ***REMOVED******REMOVED***
          paths:
            - /home/circleci/.go_workspace/bin/golangci-lint
      - checkout
      - run:
          name: Run golangci-lint
          command: |
            export PATH="$GOPATH/bin:$PATH"
            basecommit=$(echo $CIRCLE_COMPARE_URL | sed -n 's:.*compare/\([^.]*\)\..*$:\1:p')
            echo -e "$CIRCLE_COMPARE_URL\nbasecommit=$basecommit"
            golangci-lint run --out-format=tab --new-from-rev "$***REMOVED***basecommit-master***REMOVED***" ./...


  test:
    docker:
      - image: circleci/golang:1.14
    environment:
      GOPATH: /home/circleci/.go_workspace
    working_directory: /home/circleci/.go_workspace/src/github.com/loadimpact/k6
    steps:
      - checkout
      - run:
          name: Run tests and code coverage
          command: |
            go version
            export GOMAXPROCS=2
            export PATH=$GOPATH/bin:$PATH
            echo "mode: set" > coverage.txt
            for pkg in $(go list ./... | grep -v vendor); do
                list=$(go list -test -f  '***REMOVED******REMOVED*** join .Deps  "\n"***REMOVED******REMOVED***' $pkg | grep github.com/loadimpact/k6 | grep -v vendor || true)
                if [ -n "$list" ]; then
                    list=$(echo "$list" | cut -f1 -d ' ' | sort -u | paste -sd,)
                fi

                go test -race -timeout 800s  --coverpkg="$list" -coverprofile=$(echo $pkg | tr / -).coverage $pkg
            done
            grep -h -v "^mode:" *.coverage >> coverage.txt
            rm -f *.coverage
            bash <(curl --fail -s https://codecov.io/bash)


  test-prev-golang:
    docker:
      - image: circleci/golang:1.13
    environment:
      GOPATH: /home/circleci/.go_workspace
    working_directory: /home/circleci/.go_workspace/src/github.com/loadimpact/k6
    steps:
      - checkout
      - run:
          name: Run tests with previous Go version
          command: |
            go version
            export GOMAXPROCS=2
            export PATH=$GOPATH/bin:$PATH
            go test -p 2 -race -timeout 800s ./...

  build-docker-images:
    docker:
      - image: circleci/golang:1.14
    environment:
      GOPATH: /home/circleci/.go_workspace
    working_directory: /home/circleci/.go_workspace/src/github.com/loadimpact/k6
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.11.0-ce
      - run:
          name: Setup repo and docker
          command: |
            git submodule update --init
            docker info
            echo "***REMOVED***\"https://index.docker.io/v1/\":***REMOVED***\"auth\":\"$DOCKER_AUTH\",\"email\":\"$DOCKER_EMAIL\"***REMOVED******REMOVED***" >~/.dockercfg
      - run:
          name: Build application Docker image
          command: |
            docker build -t loadimpact/k6 .
      - run:
          name: Run tests on generated Docker image
          command: |
            docker run loadimpact/k6 --help
            docker run loadimpact/k6 help
            docker run loadimpact/k6 run --help
            docker run loadimpact/k6 inspect --help
            docker run loadimpact/k6 status --help
            docker run loadimpact/k6 stats --help
            docker run loadimpact/k6 scale --help
            docker run loadimpact/k6 pause --help
            docker run loadimpact/k6 resume --help
      - deploy:
          name: Push application Docker image
          command: |
            if [ "$***REMOVED***CIRCLE_BRANCH***REMOVED***" == "master" ]; then
              docker tag loadimpact/k6 loadimpact/k6:master
              docker push loadimpact/k6:master
            elif [[ "$***REMOVED***CIRCLE_TAG***REMOVED***" =~ ^v[0-9]+(\.[0-9]+)*$ ]]; then
              docker tag loadimpact/k6 loadimpact/k6:$***REMOVED***CIRCLE_TAG:1***REMOVED***
              docker push loadimpact/k6:latest
              docker push loadimpact/k6:$***REMOVED***CIRCLE_TAG:1***REMOVED***
            fi

  build-linux-packages:
    docker:
      - image: circleci/golang:1.14
    environment:
      GOPATH: /home/circleci/.go_workspace
    working_directory: /home/circleci/.go_workspace/src/github.com/loadimpact/k6
    steps:
      - checkout
      - run:
          name: Build linux packages
          command: |
            export PATH=$GOPATH/bin:$PATH

            go get github.com/Masterminds/glide
            go get -d github.com/mh-cbon/go-bin-deb \
              && cd $GOPATH/src/github.com/mh-cbon/go-bin-deb \
              && glide install \
              && go install

            go get -d github.com/mh-cbon/go-bin-rpm \
              && cd $GOPATH/src/github.com/mh-cbon/go-bin-rpm \
              && glide install \
              && go install

            sudo apt-get update -y
            sudo apt-get install -y fakeroot rpm

            cd $GOPATH/src/github.com/loadimpact/k6

            echo "Building k6..."
            CGO_ENABLED=0 GOARCH=amd64 go build -a -trimpath -ldflags "-s -w -X github.com/loadimpact/k6/lib/consts.VersionDetails=$(date -u +"%FT%T%z")/$(git describe --always --long --dirty)" -o /tmp/k6
            echo "Done!"

            VERSION=$***REMOVED***CIRCLE_TAG:1***REMOVED*** ./packaging/gen-packages.sh

      - deploy:
          name: Publish packages in Bintray
          command: |
            export VERSION=$***REMOVED***CIRCLE_TAG:1***REMOVED***
            # Publishing deb
            curl --fail -H "X-GPG-PASSPHRASE: $GPG_PASSPHRASE" -T dist/k6-v$VERSION-amd64.deb "https://$BINTRAY_USER:$BINTRAY_KEY@api.bintray.com/content/loadimpact/deb/k6/$VERSION/k6-v$VERSION-amd64.deb;deb_distribution=stable;deb_component=main;deb_architecture=amd64;publish=1;override=1"
            # Publishing rpm
            curl --fail -H "X-GPG-PASSPHRASE: $GPG_PASSPHRASE" -T dist/k6-v$VERSION-amd64.rpm "https://$BINTRAY_USER:$BINTRAY_KEY@api.bintray.com/content/loadimpact/rpm/k6/$VERSION/k6-v$VERSION-amd64.rpm?publish=1&override=1"


workflows:
  version: 2
  test_and_build:
    jobs:
      - deps:
          filters:
            tags:
              only: /.*/
      - lint
      - test:
          filters:
            tags:
              only: /.*/
      - test-prev-golang:
          filters:
            tags:
              only: /.*/
      - build-docker-images:
          requires:
            - deps
            - test
          filters:
            tags:
              only: /.*/
      - build-linux-packages:
          requires:
            - deps
            - test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
