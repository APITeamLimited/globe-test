package main

import (
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"strconv"
	"strings"
	"text/template"
)

type ElemInfo struct ***REMOVED***
	ConstName     string
	StructName    string
	PrtStructName string
***REMOVED***

type NodeHandler func(node ast.Node) NodeHandler

type CollectElements struct ***REMOVED***
	handler   NodeHandler
	elemName  string
	elemInfos map[string]*ElemInfo
***REMOVED***

type FuncDef struct ***REMOVED***
	ElemName   string
	ElemMethod string
	AttrMethod string
	AttrName   string
	ReturnType string
***REMOVED***

var funcDefs = []string***REMOVED***
	"Href Rel string",
	"Href Href string",
	"Href Target string",
	"Href Type string",
	"Href AccessKey string",
	"Href HrefLang string",
	"Href Media string",
	"Href ToString=href string",

	"Base Href bool",
	"Base Target bool",

	"Button AccessKey string",
	"Button Autofocus bool",
	"Button Disabled bool",

	"Data Value string",

	"Embed Height string",
	"Embed Width string",
	"Embed Src string",
	"Embed Type string",

	"FieldSet Disabled bool",
	"FieldSet Name string",
***REMOVED***

type TestDef struct ***REMOVED***
	ElemHtmlName string
	ElemMethod   string
	AttrName     string
	AttrVal      string
***REMOVED***

func main() ***REMOVED***
	fs := token.NewFileSet()
	parsedFile, parseErr := parser.ParseFile(fs, "elements.go", nil, 0)
	if parseErr != nil ***REMOVED***
		log.Fatalf("warning: internal error: could not parse elements.go: %s", parseErr)
		return
	***REMOVED***

	ce := &CollectElements***REMOVED******REMOVED***
	ce.handler = ce.defaultHandler
	ce.elemInfos = make(map[string]*ElemInfo)

	ast.Inspect(parsedFile, func(n ast.Node) bool ***REMOVED***
		if n != nil ***REMOVED***
			ce.handler = ce.handler(n)
		***REMOVED***
		return true
	***REMOVED***)

	f, err := os.Create("elements_gen.go")
	if err != nil ***REMOVED***
		log.Println("warning: internal error: invalid Go generated:", err)
	***REMOVED***

	elemFuncsTemplate.Execute(f, struct ***REMOVED***
		ElemInfos map[string]*ElemInfo
		FuncDefs  []string
	***REMOVED******REMOVED***
		ce.elemInfos,
		funcDefs,
	***REMOVED***)
	f.Close()

	f, err = os.Create("elements_gen_test.go")
	if err != nil ***REMOVED***
		log.Println("warning: internal error: invalid Go generated:", err)
	***REMOVED***

	testFuncTemplate.Execute(f, struct ***REMOVED***
		FuncDefs []string
	***REMOVED******REMOVED***
		funcDefs,
	***REMOVED***)
	f.Close()
***REMOVED***

var elemFuncsTemplate = template.Must(template.New("").Funcs(template.FuncMap***REMOVED***
	"buildStruct":  buildStruct,
	"buildFuncDef": buildFuncDef,
***REMOVED***).Parse(`// go generate
// generated by js/modules/k6/html/gen/main.go directed by js/modules/k6/html/elements.go;  DO NOT EDIT
package html

import "github.com/dop251/goja"

func selToElement(sel Selection) goja.Value ***REMOVED***
	if sel.sel.Length() == 0 ***REMOVED***
		return goja.Undefined()
	***REMOVED***

	elem := Element***REMOVED***sel.sel.Nodes[0], &sel***REMOVED***

	switch elem.node.Data ***REMOVED*** ***REMOVED******REMOVED*** range $elemInfo := .ElemInfos ***REMOVED******REMOVED***
	case ***REMOVED******REMOVED*** $elemInfo.ConstName ***REMOVED******REMOVED***:
		return sel.rt.ToValue(***REMOVED******REMOVED*** buildStruct $elemInfo ***REMOVED******REMOVED***)
	***REMOVED******REMOVED*** end ***REMOVED******REMOVED***
	default:
		return sel.rt.ToValue(elem)
	***REMOVED***
 ***REMOVED***

***REMOVED******REMOVED*** range $funcDefStr := .FuncDefs ***REMOVED******REMOVED*** ***REMOVED******REMOVED*** $funcDef := buildFuncDef $funcDefStr ***REMOVED******REMOVED***
func (e ***REMOVED******REMOVED***$funcDef.ElemName***REMOVED******REMOVED***) ***REMOVED******REMOVED***$funcDef.ElemMethod***REMOVED******REMOVED***() ***REMOVED******REMOVED***$funcDef.ReturnType***REMOVED******REMOVED*** ***REMOVED***
	return e.***REMOVED******REMOVED*** $funcDef.AttrMethod ***REMOVED******REMOVED***("***REMOVED******REMOVED*** $funcDef.AttrName ***REMOVED******REMOVED***")
***REMOVED***
***REMOVED******REMOVED*** end ***REMOVED******REMOVED***
`))

var testFuncTemplate = template.Must(template.New("").Funcs(template.FuncMap***REMOVED***
	"buildTestDef": buildTestDef,
***REMOVED***).Parse(`// go generate
// generated by js/modules/k6/html/gen/main.go directed by js/modules/k6/html/elements.go;  DO NOT EDIT
package html

import (
	"context"
	"testing"

	"github.com/dop251/goja"
	"github.com/loadimpact/k6/js/common"
	"github.com/stretchr/testify/assert"
)

const testGenElems = ` + "`" + `<html><body>
***REMOVED******REMOVED*** range $index, $testDefStr := .FuncDefs ***REMOVED******REMOVED*** ***REMOVED******REMOVED*** $def := buildTestDef $index $testDefStr ***REMOVED******REMOVED***
<***REMOVED******REMOVED***$def.ElemHtmlName***REMOVED******REMOVED*** id="elem_***REMOVED******REMOVED***$index***REMOVED******REMOVED***"***REMOVED******REMOVED*** if eq $def.AttrVal "true" ***REMOVED******REMOVED*** ***REMOVED******REMOVED***$def.AttrName***REMOVED******REMOVED*** ***REMOVED******REMOVED***else***REMOVED******REMOVED*** ***REMOVED******REMOVED***$def.AttrName***REMOVED******REMOVED***="***REMOVED******REMOVED***$def.AttrVal***REMOVED******REMOVED***" ***REMOVED******REMOVED***end***REMOVED******REMOVED***></***REMOVED******REMOVED*** $def.ElemHtmlName ***REMOVED******REMOVED***> ***REMOVED******REMOVED*** end ***REMOVED******REMOVED***
</body></html>` + "`" + `

func TestGenElements(t *testing.T) ***REMOVED***
	rt := goja.New()
	rt.SetFieldNameMapper(common.FieldNameMapper***REMOVED******REMOVED***)

	ctx := common.WithRuntime(context.Background(), rt)
	rt.Set("src", testGenElems)
	rt.Set("html", common.Bind(rt, &HTML***REMOVED******REMOVED***, &ctx))
	// compileProtoElem()

	_, err := common.RunString(rt, "let doc = html.parseHTML(src)")

	assert.NoError(t, err)
	assert.IsType(t, Selection***REMOVED******REMOVED***, rt.Get("doc").Export())
***REMOVED******REMOVED*** range $index, $testDefStr := .FuncDefs ***REMOVED******REMOVED*** ***REMOVED******REMOVED*** $def := buildTestDef $index $testDefStr ***REMOVED******REMOVED*** 
	t.Run("***REMOVED******REMOVED***$def.ElemHtmlName***REMOVED******REMOVED***.***REMOVED******REMOVED***$def.ElemMethod***REMOVED******REMOVED***", func(t *testing.T) ***REMOVED***
		if v, err := common.RunString(rt, "doc.find(\"#elem_***REMOVED******REMOVED***$index***REMOVED******REMOVED***\").get(0).***REMOVED******REMOVED***$def.ElemMethod***REMOVED******REMOVED***()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, ***REMOVED******REMOVED*** if eq $def.AttrVal "true" ***REMOVED******REMOVED******REMOVED******REMOVED***$def.AttrVal***REMOVED******REMOVED*** ***REMOVED******REMOVED***else***REMOVED******REMOVED*** "***REMOVED******REMOVED***$def.AttrVal***REMOVED******REMOVED***" ***REMOVED******REMOVED***end***REMOVED******REMOVED***, v.Export())
		***REMOVED***
	***REMOVED***)
***REMOVED******REMOVED*** end ***REMOVED******REMOVED***
***REMOVED***
`))

func buildStruct(elemInfo ElemInfo) string ***REMOVED***
	if elemInfo.PrtStructName == "Element" ***REMOVED***
		return elemInfo.StructName + "***REMOVED***elem***REMOVED***"
	***REMOVED*** else ***REMOVED***
		return elemInfo.StructName + "***REMOVED***" + elemInfo.PrtStructName + "***REMOVED***elem***REMOVED******REMOVED***"
	***REMOVED***
***REMOVED***

func buildFuncDef(funcDef string) FuncDef ***REMOVED***
	parts := strings.Split(funcDef, " ")
	// parts[0] is the element struct name (without the Element suffix for brevity)
	// parts[1] is either:
	//   MethodName               The name of method added onto that struct and converted to lowercase thenn used as the argument to elem.attrAsString(...) or elem.AttrIsPresent(...)
	//   MethodName=attrname      The MethodName is added to the struct. The attrname is the argument for attrAsString or AttrIsPresent
	// parts[2] is the return type, either string or bool
	elemName := parts[0] + "Element"
	elemMethod := parts[1]
	attrName := strings.ToLower(parts[1])
	returnType := parts[2]

	if eqPos := strings.Index(parts[1], "="); eqPos != -1 ***REMOVED***
		attrName = elemMethod[eqPos+1:]
		elemMethod = elemMethod[0:eqPos]
	***REMOVED***

	switch returnType ***REMOVED***
	case "string":
		// "Button AccessKey string" => ***REMOVED***"ButtonElement" "AccessKey", "attrIsString", "accesskey", "string"***REMOVED*** => `func (e ButtonElement) AccessKey() string***REMOVED*** return e.attrAsString("accessKey") ***REMOVED***``
		// "Href ToString=href string" => ***REMOVED***"HrefElement" "ToString", "attrIsString", "href", "string"***REMOVED*** => `func (e HrefElement) ToString() string ***REMOVED*** return e.textContent("href") ***REMOVED***``
		return FuncDef***REMOVED***elemName, elemMethod, "attrAsString", attrName, returnType***REMOVED***
	case "bool":
		// "Button Autofocus bool" ***REMOVED***"Button" "Autofocus", "attrIsPresent", "autofocus", "bool"***REMOVED*** => `func (e ButtonElement) ToString() bool ***REMOVED*** return e.attrIsPresent("autofocus") ***REMOVED***``
		return FuncDef***REMOVED***elemName, elemMethod, "attrIsPresent", attrName, returnType***REMOVED***
	default:
		panic("Unknown attrType in a funcDef")
	***REMOVED***
***REMOVED***

func buildTestDef(index int, testDef string) TestDef ***REMOVED***
	parts := strings.Split(testDef, " ")

	elemHtmlName := strings.ToLower(parts[0])

	if elemHtmlName == "href" ***REMOVED***
		elemHtmlName = "a"
	***REMOVED***

	elemMethod := strings.ToLower(parts[1][0:1]) + parts[1][1:]
	attrName := strings.ToLower(parts[1])

	if eqPos := strings.Index(elemMethod, "="); eqPos != -1 ***REMOVED***
		attrName = elemMethod[eqPos+1:]
		elemMethod = elemMethod[0:eqPos]
	***REMOVED***

	if parts[2] == "bool" ***REMOVED***
		return TestDef***REMOVED***elemHtmlName, elemMethod, attrName, "true"***REMOVED***
	***REMOVED*** else ***REMOVED***
		return TestDef***REMOVED***elemHtmlName, elemMethod, attrName, "attrval_" + strconv.Itoa(index)***REMOVED***
	***REMOVED***
***REMOVED***

// Node handler functions used in ast.Inspect to scrape TagName consts and the names of Element structs and their parent/nested struct

func (ce *CollectElements) defaultHandler(node ast.Node) NodeHandler ***REMOVED***
	ce.elemName = ""

	switch node.(type) ***REMOVED***
	case *ast.TypeSpec:
		return ce.elemTypeSpecHandler

	case *ast.ValueSpec:
		return ce.tagNameValueSpecHandler

	default:
		return ce.defaultHandler
	***REMOVED***
***REMOVED***

func (ce *CollectElements) tagNameValueSpecHandler(node ast.Node) NodeHandler ***REMOVED***
	switch x := node.(type) ***REMOVED***
	case *ast.Ident:
		if strings.HasSuffix(x.Name, "TagName") ***REMOVED***
			elemName := strings.TrimSuffix(x.Name, "TagName")
			ce.elemInfos[elemName] = &ElemInfo***REMOVED***x.Name, "", ""***REMOVED***
		***REMOVED***

		return ce.defaultHandler

	default:
		return ce.defaultHandler
	***REMOVED***
***REMOVED***

func (ce *CollectElements) elemTypeSpecHandler(node ast.Node) NodeHandler ***REMOVED***
	switch x := node.(type) ***REMOVED***
	case *ast.Ident:
		if !strings.HasSuffix(x.Name, "Element") ***REMOVED***
			return ce.defaultHandler
		***REMOVED***

		if ce.elemName == "" ***REMOVED***
			ce.elemName = strings.TrimSuffix(x.Name, "Element")
			// Ignore HrefElement and MediaElement structs. They are subclassed by AnchorElement/AreaElement/VideoElement and do not have their own entry in ElemInfos
			if _, ok := ce.elemInfos[ce.elemName]; !ok ***REMOVED***
				return ce.defaultHandler
			***REMOVED***

			ce.elemInfos[ce.elemName].StructName = x.Name
			return ce.elemTypeSpecHandler
		***REMOVED*** else ***REMOVED***
			ce.elemInfos[ce.elemName].PrtStructName = x.Name
			return ce.defaultHandler
		***REMOVED***

	case *ast.StructType:
		return ce.elemTypeSpecHandler

	case *ast.FieldList:
		return ce.elemTypeSpecHandler

	case *ast.Field:
		return ce.elemTypeSpecHandler

	default:
		return ce.defaultHandler
	***REMOVED***
***REMOVED***
