package main

import (
	"html/template"
	"log"
	"os"
	"path"
	"runtime"
	"strings"
)

const (
	AttrString    = 1
	AttrIsPresent = 2
	href          = "href"
)

// ElemDef *ElementDef
type Attr struct ***REMOVED***
	PropertyName string
	AttrType     int
***REMOVED***

type Elem struct ***REMOVED***
	NodeName     string
	StructName   string
	StructParent string
	Properties   []Attr
***REMOVED***

var elements = []Elem***REMOVED***
	Elem***REMOVED***"", "HrefElement", "Element", []Attr***REMOVED***
		Attr***REMOVED***"Rel", AttrString***REMOVED***,
	***REMOVED******REMOVED***,
	Elem***REMOVED***"Anchor", "AnchorElement", "HrefElement", nil***REMOVED***,
	Elem***REMOVED***"Area", "AreaElement", "HrefElement", []Attr***REMOVED***
		Attr***REMOVED***"Href", AttrString***REMOVED***,
		Attr***REMOVED***"Target", AttrString***REMOVED***,
	***REMOVED******REMOVED***,
	Elem***REMOVED***"Base", "BaseElement", "Element", []Attr***REMOVED***
		Attr***REMOVED***"Target", AttrString***REMOVED***,
	***REMOVED******REMOVED***,
	Elem***REMOVED***"Button", "ButtonElement", "Element", []Attr***REMOVED***
		Attr***REMOVED***"AccessKey", AttrString***REMOVED***,
		Attr***REMOVED***"Autofocus", AttrIsPresent***REMOVED***,
		Attr***REMOVED***"Disabled", AttrIsPresent***REMOVED***,
	***REMOVED******REMOVED***,
***REMOVED***

func main() ***REMOVED***
	_, file, _, ok := runtime.Caller(0)
	if !ok ***REMOVED***
		log.Println("Unable to get current dir")
	***REMOVED***

	f, err := os.Create(path.Join(path.Dir(file), "../elements_gen.go"))
	if err != nil ***REMOVED***
		log.Println("warning: internal error: invalid Go generated:", err)
	***REMOVED***
	elemsTemplate.Execute(f, elements)
	f.Close()
***REMOVED***

var elemsTemplate = template.Must(template.New("").Funcs(template.FuncMap***REMOVED***
	"isNode":         hasNodeName,
	"attrReturnType": attrReturnType,
	"attrFuncName":   attrFuncBody,
	"attrName":       attrName,
***REMOVED***).Parse(`// go generate
// generated by js/modules/k6/html/gen/main.go directed by js/modules/k6/html/elements.go;  DO NOT EDIT
package html

func selToElement(sel Selection) goja.Value ***REMOVED***
	if sel.sel.Length() == 0 ***REMOVED***
		return goja.Undefined()
	***REMOVED***

	elem := Element***REMOVED***sel.sel.Nodes[0], &sel***REMOVED***
	switch elem.node.Data ***REMOVED*** ***REMOVED******REMOVED***range .***REMOVED******REMOVED*** ***REMOVED******REMOVED*** if isNode . ***REMOVED******REMOVED***
	case ***REMOVED******REMOVED*** .NodeName ***REMOVED******REMOVED***:
		return sel.rt.ToValue(***REMOVED******REMOVED*** .StructName ***REMOVED******REMOVED******REMOVED*** ***REMOVED******REMOVED*** .StructParent ***REMOVED******REMOVED******REMOVED***elem***REMOVED*** ***REMOVED***)
	***REMOVED******REMOVED*** end ***REMOVED******REMOVED*** ***REMOVED******REMOVED***end***REMOVED******REMOVED***
	default:
		return sel.rt.ToValue(elem)
	***REMOVED***
***REMOVED***

***REMOVED******REMOVED*** range . ***REMOVED******REMOVED***
type ***REMOVED******REMOVED*** .StructName ***REMOVED******REMOVED*** struct***REMOVED*** ***REMOVED******REMOVED*** .StructParent ***REMOVED******REMOVED*** ***REMOVED***
***REMOVED******REMOVED*** end ***REMOVED******REMOVED***

***REMOVED******REMOVED*** range . ***REMOVED******REMOVED*** 
	***REMOVED******REMOVED*** $elem := . ***REMOVED******REMOVED*** 
	***REMOVED******REMOVED*** range .Properties ***REMOVED******REMOVED***
func (e ***REMOVED******REMOVED*** $elem.StructName ***REMOVED******REMOVED***) ***REMOVED******REMOVED*** .PropertyName ***REMOVED******REMOVED***() ***REMOVED******REMOVED*** attrReturnType .AttrType ***REMOVED******REMOVED*** ***REMOVED***
	return e.***REMOVED******REMOVED*** attrFuncName . ***REMOVED******REMOVED***("***REMOVED******REMOVED*** attrName . ***REMOVED******REMOVED***");
***REMOVED***
	***REMOVED******REMOVED*** end ***REMOVED******REMOVED***
***REMOVED******REMOVED*** end ***REMOVED******REMOVED***
`))

func hasNodeName(elemDef Elem) bool ***REMOVED***
	return elemDef.NodeName != ""
***REMOVED***

func attrReturnType(attrType int) string ***REMOVED***
	switch attrType ***REMOVED***
	case AttrString:
		return "string"

	case AttrIsPresent:
		return "bool"

	default:
		panic("Unknown attrType in a propertyDef")
	***REMOVED***
***REMOVED***

func attrFuncBody(propDef Attr) string ***REMOVED***
	switch propDef.AttrType ***REMOVED***
	case AttrString:
		return `attrAsString`

	case AttrIsPresent:
		return `attrIsPresent`

	default:
		panic("Unknown attrType in a propertyDef")
	***REMOVED***
***REMOVED***

func attrName(propDef Attr) string ***REMOVED***
	return strings.ToLower(propDef.PropertyName)
***REMOVED***
