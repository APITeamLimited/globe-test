// go generate
// generated by js/modules/k6/html/gen/main.go directed by js/modules/k6/html/elements.go;  DO NOT EDIT
package html

import (
	"context"
	"testing"

	"github.com/dop251/goja"
	"github.com/loadimpact/k6/js/common"
	"github.com/stretchr/testify/assert"
)

const testGenElems = `<html><body><a id="elem_0" download="attrval_0"></a>
	<a id="elem_1" referrerpolicy="attrval_1"></a>
	<a id="elem_2" rel="attrval_2"></a>
	<a id="elem_3" href="attrval_3"></a>
	<a id="elem_4" target="attrval_4"></a>
	<a id="elem_5" type="attrval_5"></a>
	<a id="elem_6" accesskey="attrval_6"></a>
	<a id="elem_7" hreflang="attrval_7"></a>
	<a id="elem_8" media="attrval_8"></a>
	<a id="elem_9" href="attrval_9"></a>
	<base id="elem_10" href></base>
	<base id="elem_11" target></base>
	<button id="elem_12" accesskey="attrval_12"></button>
	<button id="elem_13" autofocus></button>
	<button id="elem_14" disabled></button>
	<button id="elem_15_0" type="submit"> <button id="elem_15_1" type="button"> <button id="elem_15_2" type="menu"> <button id="elem_15_3" type="reset"> <button id="elem_15_4" type="menu"> <data id="elem_16" value="attrval_16"></data>
	<embed id="elem_17" height="attrval_17"></embed>
	<embed id="elem_18" width="attrval_18"></embed>
	<embed id="elem_19" src="attrval_19"></embed>
	<embed id="elem_20" type="attrval_20"></embed>
	<fieldset id="elem_21" disabled></fieldset>
	<fieldset id="elem_22" name="attrval_22"></fieldset>
	<form id="elem_23" name="attrval_23"></form>
	<form id="elem_24" target="attrval_24"></form>
	<form id="elem_25" action="attrval_25"></form>
	<form id="elem_26" enctype="attrval_26"></form>
	<form id="elem_27" enctype="attrval_27"></form>
	<form id="elem_28" accept-charset="attrval_28"></form>
	<form id="elem_29" autocomplete="attrval_29"></form>
	<form id="elem_30" novalidate></form>
	<iframe id="elem_31" allowfullscreen></iframe>
	<iframe id="elem_32" referrerpolicy="attrval_32"></iframe>
	<iframe id="elem_33" height="attrval_33"></iframe>
	<iframe id="elem_34" width="attrval_34"></iframe>
	<iframe id="elem_35" name="attrval_35"></iframe>
	<iframe id="elem_36" src="attrval_36"></iframe>
	<img id="elem_37" src="attrval_37"></img>
	<img id="elem_38" sizes="attrval_38"></img>
	<img id="elem_39" srcset="attrval_39"></img>
	<img id="elem_40" alt="attrval_40"></img>
	<img id="elem_41_0" crossorigin="anonymous"> <img id="elem_41_1" crossorigin="use-credentials"> <img id="elem_42" height="42"></img>
	<img id="elem_43" width="43"></img>
	<img id="elem_44" ismap></img>
	<img id="elem_45" name="attrval_45"></img>
	<img id="elem_46" src="attrval_46"></img>
	<img id="elem_47" usemap="attrval_47"></img>
	<input id="elem_48_0" type="text"> <input id="elem_48_1" type="button"> <input id="elem_48_2" type="checkbox"> <input id="elem_48_3" type="color"> <input id="elem_48_4" type="date"> <input id="elem_48_5" type="datetime-local"> <input id="elem_48_6" type="email"> <input id="elem_48_7" type="file"> <input id="elem_48_8" type="hidden"> <input id="elem_48_9" type="image"> <input id="elem_48_10" type="month"> <input id="elem_48_11" type="number"> <input id="elem_48_12" type="password"> <input id="elem_48_13" type="radio"> <input id="elem_48_14" type="range"> <input id="elem_48_15" type="reset"> <input id="elem_48_16" type="search"> <input id="elem_48_17" type="submit"> <input id="elem_48_18" type="tel"> <input id="elem_48_19" type="time"> <input id="elem_48_20" type="url"> <input id="elem_48_21" type="week"> <input id="elem_49" disabled></input>
	<input id="elem_50" autofocus></input>
	<input id="elem_51" required></input>
	<input id="elem_52" value="attrval_52"></input>
	<img id="elem_53" referrerpolicy="attrval_53"></img>
	<input id="elem_54" checked></input>
	<input id="elem_55" checked></input>
	<input id="elem_56" alt="attrval_56"></input>
	<input id="elem_57" src="attrval_57"></input>
	<input id="elem_58" height="attrval_58"></input>
	<input id="elem_59" width="attrval_59"></input>
	<input id="elem_60" accept="attrval_60"></input>
	<input id="elem_61_0" autocomplete="off"> <input id="elem_61_1" autocomplete="on"> <input id="elem_62" maxlength="62"></input>
	<input id="elem_63" size="63"></input>
	<input id="elem_64" pattern="attrval_64"></input>
	<input id="elem_65" placeholder="attrval_65"></input>
	<input id="elem_66" readonly></input>
	<input id="elem_67" min="attrval_67"></input>
	<input id="elem_68" max="attrval_68"></input>
	<input id="elem_69" value="attrval_69"></input>
	<input id="elem_70" dirname="attrval_70"></input>
	<input id="elem_71" accesskey="attrval_71"></input>
	<input id="elem_72" multiple></input>
	<input id="elem_73" step="attrval_73"></input>
	<keygen id="elem_74" autofocus></keygen>
	<keygen id="elem_75" challenge="attrval_75"></keygen>
	<keygen id="elem_76" disabled></keygen>
	<keygen id="elem_77_0" keytype="RSA"> <keygen id="elem_77_1" keytype="DSA"> <keygen id="elem_77_2" keytype="EC"> <keygen id="elem_78" name="attrval_78"></keygen>
	<keygen id="elem_79_0" type="keygen"> <label id="elem_80" for="attrval_80"></label>
	<legend id="elem_81" accesskey="attrval_81"></legend>
	<legend id="elem_82" value="attrval_82"></legend>
	<li id="elem_83" value="attrval_83"></li>
	<li id="elem_84_0" type=""> <li id="elem_84_1" type="1"> <li id="elem_84_2" type="a"> <li id="elem_84_3" type="A"> <li id="elem_84_4" type="i"> <li id="elem_84_5" type="I"> <li id="elem_84_6" type="disc"> <li id="elem_84_7" type="square"> <li id="elem_84_8" type="circle"> <link id="elem_85_0" crossorigin="anonymous"> <link id="elem_85_1" crossorigin="use-credentials"> <link id="elem_86" referrerpolicy="attrval_86"></link>
	<link id="elem_87" href="attrval_87"></link>
	<link id="elem_88" hreflang="attrval_88"></link>
	<link id="elem_89" media="attrval_89"></link>
	<link id="elem_90_0" rel=""> <link id="elem_90_1" rel="alternate"> <link id="elem_90_2" rel="author"> <link id="elem_90_3" rel="dns-prefetch"> <link id="elem_90_4" rel="help"> <link id="elem_90_5" rel="icon"> <link id="elem_90_6" rel="license"> <link id="elem_90_7" rel="next"> <link id="elem_90_8" rel="pingback"> <link id="elem_90_9" rel="preconnect"> <link id="elem_90_10" rel="prefetch"> <link id="elem_90_11" rel="preload"> <link id="elem_90_12" rel="prerender"> <link id="elem_90_13" rel="prev"> <link id="elem_90_14" rel="search"> <link id="elem_90_15" rel="stylesheet"> <link id="elem_91" target="attrval_91"></link>
	<link id="elem_92" type="attrval_92"></link>
	<map id="elem_93" name="attrval_93"></map>
	<meta id="elem_94" content="attrval_94"></meta>
	<meta id="elem_95_0" http-equiv="content-type"> <meta id="elem_95_1" http-equiv="default-style"> <meta id="elem_95_2" http-equiv="refresh"> <meta id="elem_96_0" name="application-name"> <meta id="elem_96_1" name="author"> <meta id="elem_96_2" name="description"> <meta id="elem_96_3" name="generator"> <meta id="elem_96_4" name="keywords"> <meta id="elem_96_5" name="viewport"> <meter id="elem_97" min="97"></meter>
	<meter id="elem_98" max="98"></meter>
	<meter id="elem_99" high="99"></meter>
	<meter id="elem_100" low="100"></meter>
	<meter id="elem_101" optimum="101"></meter>
	<del id="elem_102" cite="attrval_102"></del>
	<del id="elem_103" datetime="attrval_103"></del>
	<object id="elem_104" data="attrval_104"></object>
	<object id="elem_105" height="attrval_105"></object>
	<object id="elem_106" name="attrval_106"></object>
	<object id="elem_107" type="attrval_107"></object>
	<object id="elem_108" tabindex="108"></object>
	<object id="elem_109" typemustmatch></object>
	<object id="elem_110" usemap="attrval_110"></object>
	<object id="elem_111" width="attrval_111"></object>
	<olist id="elem_112" reversed></olist>
	<olist id="elem_113" start="113"></olist>
	<olist id="elem_114_0" type="1"> <olist id="elem_114_1" type="a"> <olist id="elem_114_2" type="A"> <olist id="elem_114_3" type="i"> <olist id="elem_114_4" type="I"> <optgroup id="elem_115" disabled></optgroup>
	<optgroup id="elem_116" label="attrval_116"></optgroup>
	<option id="elem_117" selected></option>
	<option id="elem_118" selected></option>
	<output id="elem_119" for="attrval_119"></output>
	<output id="elem_120" name="attrval_120"></output>
	<output id="elem_121_0" type="output"> <param id="elem_122" name="attrval_122"></param>
	<param id="elem_123" value="attrval_123"></param>
	<pre id="elem_124" name="attrval_124"></pre>
	<pre id="elem_125" value="attrval_125"></pre>
	<quote id="elem_126" cite="attrval_126"></quote>
	<script id="elem_127" crossorigin="attrval_127"></script>
	<script id="elem_128" type="attrval_128"></script>
	<script id="elem_129" src="attrval_129"></script>
	<script id="elem_130" for="attrval_130"></script>
	<script id="elem_131" charset="attrval_131"></script>
	<script id="elem_132" async></script>
	<script id="elem_133" defer></script>
	<script id="elem_134" nomodule></script>
	<select id="elem_135" autofocus></select>
	<select id="elem_136" disabled></select>
	<select id="elem_137" multiple></select>
	<select id="elem_138" name="attrval_138"></select>
	<select id="elem_139" required></select>
	<source id="elem_140" keysystem="attrval_140"></source>
	<source id="elem_141" media="attrval_141"></source>
	<source id="elem_142" sizes="attrval_142"></source>
	<source id="elem_143" src="attrval_143"></source>
	<source id="elem_144" srcset="attrval_144"></source>
	<source id="elem_145" type="attrval_145"></source>
	<style id="elem_146" media="attrval_146"></style>
	<style id="elem_147" type="attrval_147"></style>
	<style id="elem_148" disabled></style>
	<table id="elem_149" sortable></table>
	<tagname id="elem_156_0" type="textarea"> <tagname id="elem_157" value="attrval_157"></tagname>
	<tagname id="elem_158" value="attrval_158"></tagname>
	<tagname id="elem_159" placeholder="attrval_159"></tagname>
	<tagname id="elem_160" rows="160"></tagname>
	<tagname id="elem_161" cols="161"></tagname>
	<tagname id="elem_162" maxlength="162"></tagname>
	<tagname id="elem_163" accesskey="attrval_163"></tagname>
	<tagname id="elem_164" readonly></tagname>
	<tagname id="elem_165" required></tagname>
	<tagname id="elem_166" autocomplete></tagname>
	<tagname id="elem_167_0" autocapitalize="none"> <tagname id="elem_167_1" autocapitalize="off"> <tagname id="elem_167_2" autocapitalize="characters"> <tagname id="elem_167_3" autocapitalize="words"> <tagname id="elem_167_4" autocapitalize="sentences"> <tagname id="elem_168" wrap="attrval_168"></tagname>
	<time id="elem_169" datetime="attrval_169"></time>
	<title id="elem_170" text="attrval_170"></title>
	<ul id="elem_171" type="attrval_171"></ul>
	
</body></html>`

func TestGenElements(t *testing.T) ***REMOVED***
	rt := goja.New()
	rt.SetFieldNameMapper(common.FieldNameMapper***REMOVED******REMOVED***)

	ctx := common.WithRuntime(context.Background(), rt)
	rt.Set("src", testGenElems)
	rt.Set("html", common.Bind(rt, &HTML***REMOVED******REMOVED***, &ctx))
	// compileProtoElem()

	_, err := common.RunString(rt, "let doc = html.parseHTML(src)")

	assert.NoError(t, err)
	assert.IsType(t, Selection***REMOVED******REMOVED***, rt.Get("doc").Export())
 
 
	t.Run("a.download", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_0\").get(0).download()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_0" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("a.referrerPolicy", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_1\").get(0).referrerPolicy()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_1" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("a.rel", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_2\").get(0).rel()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_2" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("a.href", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_3\").get(0).href()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_3" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("a.target", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_4\").get(0).target()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_4" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("a.type", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_5\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_5" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("a.accessKey", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_6\").get(0).accessKey()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_6" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("a.hrefLang", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_7\").get(0).hrefLang()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_7" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("a.media", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_8\").get(0).media()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_8" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("a.toString", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_9\").get(0).toString()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_9" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("base.href", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_10\").get(0).href()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("base.target", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_11\").get(0).target()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("button.accessKey", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_12\").get(0).accessKey()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_12" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("button.autofocus", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_13\").get(0).autofocus()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("button.disabled", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_14\").get(0).disabled()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("button.type", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_15_0\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "submit", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_15_1\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "button", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_15_2\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "menu", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_15_3\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "reset", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_15_4\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "menu", v.Export()) 
			***REMOVED*** 
		***REMOVED***)
 
 
	t.Run("data.value", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_16\").get(0).value()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_16" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("embed.height", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_17\").get(0).height()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_17" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("embed.width", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_18\").get(0).width()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_18" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("embed.src", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_19\").get(0).src()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_19" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("embed.type", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_20\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_20" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("fieldset.disabled", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_21\").get(0).disabled()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("fieldset.name", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_22\").get(0).name()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_22" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("form.name", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_23\").get(0).name()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_23" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("form.target", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_24\").get(0).target()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_24" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("form.action", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_25\").get(0).action()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_25" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("form.enctype", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_26\").get(0).enctype()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_26" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("form.encoding", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_27\").get(0).encoding()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_27" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("form.acceptCharset", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_28\").get(0).acceptCharset()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_28" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("form.autocomplete", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_29\").get(0).autocomplete()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_29" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("form.noValidate", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_30\").get(0).noValidate()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("iframe.allowfullscreen", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_31\").get(0).allowfullscreen()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("iframe.referrerPolicy", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_32\").get(0).referrerPolicy()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_32" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("iframe.height", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_33\").get(0).height()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_33" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("iframe.width", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_34\").get(0).width()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_34" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("iframe.name", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_35\").get(0).name()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_35" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("iframe.src", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_36\").get(0).src()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_36" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("img.currentSrc", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_37\").get(0).currentSrc()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_37" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("img.sizes", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_38\").get(0).sizes()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_38" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("img.srcset", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_39\").get(0).srcset()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_39" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("img.alt", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_40\").get(0).alt()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_40" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("img.crossOrigin", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_41_0\").get(0).crossOrigin()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "anonymous", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_41_1\").get(0).crossOrigin()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "use-credentials", v.Export()) 
			***REMOVED*** 
		***REMOVED***)
 
 
	t.Run("img.height", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_42\").get(0).height()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  int64(42) , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("img.width", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_43\").get(0).width()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  int64(43) , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("img.isMap", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_44\").get(0).isMap()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("img.name", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_45\").get(0).name()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_45" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("img.src", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_46\").get(0).src()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_46" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("img.useMap", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_47\").get(0).useMap()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_47" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.type", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_48_0\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "text", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_48_1\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "button", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_48_2\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "checkbox", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_48_3\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "color", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_48_4\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "date", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_48_5\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "datetime-local", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_48_6\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "email", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_48_7\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "file", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_48_8\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "hidden", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_48_9\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "image", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_48_10\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "month", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_48_11\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "number", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_48_12\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "password", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_48_13\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "radio", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_48_14\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "range", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_48_15\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "reset", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_48_16\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "search", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_48_17\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "submit", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_48_18\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "tel", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_48_19\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "time", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_48_20\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "url", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_48_21\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "week", v.Export()) 
			***REMOVED*** 
		***REMOVED***)
 
 
	t.Run("input.disabled", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_49\").get(0).disabled()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.autofocus", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_50\").get(0).autofocus()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.required", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_51\").get(0).required()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.value", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_52\").get(0).value()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_52" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("img.referrerPolicy", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_53\").get(0).referrerPolicy()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_53" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.checked", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_54\").get(0).checked()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.defaultChecked", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_55\").get(0).defaultChecked()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.alt", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_56\").get(0).alt()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_56" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.src", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_57\").get(0).src()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_57" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.height", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_58\").get(0).height()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_58" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.width", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_59\").get(0).width()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_59" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.accept", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_60\").get(0).accept()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_60" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.autocomplete", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_61_0\").get(0).autocomplete()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "off", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_61_1\").get(0).autocomplete()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "on", v.Export()) 
			***REMOVED*** 
		***REMOVED***)
 
 
	t.Run("input.maxLength", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_62\").get(0).maxLength()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  int64(62) , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.size", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_63\").get(0).size()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  int64(63) , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.pattern", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_64\").get(0).pattern()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_64" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.placeholder", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_65\").get(0).placeholder()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_65" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.readonly", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_66\").get(0).readonly()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.min", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_67\").get(0).min()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_67" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.max", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_68\").get(0).max()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_68" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.defaultValue", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_69\").get(0).defaultValue()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_69" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.dirName", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_70\").get(0).dirName()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_70" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.accessKey", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_71\").get(0).accessKey()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_71" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.multiple", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_72\").get(0).multiple()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("input.step", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_73\").get(0).step()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_73" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("keygen.autofocus", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_74\").get(0).autofocus()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("keygen.challenge", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_75\").get(0).challenge()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_75" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("keygen.disabled", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_76\").get(0).disabled()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("keygen.keytype", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_77_0\").get(0).keytype()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "RSA", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_77_1\").get(0).keytype()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "DSA", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_77_2\").get(0).keytype()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "EC", v.Export()) 
			***REMOVED*** 
		***REMOVED***)
 
 
	t.Run("keygen.name", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_78\").get(0).name()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_78" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("keygen.type", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_79_0\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "keygen", v.Export()) 
			***REMOVED*** 
		***REMOVED***)
 
 
	t.Run("label.htmlFor", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_80\").get(0).htmlFor()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_80" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("legend.accessKey", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_81\").get(0).accessKey()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_81" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("legend.value", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_82\").get(0).value()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_82" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("li.value", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_83\").get(0).value()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_83" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("li.type", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_84_0\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_84_1\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "1", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_84_2\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "a", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_84_3\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "A", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_84_4\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "i", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_84_5\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "I", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_84_6\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "disc", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_84_7\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "square", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_84_8\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "circle", v.Export()) 
			***REMOVED*** 
		***REMOVED***)
 
 
	t.Run("link.crossorigin", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_85_0\").get(0).crossorigin()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "anonymous", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_85_1\").get(0).crossorigin()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "use-credentials", v.Export()) 
			***REMOVED*** 
		***REMOVED***)
 
 
	t.Run("link.referrerPolicy", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_86\").get(0).referrerPolicy()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_86" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("link.href", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_87\").get(0).href()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_87" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("link.hreflang", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_88\").get(0).hreflang()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_88" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("link.media", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_89\").get(0).media()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_89" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("link.rel", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_90_0\").get(0).rel()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_90_1\").get(0).rel()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "alternate", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_90_2\").get(0).rel()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "author", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_90_3\").get(0).rel()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "dns-prefetch", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_90_4\").get(0).rel()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "help", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_90_5\").get(0).rel()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "icon", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_90_6\").get(0).rel()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "license", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_90_7\").get(0).rel()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "next", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_90_8\").get(0).rel()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "pingback", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_90_9\").get(0).rel()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "preconnect", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_90_10\").get(0).rel()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "prefetch", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_90_11\").get(0).rel()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "preload", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_90_12\").get(0).rel()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "prerender", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_90_13\").get(0).rel()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "prev", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_90_14\").get(0).rel()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "search", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_90_15\").get(0).rel()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "stylesheet", v.Export()) 
			***REMOVED*** 
		***REMOVED***)
 
 
	t.Run("link.target", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_91\").get(0).target()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_91" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("link.type", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_92\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_92" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("map.name", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_93\").get(0).name()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_93" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("meta.content", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_94\").get(0).content()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_94" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("meta.httpEquiv", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_95_0\").get(0).httpEquiv()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "content-type", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_95_1\").get(0).httpEquiv()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "default-style", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_95_2\").get(0).httpEquiv()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "refresh", v.Export()) 
			***REMOVED*** 
		***REMOVED***)
 
 
	t.Run("meta.name", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_96_0\").get(0).name()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "application-name", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_96_1\").get(0).name()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "author", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_96_2\").get(0).name()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "description", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_96_3\").get(0).name()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "generator", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_96_4\").get(0).name()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "keywords", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_96_5\").get(0).name()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "viewport", v.Export()) 
			***REMOVED*** 
		***REMOVED***)
 
 
	t.Run("meter.min", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_97\").get(0).min()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  int64(97) , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("meter.max", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_98\").get(0).max()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  int64(98) , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("meter.high", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_99\").get(0).high()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  int64(99) , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("meter.low", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_100\").get(0).low()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  int64(100) , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("meter.optimum", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_101\").get(0).optimum()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  int64(101) , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("del.cite", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_102\").get(0).cite()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_102" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("del.dateTime", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_103\").get(0).dateTime()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_103" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("object.data", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_104\").get(0).data()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_104" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("object.height", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_105\").get(0).height()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_105" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("object.name", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_106\").get(0).name()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_106" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("object.type", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_107\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_107" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("object.tabIndex", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_108\").get(0).tabIndex()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  int64(108) , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("object.typeMustMatch", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_109\").get(0).typeMustMatch()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("object.useMap", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_110\").get(0).useMap()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_110" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("object.width", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_111\").get(0).width()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_111" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("olist.reversed", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_112\").get(0).reversed()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("olist.start", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_113\").get(0).start()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  int64(113) , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("olist.type", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_114_0\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "1", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_114_1\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "a", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_114_2\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "A", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_114_3\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "i", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_114_4\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "I", v.Export()) 
			***REMOVED*** 
		***REMOVED***)
 
 
	t.Run("optgroup.disabled", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_115\").get(0).disabled()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("optgroup.label", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_116\").get(0).label()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_116" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("option.defaultSelected", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_117\").get(0).defaultSelected()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("option.selected", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_118\").get(0).selected()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("output.htmlFor", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_119\").get(0).htmlFor()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_119" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("output.name", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_120\").get(0).name()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_120" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("output.type", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_121_0\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "output", v.Export()) 
			***REMOVED*** 
		***REMOVED***)
 
 
	t.Run("param.name", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_122\").get(0).name()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_122" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("param.value", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_123\").get(0).value()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_123" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("pre.name", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_124\").get(0).name()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_124" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("pre.value", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_125\").get(0).value()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_125" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("quote.cite", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_126\").get(0).cite()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_126" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("script.crossOrigin", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_127\").get(0).crossOrigin()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_127" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("script.type", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_128\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_128" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("script.src", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_129\").get(0).src()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_129" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("script.htmlFor", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_130\").get(0).htmlFor()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_130" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("script.charset", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_131\").get(0).charset()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_131" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("script.async", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_132\").get(0).async()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("script.defer", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_133\").get(0).defer()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("script.noModule", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_134\").get(0).noModule()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("select.autofocus", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_135\").get(0).autofocus()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("select.disabled", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_136\").get(0).disabled()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("select.multiple", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_137\").get(0).multiple()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("select.name", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_138\").get(0).name()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_138" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("select.required", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_139\").get(0).required()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("source.keySystem", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_140\").get(0).keySystem()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_140" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("source.media", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_141\").get(0).media()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_141" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("source.sizes", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_142\").get(0).sizes()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_142" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("source.src", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_143\").get(0).src()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_143" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("source.srcSet", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_144\").get(0).srcSet()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_144" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("source.type", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_145\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_145" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("style.media", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_146\").get(0).media()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_146" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("style.type", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_147\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_147" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("style.disabled", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_148\").get(0).disabled()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("table.sortable", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_149\").get(0).sortable()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	 
 
	 
 
	 
 
	 
 
	 
 
	 
 
	t.Run("tagname.type", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_156_0\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "textarea", v.Export()) 
			***REMOVED*** 
		***REMOVED***)
 
 
	t.Run("tagname.value", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_157\").get(0).value()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_157" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("tagname.defaultValue", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_158\").get(0).defaultValue()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_158" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("tagname.placeholder", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_159\").get(0).placeholder()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_159" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("tagname.rows", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_160\").get(0).rows()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  int64(160) , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("tagname.cols", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_161\").get(0).cols()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  int64(161) , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("tagname.maxLength", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_162\").get(0).maxLength()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  int64(162) , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("tagname.accessKey", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_163\").get(0).accessKey()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_163" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("tagname.readOnly", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_164\").get(0).readOnly()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("tagname.required", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_165\").get(0).required()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("tagname.autocomplete", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_166\").get(0).autocomplete()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t, true , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("tagname.autocapitalize", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_167_0\").get(0).autocapitalize()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "none", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_167_1\").get(0).autocapitalize()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "off", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_167_2\").get(0).autocapitalize()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "characters", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_167_3\").get(0).autocapitalize()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "words", v.Export()) 
			***REMOVED*** 
		if v, err := common.RunString(rt, "doc.find(\"#elem_167_4\").get(0).autocapitalize()"); assert.NoError(t, err) ***REMOVED***
					assert.Equal(t, "sentences", v.Export()) 
			***REMOVED*** 
		***REMOVED***)
 
 
	t.Run("tagname.wrap", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_168\").get(0).wrap()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_168" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("time.dateTime", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_169\").get(0).dateTime()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_169" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("title.text", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_170\").get(0).text()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_170" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
 
 
	t.Run("ul.type", func(t *testing.T) ***REMOVED*** 
	if v, err := common.RunString(rt, "doc.find(\"#elem_171\").get(0).type()"); assert.NoError(t, err) ***REMOVED***
				assert.Equal(t,  "attrval_171" , v.Export()) 
			***REMOVED*** 
	***REMOVED***)
***REMOVED***
