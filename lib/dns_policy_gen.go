// Code generated by "enumer -type=DNSPolicy -trimprefix DNS -output dns_policy_gen.go"; DO NOT EDIT.

//
package lib

import (
	"fmt"
)

const _DNSPolicyName = "preferIPv4preferIPv6onlyIPv4onlyIPv6any"

var _DNSPolicyIndex = [...]uint8***REMOVED***0, 10, 20, 28, 36, 39***REMOVED***

func (i DNSPolicy) String() string ***REMOVED***
	i -= 1
	if i >= DNSPolicy(len(_DNSPolicyIndex)-1) ***REMOVED***
		return fmt.Sprintf("DNSPolicy(%d)", i+1)
	***REMOVED***
	return _DNSPolicyName[_DNSPolicyIndex[i]:_DNSPolicyIndex[i+1]]
***REMOVED***

var _DNSPolicyValues = []DNSPolicy***REMOVED***1, 2, 3, 4, 5***REMOVED***

var _DNSPolicyNameToValueMap = map[string]DNSPolicy***REMOVED***
	_DNSPolicyName[0:10]:  1,
	_DNSPolicyName[10:20]: 2,
	_DNSPolicyName[20:28]: 3,
	_DNSPolicyName[28:36]: 4,
	_DNSPolicyName[36:39]: 5,
***REMOVED***

// DNSPolicyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DNSPolicyString(s string) (DNSPolicy, error) ***REMOVED***
	if val, ok := _DNSPolicyNameToValueMap[s]; ok ***REMOVED***
		return val, nil
	***REMOVED***
	return 0, fmt.Errorf("%s does not belong to DNSPolicy values", s)
***REMOVED***

// DNSPolicyValues returns all values of the enum
func DNSPolicyValues() []DNSPolicy ***REMOVED***
	return _DNSPolicyValues
***REMOVED***

// IsADNSPolicy returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DNSPolicy) IsADNSPolicy() bool ***REMOVED***
	for _, v := range _DNSPolicyValues ***REMOVED***
		if i == v ***REMOVED***
			return true
		***REMOVED***
	***REMOVED***
	return false
***REMOVED***
