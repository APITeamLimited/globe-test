// Code generated by "enumer -type=CompressionType -transform=snake -trimprefix CompressionType -output compression_type_gen.go"; DO NOT EDIT.

package httpext

import (
	"fmt"
)

const _CompressionTypeName = "gzipdeflate"

var _CompressionTypeIndex = [...]uint8***REMOVED***0, 4, 11***REMOVED***

func (i CompressionType) String() string ***REMOVED***
	if i >= CompressionType(len(_CompressionTypeIndex)-1) ***REMOVED***
		return fmt.Sprintf("CompressionType(%d)", i)
	***REMOVED***
	return _CompressionTypeName[_CompressionTypeIndex[i]:_CompressionTypeIndex[i+1]]
***REMOVED***

var _CompressionTypeValues = []CompressionType***REMOVED***0, 1***REMOVED***

var _CompressionTypeNameToValueMap = map[string]CompressionType***REMOVED***
	_CompressionTypeName[0:4]:  0,
	_CompressionTypeName[4:11]: 1,
***REMOVED***

// CompressionTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CompressionTypeString(s string) (CompressionType, error) ***REMOVED***
	if val, ok := _CompressionTypeNameToValueMap[s]; ok ***REMOVED***
		return val, nil
	***REMOVED***
	return 0, fmt.Errorf("%s does not belong to CompressionType values", s)
***REMOVED***

// CompressionTypeValues returns all values of the enum
func CompressionTypeValues() []CompressionType ***REMOVED***
	return _CompressionTypeValues
***REMOVED***

// IsACompressionType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CompressionType) IsACompressionType() bool ***REMOVED***
	for _, v := range _CompressionTypeValues ***REMOVED***
		if i == v ***REMOVED***
			return true
		***REMOVED***
	***REMOVED***
	return false
***REMOVED***
