// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package json

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	stats "go.k6.io/k6/stats"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson42239ddeDecodeGoK6IoK6OutputJson(in *jlexer.Lexer, out *sampleEnvelope) ***REMOVED***
	isTopLevel := in.IsStart()
	if in.IsNull() ***REMOVED***
		if isTopLevel ***REMOVED***
			in.Consumed()
		***REMOVED***
		in.Skip()
		return
	***REMOVED***
	in.Delim('***REMOVED***')
	for !in.IsDelim('***REMOVED***') ***REMOVED***
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() ***REMOVED***
			in.Skip()
			in.WantComma()
			continue
		***REMOVED***
		switch key ***REMOVED***
		case "type":
			out.Type = string(in.String())
		case "data":
			easyjson42239ddeDecode(in, &out.Data)
		case "metric":
			out.Metric = string(in.String())
		default:
			in.SkipRecursive()
		***REMOVED***
		in.WantComma()
	***REMOVED***
	in.Delim('***REMOVED***')
	if isTopLevel ***REMOVED***
		in.Consumed()
	***REMOVED***
***REMOVED***
func easyjson42239ddeEncodeGoK6IoK6OutputJson(out *jwriter.Writer, in sampleEnvelope) ***REMOVED***
	out.RawByte('***REMOVED***')
	first := true
	_ = first
	***REMOVED***
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		easyjson42239ddeEncode(out, in.Data)
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"metric\":"
		out.RawString(prefix)
		out.String(string(in.Metric))
	***REMOVED***
	out.RawByte('***REMOVED***')
***REMOVED***

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sampleEnvelope) MarshalEasyJSON(w *jwriter.Writer) ***REMOVED***
	easyjson42239ddeEncodeGoK6IoK6OutputJson(w, v)
***REMOVED***

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sampleEnvelope) UnmarshalEasyJSON(l *jlexer.Lexer) ***REMOVED***
	easyjson42239ddeDecodeGoK6IoK6OutputJson(l, v)
***REMOVED***
func easyjson42239ddeDecode(in *jlexer.Lexer, out *struct ***REMOVED***
	Time  time.Time         `json:"time"`
	Value float64           `json:"value"`
	Tags  *stats.SampleTags `json:"tags"`
***REMOVED***) ***REMOVED***
	isTopLevel := in.IsStart()
	if in.IsNull() ***REMOVED***
		if isTopLevel ***REMOVED***
			in.Consumed()
		***REMOVED***
		in.Skip()
		return
	***REMOVED***
	in.Delim('***REMOVED***')
	for !in.IsDelim('***REMOVED***') ***REMOVED***
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() ***REMOVED***
			in.Skip()
			in.WantComma()
			continue
		***REMOVED***
		switch key ***REMOVED***
		case "time":
			if data := in.Raw(); in.Ok() ***REMOVED***
				in.AddError((out.Time).UnmarshalJSON(data))
			***REMOVED***
		case "value":
			out.Value = float64(in.Float64())
		case "tags":
			if in.IsNull() ***REMOVED***
				in.Skip()
				out.Tags = nil
			***REMOVED*** else ***REMOVED***
				if out.Tags == nil ***REMOVED***
					out.Tags = new(stats.SampleTags)
				***REMOVED***
				if data := in.Raw(); in.Ok() ***REMOVED***
					in.AddError((*out.Tags).UnmarshalJSON(data))
				***REMOVED***
			***REMOVED***
		default:
			in.SkipRecursive()
		***REMOVED***
		in.WantComma()
	***REMOVED***
	in.Delim('***REMOVED***')
	if isTopLevel ***REMOVED***
		in.Consumed()
	***REMOVED***
***REMOVED***
func easyjson42239ddeEncode(out *jwriter.Writer, in struct ***REMOVED***
	Time  time.Time         `json:"time"`
	Value float64           `json:"value"`
	Tags  *stats.SampleTags `json:"tags"`
***REMOVED***) ***REMOVED***
	out.RawByte('***REMOVED***')
	first := true
	_ = first
	***REMOVED***
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.Raw((in.Time).MarshalJSON())
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Float64(float64(in.Value))
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil ***REMOVED***
			out.RawString("null")
		***REMOVED*** else ***REMOVED***
			(*in.Tags).MarshalEasyJSON(out)
		***REMOVED***
	***REMOVED***
	out.RawByte('***REMOVED***')
***REMOVED***
func easyjson42239ddeDecodeGoK6IoK6OutputJson1(in *jlexer.Lexer, out *metricEnvelope) ***REMOVED***
	isTopLevel := in.IsStart()
	if in.IsNull() ***REMOVED***
		if isTopLevel ***REMOVED***
			in.Consumed()
		***REMOVED***
		in.Skip()
		return
	***REMOVED***
	in.Delim('***REMOVED***')
	for !in.IsDelim('***REMOVED***') ***REMOVED***
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() ***REMOVED***
			in.Skip()
			in.WantComma()
			continue
		***REMOVED***
		switch key ***REMOVED***
		case "type":
			out.Type = string(in.String())
		case "data":
			if in.IsNull() ***REMOVED***
				in.Skip()
				out.Data = nil
			***REMOVED*** else ***REMOVED***
				if out.Data == nil ***REMOVED***
					out.Data = new(stats.Metric)
				***REMOVED***
				easyjson42239ddeDecodeGoK6IoK6Stats(in, out.Data)
			***REMOVED***
		case "metric":
			out.Metric = string(in.String())
		default:
			in.SkipRecursive()
		***REMOVED***
		in.WantComma()
	***REMOVED***
	in.Delim('***REMOVED***')
	if isTopLevel ***REMOVED***
		in.Consumed()
	***REMOVED***
***REMOVED***
func easyjson42239ddeEncodeGoK6IoK6OutputJson1(out *jwriter.Writer, in metricEnvelope) ***REMOVED***
	out.RawByte('***REMOVED***')
	first := true
	_ = first
	***REMOVED***
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil ***REMOVED***
			out.RawString("null")
		***REMOVED*** else ***REMOVED***
			easyjson42239ddeEncodeGoK6IoK6Stats(out, *in.Data)
		***REMOVED***
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"metric\":"
		out.RawString(prefix)
		out.String(string(in.Metric))
	***REMOVED***
	out.RawByte('***REMOVED***')
***REMOVED***

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v metricEnvelope) MarshalEasyJSON(w *jwriter.Writer) ***REMOVED***
	easyjson42239ddeEncodeGoK6IoK6OutputJson1(w, v)
***REMOVED***

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *metricEnvelope) UnmarshalEasyJSON(l *jlexer.Lexer) ***REMOVED***
	easyjson42239ddeDecodeGoK6IoK6OutputJson1(l, v)
***REMOVED***
func easyjson42239ddeDecodeGoK6IoK6Stats(in *jlexer.Lexer, out *stats.Metric) ***REMOVED***
	isTopLevel := in.IsStart()
	if in.IsNull() ***REMOVED***
		if isTopLevel ***REMOVED***
			in.Consumed()
		***REMOVED***
		in.Skip()
		return
	***REMOVED***
	in.Delim('***REMOVED***')
	for !in.IsDelim('***REMOVED***') ***REMOVED***
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() ***REMOVED***
			in.Skip()
			in.WantComma()
			continue
		***REMOVED***
		switch key ***REMOVED***
		case "name":
			out.Name = string(in.String())
		case "type":
			if data := in.UnsafeBytes(); in.Ok() ***REMOVED***
				in.AddError((out.Type).UnmarshalText(data))
			***REMOVED***
		case "contains":
			if data := in.UnsafeBytes(); in.Ok() ***REMOVED***
				in.AddError((out.Contains).UnmarshalText(data))
			***REMOVED***
		case "tainted":
			if data := in.Raw(); in.Ok() ***REMOVED***
				in.AddError((out.Tainted).UnmarshalJSON(data))
			***REMOVED***
		case "thresholds":
			if data := in.Raw(); in.Ok() ***REMOVED***
				in.AddError((out.Thresholds).UnmarshalJSON(data))
			***REMOVED***
		case "submetrics":
			if in.IsNull() ***REMOVED***
				in.Skip()
				out.Submetrics = nil
			***REMOVED*** else ***REMOVED***
				in.Delim('[')
				if out.Submetrics == nil ***REMOVED***
					if !in.IsDelim(']') ***REMOVED***
						out.Submetrics = make([]*stats.Submetric, 0, 8)
					***REMOVED*** else ***REMOVED***
						out.Submetrics = []*stats.Submetric***REMOVED******REMOVED***
					***REMOVED***
				***REMOVED*** else ***REMOVED***
					out.Submetrics = (out.Submetrics)[:0]
				***REMOVED***
				for !in.IsDelim(']') ***REMOVED***
					var v1 *stats.Submetric
					if in.IsNull() ***REMOVED***
						in.Skip()
						v1 = nil
					***REMOVED*** else ***REMOVED***
						if v1 == nil ***REMOVED***
							v1 = new(stats.Submetric)
						***REMOVED***
						easyjson42239ddeDecodeGoK6IoK6Stats1(in, v1)
					***REMOVED***
					out.Submetrics = append(out.Submetrics, v1)
					in.WantComma()
				***REMOVED***
				in.Delim(']')
			***REMOVED***
		case "sub":
			easyjson42239ddeDecodeGoK6IoK6Stats1(in, &out.Sub)
		default:
			in.SkipRecursive()
		***REMOVED***
		in.WantComma()
	***REMOVED***
	in.Delim('***REMOVED***')
	if isTopLevel ***REMOVED***
		in.Consumed()
	***REMOVED***
***REMOVED***
func easyjson42239ddeEncodeGoK6IoK6Stats(out *jwriter.Writer, in stats.Metric) ***REMOVED***
	out.RawByte('***REMOVED***')
	first := true
	_ = first
	***REMOVED***
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Raw((in.Type).MarshalJSON())
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"contains\":"
		out.RawString(prefix)
		out.Raw((in.Contains).MarshalJSON())
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"tainted\":"
		out.RawString(prefix)
		out.Raw((in.Tainted).MarshalJSON())
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"thresholds\":"
		out.RawString(prefix)
		out.Raw((in.Thresholds).MarshalJSON())
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"submetrics\":"
		out.RawString(prefix)
		if in.Submetrics == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 ***REMOVED***
			out.RawString("null")
		***REMOVED*** else ***REMOVED***
			out.RawByte('[')
			for v2, v3 := range in.Submetrics ***REMOVED***
				if v2 > 0 ***REMOVED***
					out.RawByte(',')
				***REMOVED***
				if v3 == nil ***REMOVED***
					out.RawString("null")
				***REMOVED*** else ***REMOVED***
					easyjson42239ddeEncodeGoK6IoK6Stats1(out, *v3)
				***REMOVED***
			***REMOVED***
			out.RawByte(']')
		***REMOVED***
	***REMOVED***
	if true ***REMOVED***
		const prefix string = ",\"sub\":"
		out.RawString(prefix)
		easyjson42239ddeEncodeGoK6IoK6Stats1(out, in.Sub)
	***REMOVED***
	out.RawByte('***REMOVED***')
***REMOVED***
func easyjson42239ddeDecodeGoK6IoK6Stats1(in *jlexer.Lexer, out *stats.Submetric) ***REMOVED***
	isTopLevel := in.IsStart()
	if in.IsNull() ***REMOVED***
		if isTopLevel ***REMOVED***
			in.Consumed()
		***REMOVED***
		in.Skip()
		return
	***REMOVED***
	in.Delim('***REMOVED***')
	for !in.IsDelim('***REMOVED***') ***REMOVED***
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() ***REMOVED***
			in.Skip()
			in.WantComma()
			continue
		***REMOVED***
		switch key ***REMOVED***
		case "name":
			out.Name = string(in.String())
		case "parent":
			out.Parent = string(in.String())
		case "suffix":
			out.Suffix = string(in.String())
		case "tags":
			if in.IsNull() ***REMOVED***
				in.Skip()
				out.Tags = nil
			***REMOVED*** else ***REMOVED***
				if out.Tags == nil ***REMOVED***
					out.Tags = new(stats.SampleTags)
				***REMOVED***
				if data := in.Raw(); in.Ok() ***REMOVED***
					in.AddError((*out.Tags).UnmarshalJSON(data))
				***REMOVED***
			***REMOVED***
		default:
			in.SkipRecursive()
		***REMOVED***
		in.WantComma()
	***REMOVED***
	in.Delim('***REMOVED***')
	if isTopLevel ***REMOVED***
		in.Consumed()
	***REMOVED***
***REMOVED***
func easyjson42239ddeEncodeGoK6IoK6Stats1(out *jwriter.Writer, in stats.Submetric) ***REMOVED***
	out.RawByte('***REMOVED***')
	first := true
	_ = first
	***REMOVED***
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"parent\":"
		out.RawString(prefix)
		out.String(string(in.Parent))
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"suffix\":"
		out.RawString(prefix)
		out.String(string(in.Suffix))
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil ***REMOVED***
			out.RawString("null")
		***REMOVED*** else ***REMOVED***
			(*in.Tags).MarshalEasyJSON(out)
		***REMOVED***
	***REMOVED***
	out.RawByte('***REMOVED***')
***REMOVED***
