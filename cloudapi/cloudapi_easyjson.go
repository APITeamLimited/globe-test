// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package cloudapi

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC9ac27e5DecodeGithubComLoadimpactK6Cloudapi(in *jlexer.Lexer, out *msgStreams) ***REMOVED***
	isTopLevel := in.IsStart()
	if in.IsNull() ***REMOVED***
		if isTopLevel ***REMOVED***
			in.Consumed()
		***REMOVED***
		in.Skip()
		return
	***REMOVED***
	in.Delim('***REMOVED***')
	for !in.IsDelim('***REMOVED***') ***REMOVED***
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() ***REMOVED***
			in.Skip()
			in.WantComma()
			continue
		***REMOVED***
		switch key ***REMOVED***
		case "stream":
			if in.IsNull() ***REMOVED***
				in.Skip()
			***REMOVED*** else ***REMOVED***
				in.Delim('***REMOVED***')
				out.Stream = make(map[string]string)
				for !in.IsDelim('***REMOVED***') ***REMOVED***
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.Stream)[key] = v1
					in.WantComma()
				***REMOVED***
				in.Delim('***REMOVED***')
			***REMOVED***
		case "values":
			if in.IsNull() ***REMOVED***
				in.Skip()
				out.Values = nil
			***REMOVED*** else ***REMOVED***
				in.Delim('[')
				if out.Values == nil ***REMOVED***
					if !in.IsDelim(']') ***REMOVED***
						out.Values = make([][2]string, 0, 2)
					***REMOVED*** else ***REMOVED***
						out.Values = [][2]string***REMOVED******REMOVED***
					***REMOVED***
				***REMOVED*** else ***REMOVED***
					out.Values = (out.Values)[:0]
				***REMOVED***
				for !in.IsDelim(']') ***REMOVED***
					var v2 [2]string
					if in.IsNull() ***REMOVED***
						in.Skip()
					***REMOVED*** else ***REMOVED***
						in.Delim('[')
						v3 := 0
						for !in.IsDelim(']') ***REMOVED***
							if v3 < 2 ***REMOVED***
								(v2)[v3] = string(in.String())
								v3++
							***REMOVED*** else ***REMOVED***
								in.SkipRecursive()
							***REMOVED***
							in.WantComma()
						***REMOVED***
						in.Delim(']')
					***REMOVED***
					out.Values = append(out.Values, v2)
					in.WantComma()
				***REMOVED***
				in.Delim(']')
			***REMOVED***
		default:
			in.SkipRecursive()
		***REMOVED***
		in.WantComma()
	***REMOVED***
	in.Delim('***REMOVED***')
	if isTopLevel ***REMOVED***
		in.Consumed()
	***REMOVED***
***REMOVED***
func easyjsonC9ac27e5EncodeGithubComLoadimpactK6Cloudapi(out *jwriter.Writer, in msgStreams) ***REMOVED***
	out.RawByte('***REMOVED***')
	first := true
	_ = first
	***REMOVED***
		const prefix string = ",\"stream\":"
		out.RawString(prefix[1:])
		if in.Stream == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 ***REMOVED***
			out.RawString(`null`)
		***REMOVED*** else ***REMOVED***
			out.RawByte('***REMOVED***')
			v4First := true
			for v4Name, v4Value := range in.Stream ***REMOVED***
				if v4First ***REMOVED***
					v4First = false
				***REMOVED*** else ***REMOVED***
					out.RawByte(',')
				***REMOVED***
				out.String(string(v4Name))
				out.RawByte(':')
				out.String(string(v4Value))
			***REMOVED***
			out.RawByte('***REMOVED***')
		***REMOVED***
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"values\":"
		out.RawString(prefix)
		if in.Values == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 ***REMOVED***
			out.RawString("null")
		***REMOVED*** else ***REMOVED***
			out.RawByte('[')
			for v5, v6 := range in.Values ***REMOVED***
				if v5 > 0 ***REMOVED***
					out.RawByte(',')
				***REMOVED***
				out.RawByte('[')
				for v7 := range v6 ***REMOVED***
					if v7 > 0 ***REMOVED***
						out.RawByte(',')
					***REMOVED***
					out.String(string((v6)[v7]))
				***REMOVED***
				out.RawByte(']')
			***REMOVED***
			out.RawByte(']')
		***REMOVED***
	***REMOVED***
	out.RawByte('***REMOVED***')
***REMOVED***

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v msgStreams) MarshalEasyJSON(w *jwriter.Writer) ***REMOVED***
	easyjsonC9ac27e5EncodeGithubComLoadimpactK6Cloudapi(w, v)
***REMOVED***

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *msgStreams) UnmarshalEasyJSON(l *jlexer.Lexer) ***REMOVED***
	easyjsonC9ac27e5DecodeGithubComLoadimpactK6Cloudapi(l, v)
***REMOVED***
func easyjsonC9ac27e5DecodeGithubComLoadimpactK6Cloudapi1(in *jlexer.Lexer, out *msgDroppedEntries) ***REMOVED***
	isTopLevel := in.IsStart()
	if in.IsNull() ***REMOVED***
		if isTopLevel ***REMOVED***
			in.Consumed()
		***REMOVED***
		in.Skip()
		return
	***REMOVED***
	in.Delim('***REMOVED***')
	for !in.IsDelim('***REMOVED***') ***REMOVED***
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() ***REMOVED***
			in.Skip()
			in.WantComma()
			continue
		***REMOVED***
		switch key ***REMOVED***
		case "labels":
			if in.IsNull() ***REMOVED***
				in.Skip()
			***REMOVED*** else ***REMOVED***
				in.Delim('***REMOVED***')
				out.Labels = make(map[string]string)
				for !in.IsDelim('***REMOVED***') ***REMOVED***
					key := string(in.String())
					in.WantColon()
					var v8 string
					v8 = string(in.String())
					(out.Labels)[key] = v8
					in.WantComma()
				***REMOVED***
				in.Delim('***REMOVED***')
			***REMOVED***
		case "timestamp":
			out.Timestamp = string(in.String())
		default:
			in.SkipRecursive()
		***REMOVED***
		in.WantComma()
	***REMOVED***
	in.Delim('***REMOVED***')
	if isTopLevel ***REMOVED***
		in.Consumed()
	***REMOVED***
***REMOVED***
func easyjsonC9ac27e5EncodeGithubComLoadimpactK6Cloudapi1(out *jwriter.Writer, in msgDroppedEntries) ***REMOVED***
	out.RawByte('***REMOVED***')
	first := true
	_ = first
	***REMOVED***
		const prefix string = ",\"labels\":"
		out.RawString(prefix[1:])
		if in.Labels == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 ***REMOVED***
			out.RawString(`null`)
		***REMOVED*** else ***REMOVED***
			out.RawByte('***REMOVED***')
			v9First := true
			for v9Name, v9Value := range in.Labels ***REMOVED***
				if v9First ***REMOVED***
					v9First = false
				***REMOVED*** else ***REMOVED***
					out.RawByte(',')
				***REMOVED***
				out.String(string(v9Name))
				out.RawByte(':')
				out.String(string(v9Value))
			***REMOVED***
			out.RawByte('***REMOVED***')
		***REMOVED***
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.String(string(in.Timestamp))
	***REMOVED***
	out.RawByte('***REMOVED***')
***REMOVED***

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v msgDroppedEntries) MarshalEasyJSON(w *jwriter.Writer) ***REMOVED***
	easyjsonC9ac27e5EncodeGithubComLoadimpactK6Cloudapi1(w, v)
***REMOVED***

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *msgDroppedEntries) UnmarshalEasyJSON(l *jlexer.Lexer) ***REMOVED***
	easyjsonC9ac27e5DecodeGithubComLoadimpactK6Cloudapi1(l, v)
***REMOVED***
func easyjsonC9ac27e5DecodeGithubComLoadimpactK6Cloudapi2(in *jlexer.Lexer, out *msg) ***REMOVED***
	isTopLevel := in.IsStart()
	if in.IsNull() ***REMOVED***
		if isTopLevel ***REMOVED***
			in.Consumed()
		***REMOVED***
		in.Skip()
		return
	***REMOVED***
	in.Delim('***REMOVED***')
	for !in.IsDelim('***REMOVED***') ***REMOVED***
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() ***REMOVED***
			in.Skip()
			in.WantComma()
			continue
		***REMOVED***
		switch key ***REMOVED***
		case "streams":
			if in.IsNull() ***REMOVED***
				in.Skip()
				out.Streams = nil
			***REMOVED*** else ***REMOVED***
				in.Delim('[')
				if out.Streams == nil ***REMOVED***
					if !in.IsDelim(']') ***REMOVED***
						out.Streams = make([]msgStreams, 0, 2)
					***REMOVED*** else ***REMOVED***
						out.Streams = []msgStreams***REMOVED******REMOVED***
					***REMOVED***
				***REMOVED*** else ***REMOVED***
					out.Streams = (out.Streams)[:0]
				***REMOVED***
				for !in.IsDelim(']') ***REMOVED***
					var v10 msgStreams
					(v10).UnmarshalEasyJSON(in)
					out.Streams = append(out.Streams, v10)
					in.WantComma()
				***REMOVED***
				in.Delim(']')
			***REMOVED***
		case "dropped_entries":
			if in.IsNull() ***REMOVED***
				in.Skip()
				out.DroppedEntries = nil
			***REMOVED*** else ***REMOVED***
				in.Delim('[')
				if out.DroppedEntries == nil ***REMOVED***
					if !in.IsDelim(']') ***REMOVED***
						out.DroppedEntries = make([]msgDroppedEntries, 0, 2)
					***REMOVED*** else ***REMOVED***
						out.DroppedEntries = []msgDroppedEntries***REMOVED******REMOVED***
					***REMOVED***
				***REMOVED*** else ***REMOVED***
					out.DroppedEntries = (out.DroppedEntries)[:0]
				***REMOVED***
				for !in.IsDelim(']') ***REMOVED***
					var v11 msgDroppedEntries
					(v11).UnmarshalEasyJSON(in)
					out.DroppedEntries = append(out.DroppedEntries, v11)
					in.WantComma()
				***REMOVED***
				in.Delim(']')
			***REMOVED***
		default:
			in.SkipRecursive()
		***REMOVED***
		in.WantComma()
	***REMOVED***
	in.Delim('***REMOVED***')
	if isTopLevel ***REMOVED***
		in.Consumed()
	***REMOVED***
***REMOVED***
func easyjsonC9ac27e5EncodeGithubComLoadimpactK6Cloudapi2(out *jwriter.Writer, in msg) ***REMOVED***
	out.RawByte('***REMOVED***')
	first := true
	_ = first
	***REMOVED***
		const prefix string = ",\"streams\":"
		out.RawString(prefix[1:])
		if in.Streams == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 ***REMOVED***
			out.RawString("null")
		***REMOVED*** else ***REMOVED***
			out.RawByte('[')
			for v12, v13 := range in.Streams ***REMOVED***
				if v12 > 0 ***REMOVED***
					out.RawByte(',')
				***REMOVED***
				(v13).MarshalEasyJSON(out)
			***REMOVED***
			out.RawByte(']')
		***REMOVED***
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"dropped_entries\":"
		out.RawString(prefix)
		if in.DroppedEntries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 ***REMOVED***
			out.RawString("null")
		***REMOVED*** else ***REMOVED***
			out.RawByte('[')
			for v14, v15 := range in.DroppedEntries ***REMOVED***
				if v14 > 0 ***REMOVED***
					out.RawByte(',')
				***REMOVED***
				(v15).MarshalEasyJSON(out)
			***REMOVED***
			out.RawByte(']')
		***REMOVED***
	***REMOVED***
	out.RawByte('***REMOVED***')
***REMOVED***

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v msg) MarshalEasyJSON(w *jwriter.Writer) ***REMOVED***
	easyjsonC9ac27e5EncodeGithubComLoadimpactK6Cloudapi2(w, v)
***REMOVED***

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *msg) UnmarshalEasyJSON(l *jlexer.Lexer) ***REMOVED***
	easyjsonC9ac27e5DecodeGithubComLoadimpactK6Cloudapi2(l, v)
***REMOVED***
