// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package cloud

import (
	json "encoding/json"
	stats "github.com/loadimpact/k6/stats"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9def2ecdDecodeGithubComLoadimpactK6StatsCloud(in *jlexer.Lexer, out *samples) ***REMOVED***
	isTopLevel := in.IsStart()
	if in.IsNull() ***REMOVED***
		in.Skip()
		*out = nil
	***REMOVED*** else ***REMOVED***
		in.Delim('[')
		if *out == nil ***REMOVED***
			if !in.IsDelim(']') ***REMOVED***
				*out = make(samples, 0, 8)
			***REMOVED*** else ***REMOVED***
				*out = samples***REMOVED******REMOVED***
			***REMOVED***
		***REMOVED*** else ***REMOVED***
			*out = (*out)[:0]
		***REMOVED***
		for !in.IsDelim(']') ***REMOVED***
			var v1 *Sample
			if in.IsNull() ***REMOVED***
				in.Skip()
				v1 = nil
			***REMOVED*** else ***REMOVED***
				if v1 == nil ***REMOVED***
					v1 = new(Sample)
				***REMOVED***
				(*v1).UnmarshalEasyJSON(in)
			***REMOVED***
			*out = append(*out, v1)
			in.WantComma()
		***REMOVED***
		in.Delim(']')
	***REMOVED***
	if isTopLevel ***REMOVED***
		in.Consumed()
	***REMOVED***
***REMOVED***
func easyjson9def2ecdEncodeGithubComLoadimpactK6StatsCloud(out *jwriter.Writer, in samples) ***REMOVED***
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 ***REMOVED***
		out.RawString("null")
	***REMOVED*** else ***REMOVED***
		out.RawByte('[')
		for v2, v3 := range in ***REMOVED***
			if v2 > 0 ***REMOVED***
				out.RawByte(',')
			***REMOVED***
			if v3 == nil ***REMOVED***
				out.RawString("null")
			***REMOVED*** else ***REMOVED***
				(*v3).MarshalEasyJSON(out)
			***REMOVED***
		***REMOVED***
		out.RawByte(']')
	***REMOVED***
***REMOVED***

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v samples) MarshalEasyJSON(w *jwriter.Writer) ***REMOVED***
	easyjson9def2ecdEncodeGithubComLoadimpactK6StatsCloud(w, v)
***REMOVED***

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *samples) UnmarshalEasyJSON(l *jlexer.Lexer) ***REMOVED***
	easyjson9def2ecdDecodeGithubComLoadimpactK6StatsCloud(l, v)
***REMOVED***
func easyjson9def2ecdDecodeGithubComLoadimpactK6StatsCloud1(in *jlexer.Lexer, out *SampleDataSingle) ***REMOVED***
	isTopLevel := in.IsStart()
	if in.IsNull() ***REMOVED***
		if isTopLevel ***REMOVED***
			in.Consumed()
		***REMOVED***
		in.Skip()
		return
	***REMOVED***
	in.Delim('***REMOVED***')
	for !in.IsDelim('***REMOVED***') ***REMOVED***
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() ***REMOVED***
			in.Skip()
			in.WantComma()
			continue
		***REMOVED***
		switch key ***REMOVED***
		case "time":
			out.Time = int64(in.Int64Str())
		case "type":
			if data := in.UnsafeBytes(); in.Ok() ***REMOVED***
				in.AddError((out.Type).UnmarshalText(data))
			***REMOVED***
		case "tags":
			if in.IsNull() ***REMOVED***
				in.Skip()
				out.Tags = nil
			***REMOVED*** else ***REMOVED***
				if out.Tags == nil ***REMOVED***
					out.Tags = new(stats.SampleTags)
				***REMOVED***
				if data := in.Raw(); in.Ok() ***REMOVED***
					in.AddError((*out.Tags).UnmarshalJSON(data))
				***REMOVED***
			***REMOVED***
		case "value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		***REMOVED***
		in.WantComma()
	***REMOVED***
	in.Delim('***REMOVED***')
	if isTopLevel ***REMOVED***
		in.Consumed()
	***REMOVED***
***REMOVED***
func easyjson9def2ecdEncodeGithubComLoadimpactK6StatsCloud1(out *jwriter.Writer, in SampleDataSingle) ***REMOVED***
	out.RawByte('***REMOVED***')
	first := true
	_ = first
	***REMOVED***
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.Time))
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Raw((in.Type).MarshalJSON())
	***REMOVED***
	if in.Tags != nil ***REMOVED***
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		(*in.Tags).MarshalEasyJSON(out)
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Float64(float64(in.Value))
	***REMOVED***
	out.RawByte('***REMOVED***')
***REMOVED***

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SampleDataSingle) MarshalEasyJSON(w *jwriter.Writer) ***REMOVED***
	easyjson9def2ecdEncodeGithubComLoadimpactK6StatsCloud1(w, v)
***REMOVED***

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SampleDataSingle) UnmarshalEasyJSON(l *jlexer.Lexer) ***REMOVED***
	easyjson9def2ecdDecodeGithubComLoadimpactK6StatsCloud1(l, v)
***REMOVED***
func easyjson9def2ecdDecodeGithubComLoadimpactK6StatsCloud2(in *jlexer.Lexer, out *SampleDataMap) ***REMOVED***
	isTopLevel := in.IsStart()
	if in.IsNull() ***REMOVED***
		if isTopLevel ***REMOVED***
			in.Consumed()
		***REMOVED***
		in.Skip()
		return
	***REMOVED***
	in.Delim('***REMOVED***')
	for !in.IsDelim('***REMOVED***') ***REMOVED***
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() ***REMOVED***
			in.Skip()
			in.WantComma()
			continue
		***REMOVED***
		switch key ***REMOVED***
		case "time":
			out.Time = int64(in.Int64Str())
		case "type":
			if data := in.UnsafeBytes(); in.Ok() ***REMOVED***
				in.AddError((out.Type).UnmarshalText(data))
			***REMOVED***
		case "tags":
			if in.IsNull() ***REMOVED***
				in.Skip()
				out.Tags = nil
			***REMOVED*** else ***REMOVED***
				if out.Tags == nil ***REMOVED***
					out.Tags = new(stats.SampleTags)
				***REMOVED***
				if data := in.Raw(); in.Ok() ***REMOVED***
					in.AddError((*out.Tags).UnmarshalJSON(data))
				***REMOVED***
			***REMOVED***
		case "values":
			if in.IsNull() ***REMOVED***
				in.Skip()
			***REMOVED*** else ***REMOVED***
				in.Delim('***REMOVED***')
				if !in.IsDelim('***REMOVED***') ***REMOVED***
					out.Values = make(map[string]float64)
				***REMOVED*** else ***REMOVED***
					out.Values = nil
				***REMOVED***
				for !in.IsDelim('***REMOVED***') ***REMOVED***
					key := string(in.String())
					in.WantColon()
					var v4 float64
					v4 = float64(in.Float64())
					(out.Values)[key] = v4
					in.WantComma()
				***REMOVED***
				in.Delim('***REMOVED***')
			***REMOVED***
		default:
			in.SkipRecursive()
		***REMOVED***
		in.WantComma()
	***REMOVED***
	in.Delim('***REMOVED***')
	if isTopLevel ***REMOVED***
		in.Consumed()
	***REMOVED***
***REMOVED***
func easyjson9def2ecdEncodeGithubComLoadimpactK6StatsCloud2(out *jwriter.Writer, in SampleDataMap) ***REMOVED***
	out.RawByte('***REMOVED***')
	first := true
	_ = first
	***REMOVED***
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.Time))
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Raw((in.Type).MarshalJSON())
	***REMOVED***
	if in.Tags != nil ***REMOVED***
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		(*in.Tags).MarshalEasyJSON(out)
	***REMOVED***
	if len(in.Values) != 0 ***REMOVED***
		const prefix string = ",\"values\":"
		out.RawString(prefix)
		***REMOVED***
			out.RawByte('***REMOVED***')
			v5First := true
			for v5Name, v5Value := range in.Values ***REMOVED***
				if v5First ***REMOVED***
					v5First = false
				***REMOVED*** else ***REMOVED***
					out.RawByte(',')
				***REMOVED***
				out.String(string(v5Name))
				out.RawByte(':')
				out.Float64(float64(v5Value))
			***REMOVED***
			out.RawByte('***REMOVED***')
		***REMOVED***
	***REMOVED***
	out.RawByte('***REMOVED***')
***REMOVED***

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SampleDataMap) MarshalEasyJSON(w *jwriter.Writer) ***REMOVED***
	easyjson9def2ecdEncodeGithubComLoadimpactK6StatsCloud2(w, v)
***REMOVED***

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SampleDataMap) UnmarshalEasyJSON(l *jlexer.Lexer) ***REMOVED***
	easyjson9def2ecdDecodeGithubComLoadimpactK6StatsCloud2(l, v)
***REMOVED***
func easyjson9def2ecdDecodeGithubComLoadimpactK6StatsCloud3(in *jlexer.Lexer, out *SampleDataAggregatedHTTPReqs) ***REMOVED***
	isTopLevel := in.IsStart()
	if in.IsNull() ***REMOVED***
		if isTopLevel ***REMOVED***
			in.Consumed()
		***REMOVED***
		in.Skip()
		return
	***REMOVED***
	in.Delim('***REMOVED***')
	for !in.IsDelim('***REMOVED***') ***REMOVED***
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() ***REMOVED***
			in.Skip()
			in.WantComma()
			continue
		***REMOVED***
		switch key ***REMOVED***
		case "time":
			out.Time = int64(in.Int64Str())
		case "type":
			out.Type = string(in.String())
		case "count":
			out.Count = uint64(in.Uint64())
		case "tags":
			if in.IsNull() ***REMOVED***
				in.Skip()
				out.Tags = nil
			***REMOVED*** else ***REMOVED***
				if out.Tags == nil ***REMOVED***
					out.Tags = new(stats.SampleTags)
				***REMOVED***
				if data := in.Raw(); in.Ok() ***REMOVED***
					in.AddError((*out.Tags).UnmarshalJSON(data))
				***REMOVED***
			***REMOVED***
		case "values":
			easyjson9def2ecdDecode(in, &out.Values)
		default:
			in.SkipRecursive()
		***REMOVED***
		in.WantComma()
	***REMOVED***
	in.Delim('***REMOVED***')
	if isTopLevel ***REMOVED***
		in.Consumed()
	***REMOVED***
***REMOVED***
func easyjson9def2ecdEncodeGithubComLoadimpactK6StatsCloud3(out *jwriter.Writer, in SampleDataAggregatedHTTPReqs) ***REMOVED***
	out.RawByte('***REMOVED***')
	first := true
	_ = first
	***REMOVED***
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.Time))
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Count))
	***REMOVED***
	if in.Tags != nil ***REMOVED***
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		(*in.Tags).MarshalEasyJSON(out)
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"values\":"
		out.RawString(prefix)
		easyjson9def2ecdEncode(out, in.Values)
	***REMOVED***
	out.RawByte('***REMOVED***')
***REMOVED***

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SampleDataAggregatedHTTPReqs) MarshalEasyJSON(w *jwriter.Writer) ***REMOVED***
	easyjson9def2ecdEncodeGithubComLoadimpactK6StatsCloud3(w, v)
***REMOVED***

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SampleDataAggregatedHTTPReqs) UnmarshalEasyJSON(l *jlexer.Lexer) ***REMOVED***
	easyjson9def2ecdDecodeGithubComLoadimpactK6StatsCloud3(l, v)
***REMOVED***
func easyjson9def2ecdDecode(in *jlexer.Lexer, out *struct ***REMOVED***
	Duration       AggregatedMetric `json:"http_req_duration"`
	Blocked        AggregatedMetric `json:"http_req_blocked"`
	Connecting     AggregatedMetric `json:"http_req_connecting"`
	TLSHandshaking AggregatedMetric `json:"http_req_tls_handshaking"`
	Sending        AggregatedMetric `json:"http_req_sending"`
	Waiting        AggregatedMetric `json:"http_req_waiting"`
	Receiving      AggregatedMetric `json:"http_req_receiving"`
***REMOVED***) ***REMOVED***
	isTopLevel := in.IsStart()
	if in.IsNull() ***REMOVED***
		if isTopLevel ***REMOVED***
			in.Consumed()
		***REMOVED***
		in.Skip()
		return
	***REMOVED***
	in.Delim('***REMOVED***')
	for !in.IsDelim('***REMOVED***') ***REMOVED***
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() ***REMOVED***
			in.Skip()
			in.WantComma()
			continue
		***REMOVED***
		switch key ***REMOVED***
		case "http_req_duration":
			easyjson9def2ecdDecodeGithubComLoadimpactK6StatsCloud4(in, &out.Duration)
		case "http_req_blocked":
			easyjson9def2ecdDecodeGithubComLoadimpactK6StatsCloud4(in, &out.Blocked)
		case "http_req_connecting":
			easyjson9def2ecdDecodeGithubComLoadimpactK6StatsCloud4(in, &out.Connecting)
		case "http_req_tls_handshaking":
			easyjson9def2ecdDecodeGithubComLoadimpactK6StatsCloud4(in, &out.TLSHandshaking)
		case "http_req_sending":
			easyjson9def2ecdDecodeGithubComLoadimpactK6StatsCloud4(in, &out.Sending)
		case "http_req_waiting":
			easyjson9def2ecdDecodeGithubComLoadimpactK6StatsCloud4(in, &out.Waiting)
		case "http_req_receiving":
			easyjson9def2ecdDecodeGithubComLoadimpactK6StatsCloud4(in, &out.Receiving)
		default:
			in.SkipRecursive()
		***REMOVED***
		in.WantComma()
	***REMOVED***
	in.Delim('***REMOVED***')
	if isTopLevel ***REMOVED***
		in.Consumed()
	***REMOVED***
***REMOVED***
func easyjson9def2ecdEncode(out *jwriter.Writer, in struct ***REMOVED***
	Duration       AggregatedMetric `json:"http_req_duration"`
	Blocked        AggregatedMetric `json:"http_req_blocked"`
	Connecting     AggregatedMetric `json:"http_req_connecting"`
	TLSHandshaking AggregatedMetric `json:"http_req_tls_handshaking"`
	Sending        AggregatedMetric `json:"http_req_sending"`
	Waiting        AggregatedMetric `json:"http_req_waiting"`
	Receiving      AggregatedMetric `json:"http_req_receiving"`
***REMOVED***) ***REMOVED***
	out.RawByte('***REMOVED***')
	first := true
	_ = first
	***REMOVED***
		const prefix string = ",\"http_req_duration\":"
		out.RawString(prefix[1:])
		easyjson9def2ecdEncodeGithubComLoadimpactK6StatsCloud4(out, in.Duration)
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"http_req_blocked\":"
		out.RawString(prefix)
		easyjson9def2ecdEncodeGithubComLoadimpactK6StatsCloud4(out, in.Blocked)
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"http_req_connecting\":"
		out.RawString(prefix)
		easyjson9def2ecdEncodeGithubComLoadimpactK6StatsCloud4(out, in.Connecting)
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"http_req_tls_handshaking\":"
		out.RawString(prefix)
		easyjson9def2ecdEncodeGithubComLoadimpactK6StatsCloud4(out, in.TLSHandshaking)
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"http_req_sending\":"
		out.RawString(prefix)
		easyjson9def2ecdEncodeGithubComLoadimpactK6StatsCloud4(out, in.Sending)
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"http_req_waiting\":"
		out.RawString(prefix)
		easyjson9def2ecdEncodeGithubComLoadimpactK6StatsCloud4(out, in.Waiting)
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"http_req_receiving\":"
		out.RawString(prefix)
		easyjson9def2ecdEncodeGithubComLoadimpactK6StatsCloud4(out, in.Receiving)
	***REMOVED***
	out.RawByte('***REMOVED***')
***REMOVED***
func easyjson9def2ecdDecodeGithubComLoadimpactK6StatsCloud4(in *jlexer.Lexer, out *AggregatedMetric) ***REMOVED***
	isTopLevel := in.IsStart()
	if in.IsNull() ***REMOVED***
		if isTopLevel ***REMOVED***
			in.Consumed()
		***REMOVED***
		in.Skip()
		return
	***REMOVED***
	in.Delim('***REMOVED***')
	for !in.IsDelim('***REMOVED***') ***REMOVED***
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() ***REMOVED***
			in.Skip()
			in.WantComma()
			continue
		***REMOVED***
		switch key ***REMOVED***
		case "min":
			out.Min = float64(in.Float64())
		case "max":
			out.Max = float64(in.Float64())
		case "avg":
			out.Avg = float64(in.Float64())
		default:
			in.SkipRecursive()
		***REMOVED***
		in.WantComma()
	***REMOVED***
	in.Delim('***REMOVED***')
	if isTopLevel ***REMOVED***
		in.Consumed()
	***REMOVED***
***REMOVED***
func easyjson9def2ecdEncodeGithubComLoadimpactK6StatsCloud4(out *jwriter.Writer, in AggregatedMetric) ***REMOVED***
	out.RawByte('***REMOVED***')
	first := true
	_ = first
	***REMOVED***
		const prefix string = ",\"min\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Min))
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"max\":"
		out.RawString(prefix)
		out.Float64(float64(in.Max))
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"avg\":"
		out.RawString(prefix)
		out.Float64(float64(in.Avg))
	***REMOVED***
	out.RawByte('***REMOVED***')
***REMOVED***
func easyjson9def2ecdDecodeGithubComLoadimpactK6StatsCloud5(in *jlexer.Lexer, out *Sample) ***REMOVED***
	isTopLevel := in.IsStart()
	if in.IsNull() ***REMOVED***
		if isTopLevel ***REMOVED***
			in.Consumed()
		***REMOVED***
		in.Skip()
		return
	***REMOVED***
	in.Delim('***REMOVED***')
	for !in.IsDelim('***REMOVED***') ***REMOVED***
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() ***REMOVED***
			in.Skip()
			in.WantComma()
			continue
		***REMOVED***
		switch key ***REMOVED***
		case "type":
			out.Type = string(in.String())
		case "metric":
			out.Metric = string(in.String())
		case "data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok ***REMOVED***
				m.UnmarshalEasyJSON(in)
			***REMOVED*** else if m, ok := out.Data.(json.Unmarshaler); ok ***REMOVED***
				_ = m.UnmarshalJSON(in.Raw())
			***REMOVED*** else ***REMOVED***
				out.Data = in.Interface()
			***REMOVED***
		default:
			in.SkipRecursive()
		***REMOVED***
		in.WantComma()
	***REMOVED***
	in.Delim('***REMOVED***')
	if isTopLevel ***REMOVED***
		in.Consumed()
	***REMOVED***
***REMOVED***
func easyjson9def2ecdEncodeGithubComLoadimpactK6StatsCloud5(out *jwriter.Writer, in Sample) ***REMOVED***
	out.RawByte('***REMOVED***')
	first := true
	_ = first
	***REMOVED***
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"metric\":"
		out.RawString(prefix)
		out.String(string(in.Metric))
	***REMOVED***
	***REMOVED***
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if m, ok := in.Data.(easyjson.Marshaler); ok ***REMOVED***
			m.MarshalEasyJSON(out)
		***REMOVED*** else if m, ok := in.Data.(json.Marshaler); ok ***REMOVED***
			out.Raw(m.MarshalJSON())
		***REMOVED*** else ***REMOVED***
			out.Raw(json.Marshal(in.Data))
		***REMOVED***
	***REMOVED***
	out.RawByte('***REMOVED***')
***REMOVED***

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Sample) MarshalEasyJSON(w *jwriter.Writer) ***REMOVED***
	easyjson9def2ecdEncodeGithubComLoadimpactK6StatsCloud5(w, v)
***REMOVED***

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Sample) UnmarshalEasyJSON(l *jlexer.Lexer) ***REMOVED***
	easyjson9def2ecdDecodeGithubComLoadimpactK6StatsCloud5(l, v)
***REMOVED***
