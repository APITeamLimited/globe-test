// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build ignore

package main

import (
	"flag"
	"log"

	"golang.org/x/text/internal/gen"
	"golang.org/x/text/internal/triegen"
	"golang.org/x/text/internal/ucd"
)

var outputFile = flag.String("out", "tables.go", "output file")

func main() ***REMOVED***
	gen.Init()
	gen.Repackage("gen_trieval.go", "trieval.go", "bidi")
	gen.Repackage("gen_ranges.go", "ranges_test.go", "bidi")

	genTables()
***REMOVED***

// bidiClass names and codes taken from class "bc" in
// http://www.unicode.org/Public/8.0.0/ucd/PropertyValueAliases.txt
var bidiClass = map[string]Class***REMOVED***
	"AL":  AL,  // ArabicLetter
	"AN":  AN,  // ArabicNumber
	"B":   B,   // ParagraphSeparator
	"BN":  BN,  // BoundaryNeutral
	"CS":  CS,  // CommonSeparator
	"EN":  EN,  // EuropeanNumber
	"ES":  ES,  // EuropeanSeparator
	"ET":  ET,  // EuropeanTerminator
	"L":   L,   // LeftToRight
	"NSM": NSM, // NonspacingMark
	"ON":  ON,  // OtherNeutral
	"R":   R,   // RightToLeft
	"S":   S,   // SegmentSeparator
	"WS":  WS,  // WhiteSpace

	"FSI": Control,
	"PDF": Control,
	"PDI": Control,
	"LRE": Control,
	"LRI": Control,
	"LRO": Control,
	"RLE": Control,
	"RLI": Control,
	"RLO": Control,
***REMOVED***

func genTables() ***REMOVED***
	if numClass > 0x0F ***REMOVED***
		log.Fatalf("Too many Class constants (%#x > 0x0F).", numClass)
	***REMOVED***
	w := gen.NewCodeWriter()
	defer w.WriteVersionedGoFile(*outputFile, "bidi")

	gen.WriteUnicodeVersion(w)

	t := triegen.NewTrie("bidi")

	// Build data about bracket mapping. These bits need to be or-ed with
	// any other bits.
	orMask := map[rune]uint64***REMOVED******REMOVED***

	xorMap := map[rune]int***REMOVED******REMOVED***
	xorMasks := []rune***REMOVED***0***REMOVED*** // First value is no-op.

	ucd.Parse(gen.OpenUCDFile("BidiBrackets.txt"), func(p *ucd.Parser) ***REMOVED***
		r1 := p.Rune(0)
		r2 := p.Rune(1)
		xor := r1 ^ r2
		if _, ok := xorMap[xor]; !ok ***REMOVED***
			xorMap[xor] = len(xorMasks)
			xorMasks = append(xorMasks, xor)
		***REMOVED***
		entry := uint64(xorMap[xor]) << xorMaskShift
		switch p.String(2) ***REMOVED***
		case "o":
			entry |= openMask
		case "c", "n":
		default:
			log.Fatalf("Unknown bracket class %q.", p.String(2))
		***REMOVED***
		orMask[r1] = entry
	***REMOVED***)

	w.WriteComment(`
	xorMasks contains masks to be xor-ed with brackets to get the reverse
	version.`)
	w.WriteVar("xorMasks", xorMasks)

	done := map[rune]bool***REMOVED******REMOVED***

	insert := func(r rune, c Class) ***REMOVED***
		if !done[r] ***REMOVED***
			t.Insert(r, orMask[r]|uint64(c))
			done[r] = true
		***REMOVED***
	***REMOVED***

	// Insert the derived BiDi properties.
	ucd.Parse(gen.OpenUCDFile("extracted/DerivedBidiClass.txt"), func(p *ucd.Parser) ***REMOVED***
		r := p.Rune(0)
		class, ok := bidiClass[p.String(1)]
		if !ok ***REMOVED***
			log.Fatalf("%U: Unknown BiDi class %q", r, p.String(1))
		***REMOVED***
		insert(r, class)
	***REMOVED***)
	visitDefaults(insert)

	// TODO: use sparse blocks. This would reduce table size considerably
	// from the looks of it.

	sz, err := t.Gen(w)
	if err != nil ***REMOVED***
		log.Fatal(err)
	***REMOVED***
	w.Size += sz
***REMOVED***

// dummy values to make methods in gen_common compile. The real versions
// will be generated by this file to tables.go.
var (
	xorMasks []rune
)
