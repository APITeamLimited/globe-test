// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by generate-types. DO NOT EDIT.

package impl

import (
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoiface"
)

func (m *messageState) Descriptor() protoreflect.MessageDescriptor ***REMOVED***
	return m.messageInfo().Desc
***REMOVED***
func (m *messageState) Type() protoreflect.MessageType ***REMOVED***
	return m.messageInfo()
***REMOVED***
func (m *messageState) New() protoreflect.Message ***REMOVED***
	return m.messageInfo().New()
***REMOVED***
func (m *messageState) Interface() protoreflect.ProtoMessage ***REMOVED***
	return m.protoUnwrap().(protoreflect.ProtoMessage)
***REMOVED***
func (m *messageState) protoUnwrap() interface***REMOVED******REMOVED*** ***REMOVED***
	return m.pointer().AsIfaceOf(m.messageInfo().GoReflectType.Elem())
***REMOVED***
func (m *messageState) ProtoMethods() *protoiface.Methods ***REMOVED***
	m.messageInfo().init()
	return &m.messageInfo().methods
***REMOVED***

// ProtoMessageInfo is a pseudo-internal API for allowing the v1 code
// to be able to retrieve a v2 MessageInfo struct.
//
// WARNING: This method is exempt from the compatibility promise and
// may be removed in the future without warning.
func (m *messageState) ProtoMessageInfo() *MessageInfo ***REMOVED***
	return m.messageInfo()
***REMOVED***

func (m *messageState) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) ***REMOVED***
	m.messageInfo().init()
	for _, ri := range m.messageInfo().rangeInfos ***REMOVED***
		switch ri := ri.(type) ***REMOVED***
		case *fieldInfo:
			if ri.has(m.pointer()) ***REMOVED***
				if !f(ri.fieldDesc, ri.get(m.pointer())) ***REMOVED***
					return
				***REMOVED***
			***REMOVED***
		case *oneofInfo:
			if n := ri.which(m.pointer()); n > 0 ***REMOVED***
				fi := m.messageInfo().fields[n]
				if !f(fi.fieldDesc, fi.get(m.pointer())) ***REMOVED***
					return
				***REMOVED***
			***REMOVED***
		***REMOVED***
	***REMOVED***
	m.messageInfo().extensionMap(m.pointer()).Range(f)
***REMOVED***
func (m *messageState) Has(fd protoreflect.FieldDescriptor) bool ***REMOVED***
	m.messageInfo().init()
	if fi, xt := m.messageInfo().checkField(fd); fi != nil ***REMOVED***
		return fi.has(m.pointer())
	***REMOVED*** else ***REMOVED***
		return m.messageInfo().extensionMap(m.pointer()).Has(xt)
	***REMOVED***
***REMOVED***
func (m *messageState) Clear(fd protoreflect.FieldDescriptor) ***REMOVED***
	m.messageInfo().init()
	if fi, xt := m.messageInfo().checkField(fd); fi != nil ***REMOVED***
		fi.clear(m.pointer())
	***REMOVED*** else ***REMOVED***
		m.messageInfo().extensionMap(m.pointer()).Clear(xt)
	***REMOVED***
***REMOVED***
func (m *messageState) Get(fd protoreflect.FieldDescriptor) protoreflect.Value ***REMOVED***
	m.messageInfo().init()
	if fi, xt := m.messageInfo().checkField(fd); fi != nil ***REMOVED***
		return fi.get(m.pointer())
	***REMOVED*** else ***REMOVED***
		return m.messageInfo().extensionMap(m.pointer()).Get(xt)
	***REMOVED***
***REMOVED***
func (m *messageState) Set(fd protoreflect.FieldDescriptor, v protoreflect.Value) ***REMOVED***
	m.messageInfo().init()
	if fi, xt := m.messageInfo().checkField(fd); fi != nil ***REMOVED***
		fi.set(m.pointer(), v)
	***REMOVED*** else ***REMOVED***
		m.messageInfo().extensionMap(m.pointer()).Set(xt, v)
	***REMOVED***
***REMOVED***
func (m *messageState) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value ***REMOVED***
	m.messageInfo().init()
	if fi, xt := m.messageInfo().checkField(fd); fi != nil ***REMOVED***
		return fi.mutable(m.pointer())
	***REMOVED*** else ***REMOVED***
		return m.messageInfo().extensionMap(m.pointer()).Mutable(xt)
	***REMOVED***
***REMOVED***
func (m *messageState) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value ***REMOVED***
	m.messageInfo().init()
	if fi, xt := m.messageInfo().checkField(fd); fi != nil ***REMOVED***
		return fi.newField()
	***REMOVED*** else ***REMOVED***
		return xt.New()
	***REMOVED***
***REMOVED***
func (m *messageState) WhichOneof(od protoreflect.OneofDescriptor) protoreflect.FieldDescriptor ***REMOVED***
	m.messageInfo().init()
	if oi := m.messageInfo().oneofs[od.Name()]; oi != nil && oi.oneofDesc == od ***REMOVED***
		return od.Fields().ByNumber(oi.which(m.pointer()))
	***REMOVED***
	panic("invalid oneof descriptor " + string(od.FullName()) + " for message " + string(m.Descriptor().FullName()))
***REMOVED***
func (m *messageState) GetUnknown() protoreflect.RawFields ***REMOVED***
	m.messageInfo().init()
	return m.messageInfo().getUnknown(m.pointer())
***REMOVED***
func (m *messageState) SetUnknown(b protoreflect.RawFields) ***REMOVED***
	m.messageInfo().init()
	m.messageInfo().setUnknown(m.pointer(), b)
***REMOVED***
func (m *messageState) IsValid() bool ***REMOVED***
	return !m.pointer().IsNil()
***REMOVED***

func (m *messageReflectWrapper) Descriptor() protoreflect.MessageDescriptor ***REMOVED***
	return m.messageInfo().Desc
***REMOVED***
func (m *messageReflectWrapper) Type() protoreflect.MessageType ***REMOVED***
	return m.messageInfo()
***REMOVED***
func (m *messageReflectWrapper) New() protoreflect.Message ***REMOVED***
	return m.messageInfo().New()
***REMOVED***
func (m *messageReflectWrapper) Interface() protoreflect.ProtoMessage ***REMOVED***
	if m, ok := m.protoUnwrap().(protoreflect.ProtoMessage); ok ***REMOVED***
		return m
	***REMOVED***
	return (*messageIfaceWrapper)(m)
***REMOVED***
func (m *messageReflectWrapper) protoUnwrap() interface***REMOVED******REMOVED*** ***REMOVED***
	return m.pointer().AsIfaceOf(m.messageInfo().GoReflectType.Elem())
***REMOVED***
func (m *messageReflectWrapper) ProtoMethods() *protoiface.Methods ***REMOVED***
	m.messageInfo().init()
	return &m.messageInfo().methods
***REMOVED***

// ProtoMessageInfo is a pseudo-internal API for allowing the v1 code
// to be able to retrieve a v2 MessageInfo struct.
//
// WARNING: This method is exempt from the compatibility promise and
// may be removed in the future without warning.
func (m *messageReflectWrapper) ProtoMessageInfo() *MessageInfo ***REMOVED***
	return m.messageInfo()
***REMOVED***

func (m *messageReflectWrapper) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) ***REMOVED***
	m.messageInfo().init()
	for _, ri := range m.messageInfo().rangeInfos ***REMOVED***
		switch ri := ri.(type) ***REMOVED***
		case *fieldInfo:
			if ri.has(m.pointer()) ***REMOVED***
				if !f(ri.fieldDesc, ri.get(m.pointer())) ***REMOVED***
					return
				***REMOVED***
			***REMOVED***
		case *oneofInfo:
			if n := ri.which(m.pointer()); n > 0 ***REMOVED***
				fi := m.messageInfo().fields[n]
				if !f(fi.fieldDesc, fi.get(m.pointer())) ***REMOVED***
					return
				***REMOVED***
			***REMOVED***
		***REMOVED***
	***REMOVED***
	m.messageInfo().extensionMap(m.pointer()).Range(f)
***REMOVED***
func (m *messageReflectWrapper) Has(fd protoreflect.FieldDescriptor) bool ***REMOVED***
	m.messageInfo().init()
	if fi, xt := m.messageInfo().checkField(fd); fi != nil ***REMOVED***
		return fi.has(m.pointer())
	***REMOVED*** else ***REMOVED***
		return m.messageInfo().extensionMap(m.pointer()).Has(xt)
	***REMOVED***
***REMOVED***
func (m *messageReflectWrapper) Clear(fd protoreflect.FieldDescriptor) ***REMOVED***
	m.messageInfo().init()
	if fi, xt := m.messageInfo().checkField(fd); fi != nil ***REMOVED***
		fi.clear(m.pointer())
	***REMOVED*** else ***REMOVED***
		m.messageInfo().extensionMap(m.pointer()).Clear(xt)
	***REMOVED***
***REMOVED***
func (m *messageReflectWrapper) Get(fd protoreflect.FieldDescriptor) protoreflect.Value ***REMOVED***
	m.messageInfo().init()
	if fi, xt := m.messageInfo().checkField(fd); fi != nil ***REMOVED***
		return fi.get(m.pointer())
	***REMOVED*** else ***REMOVED***
		return m.messageInfo().extensionMap(m.pointer()).Get(xt)
	***REMOVED***
***REMOVED***
func (m *messageReflectWrapper) Set(fd protoreflect.FieldDescriptor, v protoreflect.Value) ***REMOVED***
	m.messageInfo().init()
	if fi, xt := m.messageInfo().checkField(fd); fi != nil ***REMOVED***
		fi.set(m.pointer(), v)
	***REMOVED*** else ***REMOVED***
		m.messageInfo().extensionMap(m.pointer()).Set(xt, v)
	***REMOVED***
***REMOVED***
func (m *messageReflectWrapper) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value ***REMOVED***
	m.messageInfo().init()
	if fi, xt := m.messageInfo().checkField(fd); fi != nil ***REMOVED***
		return fi.mutable(m.pointer())
	***REMOVED*** else ***REMOVED***
		return m.messageInfo().extensionMap(m.pointer()).Mutable(xt)
	***REMOVED***
***REMOVED***
func (m *messageReflectWrapper) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value ***REMOVED***
	m.messageInfo().init()
	if fi, xt := m.messageInfo().checkField(fd); fi != nil ***REMOVED***
		return fi.newField()
	***REMOVED*** else ***REMOVED***
		return xt.New()
	***REMOVED***
***REMOVED***
func (m *messageReflectWrapper) WhichOneof(od protoreflect.OneofDescriptor) protoreflect.FieldDescriptor ***REMOVED***
	m.messageInfo().init()
	if oi := m.messageInfo().oneofs[od.Name()]; oi != nil && oi.oneofDesc == od ***REMOVED***
		return od.Fields().ByNumber(oi.which(m.pointer()))
	***REMOVED***
	panic("invalid oneof descriptor " + string(od.FullName()) + " for message " + string(m.Descriptor().FullName()))
***REMOVED***
func (m *messageReflectWrapper) GetUnknown() protoreflect.RawFields ***REMOVED***
	m.messageInfo().init()
	return m.messageInfo().getUnknown(m.pointer())
***REMOVED***
func (m *messageReflectWrapper) SetUnknown(b protoreflect.RawFields) ***REMOVED***
	m.messageInfo().init()
	m.messageInfo().setUnknown(m.pointer(), b)
***REMOVED***
func (m *messageReflectWrapper) IsValid() bool ***REMOVED***
	return !m.pointer().IsNil()
***REMOVED***
