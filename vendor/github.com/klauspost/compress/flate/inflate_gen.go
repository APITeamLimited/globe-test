// Code generated by go generate gen_inflate.go. DO NOT EDIT.

package flate

import (
	"bufio"
	"bytes"
	"fmt"
	"math/bits"
	"strings"
)

// Decode a single Huffman block from f.
// hl and hd are the Huffman states for the lit/length values
// and the distance values, respectively. If hd == nil, using the
// fixed distance encoding associated with fixed Huffman blocks.
func (f *decompressor) huffmanBytesBuffer() ***REMOVED***
	const (
		stateInit = iota // Zero value must be stateInit
		stateDict
	)
	fr := f.r.(*bytes.Buffer)

	switch f.stepState ***REMOVED***
	case stateInit:
		goto readLiteral
	case stateDict:
		goto copyHistory
	***REMOVED***

readLiteral:
	// Read literal and/or (length, distance) according to RFC section 3.2.3.
	***REMOVED***
		var v int
		***REMOVED***
			// Inlined v, err := f.huffSym(f.hl)
			// Since a huffmanDecoder can be empty or be composed of a degenerate tree
			// with single element, huffSym must error on these two edge cases. In both
			// cases, the chunks slice will be 0 for the invalid sequence, leading it
			// satisfy the n == 0 check below.
			n := uint(f.hl.maxRead)
			// Optimization. Compiler isn't smart enough to keep f.b,f.nb in registers,
			// but is smart enough to keep local variables in registers, so use nb and b,
			// inline call to moreBits and reassign b,nb back to f on return.
			nb, b := f.nb, f.b
			for ***REMOVED***
				for nb < n ***REMOVED***
					c, err := fr.ReadByte()
					if err != nil ***REMOVED***
						f.b = b
						f.nb = nb
						f.err = noEOF(err)
						return
					***REMOVED***
					f.roffset++
					b |= uint32(c) << (nb & regSizeMaskUint32)
					nb += 8
				***REMOVED***
				chunk := f.hl.chunks[b&(huffmanNumChunks-1)]
				n = uint(chunk & huffmanCountMask)
				if n > huffmanChunkBits ***REMOVED***
					chunk = f.hl.links[chunk>>huffmanValueShift][(b>>huffmanChunkBits)&f.hl.linkMask]
					n = uint(chunk & huffmanCountMask)
				***REMOVED***
				if n <= nb ***REMOVED***
					if n == 0 ***REMOVED***
						f.b = b
						f.nb = nb
						if debugDecode ***REMOVED***
							fmt.Println("huffsym: n==0")
						***REMOVED***
						f.err = CorruptInputError(f.roffset)
						return
					***REMOVED***
					f.b = b >> (n & regSizeMaskUint32)
					f.nb = nb - n
					v = int(chunk >> huffmanValueShift)
					break
				***REMOVED***
			***REMOVED***
		***REMOVED***

		var length int
		switch ***REMOVED***
		case v < 256:
			f.dict.writeByte(byte(v))
			if f.dict.availWrite() == 0 ***REMOVED***
				f.toRead = f.dict.readFlush()
				f.step = (*decompressor).huffmanBytesBuffer
				f.stepState = stateInit
				return
			***REMOVED***
			goto readLiteral
		case v == 256:
			f.finishBlock()
			return
		// otherwise, reference to older data
		case v < 265:
			length = v - (257 - 3)
		case v < maxNumLit:
			val := decCodeToLen[(v - 257)]
			length = int(val.length) + 3
			n := uint(val.extra)
			for f.nb < n ***REMOVED***
				c, err := fr.ReadByte()
				if err != nil ***REMOVED***
					if debugDecode ***REMOVED***
						fmt.Println("morebits n>0:", err)
					***REMOVED***
					f.err = err
					return
				***REMOVED***
				f.roffset++
				f.b |= uint32(c) << f.nb
				f.nb += 8
			***REMOVED***
			length += int(f.b & uint32(1<<(n&regSizeMaskUint32)-1))
			f.b >>= n & regSizeMaskUint32
			f.nb -= n
		default:
			if debugDecode ***REMOVED***
				fmt.Println(v, ">= maxNumLit")
			***REMOVED***
			f.err = CorruptInputError(f.roffset)
			return
		***REMOVED***

		var dist uint32
		if f.hd == nil ***REMOVED***
			for f.nb < 5 ***REMOVED***
				c, err := fr.ReadByte()
				if err != nil ***REMOVED***
					if debugDecode ***REMOVED***
						fmt.Println("morebits f.nb<5:", err)
					***REMOVED***
					f.err = err
					return
				***REMOVED***
				f.roffset++
				f.b |= uint32(c) << f.nb
				f.nb += 8
			***REMOVED***
			dist = uint32(bits.Reverse8(uint8(f.b & 0x1F << 3)))
			f.b >>= 5
			f.nb -= 5
		***REMOVED*** else ***REMOVED***
			// Since a huffmanDecoder can be empty or be composed of a degenerate tree
			// with single element, huffSym must error on these two edge cases. In both
			// cases, the chunks slice will be 0 for the invalid sequence, leading it
			// satisfy the n == 0 check below.
			n := uint(f.hd.maxRead)
			// Optimization. Compiler isn't smart enough to keep f.b,f.nb in registers,
			// but is smart enough to keep local variables in registers, so use nb and b,
			// inline call to moreBits and reassign b,nb back to f on return.
			nb, b := f.nb, f.b
			for ***REMOVED***
				for nb < n ***REMOVED***
					c, err := fr.ReadByte()
					if err != nil ***REMOVED***
						f.b = b
						f.nb = nb
						f.err = noEOF(err)
						return
					***REMOVED***
					f.roffset++
					b |= uint32(c) << (nb & regSizeMaskUint32)
					nb += 8
				***REMOVED***
				chunk := f.hd.chunks[b&(huffmanNumChunks-1)]
				n = uint(chunk & huffmanCountMask)
				if n > huffmanChunkBits ***REMOVED***
					chunk = f.hd.links[chunk>>huffmanValueShift][(b>>huffmanChunkBits)&f.hd.linkMask]
					n = uint(chunk & huffmanCountMask)
				***REMOVED***
				if n <= nb ***REMOVED***
					if n == 0 ***REMOVED***
						f.b = b
						f.nb = nb
						if debugDecode ***REMOVED***
							fmt.Println("huffsym: n==0")
						***REMOVED***
						f.err = CorruptInputError(f.roffset)
						return
					***REMOVED***
					f.b = b >> (n & regSizeMaskUint32)
					f.nb = nb - n
					dist = uint32(chunk >> huffmanValueShift)
					break
				***REMOVED***
			***REMOVED***
		***REMOVED***

		switch ***REMOVED***
		case dist < 4:
			dist++
		case dist < maxNumDist:
			nb := uint(dist-2) >> 1
			// have 1 bit in bottom of dist, need nb more.
			extra := (dist & 1) << (nb & regSizeMaskUint32)
			for f.nb < nb ***REMOVED***
				c, err := fr.ReadByte()
				if err != nil ***REMOVED***
					if debugDecode ***REMOVED***
						fmt.Println("morebits f.nb<nb:", err)
					***REMOVED***
					f.err = err
					return
				***REMOVED***
				f.roffset++
				f.b |= uint32(c) << f.nb
				f.nb += 8
			***REMOVED***
			extra |= f.b & uint32(1<<(nb&regSizeMaskUint32)-1)
			f.b >>= nb & regSizeMaskUint32
			f.nb -= nb
			dist = 1<<((nb+1)&regSizeMaskUint32) + 1 + extra
		default:
			if debugDecode ***REMOVED***
				fmt.Println("dist too big:", dist, maxNumDist)
			***REMOVED***
			f.err = CorruptInputError(f.roffset)
			return
		***REMOVED***

		// No check on length; encoding can be prescient.
		if dist > uint32(f.dict.histSize()) ***REMOVED***
			if debugDecode ***REMOVED***
				fmt.Println("dist > f.dict.histSize():", dist, f.dict.histSize())
			***REMOVED***
			f.err = CorruptInputError(f.roffset)
			return
		***REMOVED***

		f.copyLen, f.copyDist = length, int(dist)
		goto copyHistory
	***REMOVED***

copyHistory:
	// Perform a backwards copy according to RFC section 3.2.3.
	***REMOVED***
		cnt := f.dict.tryWriteCopy(f.copyDist, f.copyLen)
		if cnt == 0 ***REMOVED***
			cnt = f.dict.writeCopy(f.copyDist, f.copyLen)
		***REMOVED***
		f.copyLen -= cnt

		if f.dict.availWrite() == 0 || f.copyLen > 0 ***REMOVED***
			f.toRead = f.dict.readFlush()
			f.step = (*decompressor).huffmanBytesBuffer // We need to continue this work
			f.stepState = stateDict
			return
		***REMOVED***
		goto readLiteral
	***REMOVED***
***REMOVED***

// Decode a single Huffman block from f.
// hl and hd are the Huffman states for the lit/length values
// and the distance values, respectively. If hd == nil, using the
// fixed distance encoding associated with fixed Huffman blocks.
func (f *decompressor) huffmanBytesReader() ***REMOVED***
	const (
		stateInit = iota // Zero value must be stateInit
		stateDict
	)
	fr := f.r.(*bytes.Reader)

	switch f.stepState ***REMOVED***
	case stateInit:
		goto readLiteral
	case stateDict:
		goto copyHistory
	***REMOVED***

readLiteral:
	// Read literal and/or (length, distance) according to RFC section 3.2.3.
	***REMOVED***
		var v int
		***REMOVED***
			// Inlined v, err := f.huffSym(f.hl)
			// Since a huffmanDecoder can be empty or be composed of a degenerate tree
			// with single element, huffSym must error on these two edge cases. In both
			// cases, the chunks slice will be 0 for the invalid sequence, leading it
			// satisfy the n == 0 check below.
			n := uint(f.hl.maxRead)
			// Optimization. Compiler isn't smart enough to keep f.b,f.nb in registers,
			// but is smart enough to keep local variables in registers, so use nb and b,
			// inline call to moreBits and reassign b,nb back to f on return.
			nb, b := f.nb, f.b
			for ***REMOVED***
				for nb < n ***REMOVED***
					c, err := fr.ReadByte()
					if err != nil ***REMOVED***
						f.b = b
						f.nb = nb
						f.err = noEOF(err)
						return
					***REMOVED***
					f.roffset++
					b |= uint32(c) << (nb & regSizeMaskUint32)
					nb += 8
				***REMOVED***
				chunk := f.hl.chunks[b&(huffmanNumChunks-1)]
				n = uint(chunk & huffmanCountMask)
				if n > huffmanChunkBits ***REMOVED***
					chunk = f.hl.links[chunk>>huffmanValueShift][(b>>huffmanChunkBits)&f.hl.linkMask]
					n = uint(chunk & huffmanCountMask)
				***REMOVED***
				if n <= nb ***REMOVED***
					if n == 0 ***REMOVED***
						f.b = b
						f.nb = nb
						if debugDecode ***REMOVED***
							fmt.Println("huffsym: n==0")
						***REMOVED***
						f.err = CorruptInputError(f.roffset)
						return
					***REMOVED***
					f.b = b >> (n & regSizeMaskUint32)
					f.nb = nb - n
					v = int(chunk >> huffmanValueShift)
					break
				***REMOVED***
			***REMOVED***
		***REMOVED***

		var length int
		switch ***REMOVED***
		case v < 256:
			f.dict.writeByte(byte(v))
			if f.dict.availWrite() == 0 ***REMOVED***
				f.toRead = f.dict.readFlush()
				f.step = (*decompressor).huffmanBytesReader
				f.stepState = stateInit
				return
			***REMOVED***
			goto readLiteral
		case v == 256:
			f.finishBlock()
			return
		// otherwise, reference to older data
		case v < 265:
			length = v - (257 - 3)
		case v < maxNumLit:
			val := decCodeToLen[(v - 257)]
			length = int(val.length) + 3
			n := uint(val.extra)
			for f.nb < n ***REMOVED***
				c, err := fr.ReadByte()
				if err != nil ***REMOVED***
					if debugDecode ***REMOVED***
						fmt.Println("morebits n>0:", err)
					***REMOVED***
					f.err = err
					return
				***REMOVED***
				f.roffset++
				f.b |= uint32(c) << f.nb
				f.nb += 8
			***REMOVED***
			length += int(f.b & uint32(1<<(n&regSizeMaskUint32)-1))
			f.b >>= n & regSizeMaskUint32
			f.nb -= n
		default:
			if debugDecode ***REMOVED***
				fmt.Println(v, ">= maxNumLit")
			***REMOVED***
			f.err = CorruptInputError(f.roffset)
			return
		***REMOVED***

		var dist uint32
		if f.hd == nil ***REMOVED***
			for f.nb < 5 ***REMOVED***
				c, err := fr.ReadByte()
				if err != nil ***REMOVED***
					if debugDecode ***REMOVED***
						fmt.Println("morebits f.nb<5:", err)
					***REMOVED***
					f.err = err
					return
				***REMOVED***
				f.roffset++
				f.b |= uint32(c) << f.nb
				f.nb += 8
			***REMOVED***
			dist = uint32(bits.Reverse8(uint8(f.b & 0x1F << 3)))
			f.b >>= 5
			f.nb -= 5
		***REMOVED*** else ***REMOVED***
			// Since a huffmanDecoder can be empty or be composed of a degenerate tree
			// with single element, huffSym must error on these two edge cases. In both
			// cases, the chunks slice will be 0 for the invalid sequence, leading it
			// satisfy the n == 0 check below.
			n := uint(f.hd.maxRead)
			// Optimization. Compiler isn't smart enough to keep f.b,f.nb in registers,
			// but is smart enough to keep local variables in registers, so use nb and b,
			// inline call to moreBits and reassign b,nb back to f on return.
			nb, b := f.nb, f.b
			for ***REMOVED***
				for nb < n ***REMOVED***
					c, err := fr.ReadByte()
					if err != nil ***REMOVED***
						f.b = b
						f.nb = nb
						f.err = noEOF(err)
						return
					***REMOVED***
					f.roffset++
					b |= uint32(c) << (nb & regSizeMaskUint32)
					nb += 8
				***REMOVED***
				chunk := f.hd.chunks[b&(huffmanNumChunks-1)]
				n = uint(chunk & huffmanCountMask)
				if n > huffmanChunkBits ***REMOVED***
					chunk = f.hd.links[chunk>>huffmanValueShift][(b>>huffmanChunkBits)&f.hd.linkMask]
					n = uint(chunk & huffmanCountMask)
				***REMOVED***
				if n <= nb ***REMOVED***
					if n == 0 ***REMOVED***
						f.b = b
						f.nb = nb
						if debugDecode ***REMOVED***
							fmt.Println("huffsym: n==0")
						***REMOVED***
						f.err = CorruptInputError(f.roffset)
						return
					***REMOVED***
					f.b = b >> (n & regSizeMaskUint32)
					f.nb = nb - n
					dist = uint32(chunk >> huffmanValueShift)
					break
				***REMOVED***
			***REMOVED***
		***REMOVED***

		switch ***REMOVED***
		case dist < 4:
			dist++
		case dist < maxNumDist:
			nb := uint(dist-2) >> 1
			// have 1 bit in bottom of dist, need nb more.
			extra := (dist & 1) << (nb & regSizeMaskUint32)
			for f.nb < nb ***REMOVED***
				c, err := fr.ReadByte()
				if err != nil ***REMOVED***
					if debugDecode ***REMOVED***
						fmt.Println("morebits f.nb<nb:", err)
					***REMOVED***
					f.err = err
					return
				***REMOVED***
				f.roffset++
				f.b |= uint32(c) << f.nb
				f.nb += 8
			***REMOVED***
			extra |= f.b & uint32(1<<(nb&regSizeMaskUint32)-1)
			f.b >>= nb & regSizeMaskUint32
			f.nb -= nb
			dist = 1<<((nb+1)&regSizeMaskUint32) + 1 + extra
		default:
			if debugDecode ***REMOVED***
				fmt.Println("dist too big:", dist, maxNumDist)
			***REMOVED***
			f.err = CorruptInputError(f.roffset)
			return
		***REMOVED***

		// No check on length; encoding can be prescient.
		if dist > uint32(f.dict.histSize()) ***REMOVED***
			if debugDecode ***REMOVED***
				fmt.Println("dist > f.dict.histSize():", dist, f.dict.histSize())
			***REMOVED***
			f.err = CorruptInputError(f.roffset)
			return
		***REMOVED***

		f.copyLen, f.copyDist = length, int(dist)
		goto copyHistory
	***REMOVED***

copyHistory:
	// Perform a backwards copy according to RFC section 3.2.3.
	***REMOVED***
		cnt := f.dict.tryWriteCopy(f.copyDist, f.copyLen)
		if cnt == 0 ***REMOVED***
			cnt = f.dict.writeCopy(f.copyDist, f.copyLen)
		***REMOVED***
		f.copyLen -= cnt

		if f.dict.availWrite() == 0 || f.copyLen > 0 ***REMOVED***
			f.toRead = f.dict.readFlush()
			f.step = (*decompressor).huffmanBytesReader // We need to continue this work
			f.stepState = stateDict
			return
		***REMOVED***
		goto readLiteral
	***REMOVED***
***REMOVED***

// Decode a single Huffman block from f.
// hl and hd are the Huffman states for the lit/length values
// and the distance values, respectively. If hd == nil, using the
// fixed distance encoding associated with fixed Huffman blocks.
func (f *decompressor) huffmanBufioReader() ***REMOVED***
	const (
		stateInit = iota // Zero value must be stateInit
		stateDict
	)
	fr := f.r.(*bufio.Reader)

	switch f.stepState ***REMOVED***
	case stateInit:
		goto readLiteral
	case stateDict:
		goto copyHistory
	***REMOVED***

readLiteral:
	// Read literal and/or (length, distance) according to RFC section 3.2.3.
	***REMOVED***
		var v int
		***REMOVED***
			// Inlined v, err := f.huffSym(f.hl)
			// Since a huffmanDecoder can be empty or be composed of a degenerate tree
			// with single element, huffSym must error on these two edge cases. In both
			// cases, the chunks slice will be 0 for the invalid sequence, leading it
			// satisfy the n == 0 check below.
			n := uint(f.hl.maxRead)
			// Optimization. Compiler isn't smart enough to keep f.b,f.nb in registers,
			// but is smart enough to keep local variables in registers, so use nb and b,
			// inline call to moreBits and reassign b,nb back to f on return.
			nb, b := f.nb, f.b
			for ***REMOVED***
				for nb < n ***REMOVED***
					c, err := fr.ReadByte()
					if err != nil ***REMOVED***
						f.b = b
						f.nb = nb
						f.err = noEOF(err)
						return
					***REMOVED***
					f.roffset++
					b |= uint32(c) << (nb & regSizeMaskUint32)
					nb += 8
				***REMOVED***
				chunk := f.hl.chunks[b&(huffmanNumChunks-1)]
				n = uint(chunk & huffmanCountMask)
				if n > huffmanChunkBits ***REMOVED***
					chunk = f.hl.links[chunk>>huffmanValueShift][(b>>huffmanChunkBits)&f.hl.linkMask]
					n = uint(chunk & huffmanCountMask)
				***REMOVED***
				if n <= nb ***REMOVED***
					if n == 0 ***REMOVED***
						f.b = b
						f.nb = nb
						if debugDecode ***REMOVED***
							fmt.Println("huffsym: n==0")
						***REMOVED***
						f.err = CorruptInputError(f.roffset)
						return
					***REMOVED***
					f.b = b >> (n & regSizeMaskUint32)
					f.nb = nb - n
					v = int(chunk >> huffmanValueShift)
					break
				***REMOVED***
			***REMOVED***
		***REMOVED***

		var length int
		switch ***REMOVED***
		case v < 256:
			f.dict.writeByte(byte(v))
			if f.dict.availWrite() == 0 ***REMOVED***
				f.toRead = f.dict.readFlush()
				f.step = (*decompressor).huffmanBufioReader
				f.stepState = stateInit
				return
			***REMOVED***
			goto readLiteral
		case v == 256:
			f.finishBlock()
			return
		// otherwise, reference to older data
		case v < 265:
			length = v - (257 - 3)
		case v < maxNumLit:
			val := decCodeToLen[(v - 257)]
			length = int(val.length) + 3
			n := uint(val.extra)
			for f.nb < n ***REMOVED***
				c, err := fr.ReadByte()
				if err != nil ***REMOVED***
					if debugDecode ***REMOVED***
						fmt.Println("morebits n>0:", err)
					***REMOVED***
					f.err = err
					return
				***REMOVED***
				f.roffset++
				f.b |= uint32(c) << f.nb
				f.nb += 8
			***REMOVED***
			length += int(f.b & uint32(1<<(n&regSizeMaskUint32)-1))
			f.b >>= n & regSizeMaskUint32
			f.nb -= n
		default:
			if debugDecode ***REMOVED***
				fmt.Println(v, ">= maxNumLit")
			***REMOVED***
			f.err = CorruptInputError(f.roffset)
			return
		***REMOVED***

		var dist uint32
		if f.hd == nil ***REMOVED***
			for f.nb < 5 ***REMOVED***
				c, err := fr.ReadByte()
				if err != nil ***REMOVED***
					if debugDecode ***REMOVED***
						fmt.Println("morebits f.nb<5:", err)
					***REMOVED***
					f.err = err
					return
				***REMOVED***
				f.roffset++
				f.b |= uint32(c) << f.nb
				f.nb += 8
			***REMOVED***
			dist = uint32(bits.Reverse8(uint8(f.b & 0x1F << 3)))
			f.b >>= 5
			f.nb -= 5
		***REMOVED*** else ***REMOVED***
			// Since a huffmanDecoder can be empty or be composed of a degenerate tree
			// with single element, huffSym must error on these two edge cases. In both
			// cases, the chunks slice will be 0 for the invalid sequence, leading it
			// satisfy the n == 0 check below.
			n := uint(f.hd.maxRead)
			// Optimization. Compiler isn't smart enough to keep f.b,f.nb in registers,
			// but is smart enough to keep local variables in registers, so use nb and b,
			// inline call to moreBits and reassign b,nb back to f on return.
			nb, b := f.nb, f.b
			for ***REMOVED***
				for nb < n ***REMOVED***
					c, err := fr.ReadByte()
					if err != nil ***REMOVED***
						f.b = b
						f.nb = nb
						f.err = noEOF(err)
						return
					***REMOVED***
					f.roffset++
					b |= uint32(c) << (nb & regSizeMaskUint32)
					nb += 8
				***REMOVED***
				chunk := f.hd.chunks[b&(huffmanNumChunks-1)]
				n = uint(chunk & huffmanCountMask)
				if n > huffmanChunkBits ***REMOVED***
					chunk = f.hd.links[chunk>>huffmanValueShift][(b>>huffmanChunkBits)&f.hd.linkMask]
					n = uint(chunk & huffmanCountMask)
				***REMOVED***
				if n <= nb ***REMOVED***
					if n == 0 ***REMOVED***
						f.b = b
						f.nb = nb
						if debugDecode ***REMOVED***
							fmt.Println("huffsym: n==0")
						***REMOVED***
						f.err = CorruptInputError(f.roffset)
						return
					***REMOVED***
					f.b = b >> (n & regSizeMaskUint32)
					f.nb = nb - n
					dist = uint32(chunk >> huffmanValueShift)
					break
				***REMOVED***
			***REMOVED***
		***REMOVED***

		switch ***REMOVED***
		case dist < 4:
			dist++
		case dist < maxNumDist:
			nb := uint(dist-2) >> 1
			// have 1 bit in bottom of dist, need nb more.
			extra := (dist & 1) << (nb & regSizeMaskUint32)
			for f.nb < nb ***REMOVED***
				c, err := fr.ReadByte()
				if err != nil ***REMOVED***
					if debugDecode ***REMOVED***
						fmt.Println("morebits f.nb<nb:", err)
					***REMOVED***
					f.err = err
					return
				***REMOVED***
				f.roffset++
				f.b |= uint32(c) << f.nb
				f.nb += 8
			***REMOVED***
			extra |= f.b & uint32(1<<(nb&regSizeMaskUint32)-1)
			f.b >>= nb & regSizeMaskUint32
			f.nb -= nb
			dist = 1<<((nb+1)&regSizeMaskUint32) + 1 + extra
		default:
			if debugDecode ***REMOVED***
				fmt.Println("dist too big:", dist, maxNumDist)
			***REMOVED***
			f.err = CorruptInputError(f.roffset)
			return
		***REMOVED***

		// No check on length; encoding can be prescient.
		if dist > uint32(f.dict.histSize()) ***REMOVED***
			if debugDecode ***REMOVED***
				fmt.Println("dist > f.dict.histSize():", dist, f.dict.histSize())
			***REMOVED***
			f.err = CorruptInputError(f.roffset)
			return
		***REMOVED***

		f.copyLen, f.copyDist = length, int(dist)
		goto copyHistory
	***REMOVED***

copyHistory:
	// Perform a backwards copy according to RFC section 3.2.3.
	***REMOVED***
		cnt := f.dict.tryWriteCopy(f.copyDist, f.copyLen)
		if cnt == 0 ***REMOVED***
			cnt = f.dict.writeCopy(f.copyDist, f.copyLen)
		***REMOVED***
		f.copyLen -= cnt

		if f.dict.availWrite() == 0 || f.copyLen > 0 ***REMOVED***
			f.toRead = f.dict.readFlush()
			f.step = (*decompressor).huffmanBufioReader // We need to continue this work
			f.stepState = stateDict
			return
		***REMOVED***
		goto readLiteral
	***REMOVED***
***REMOVED***

// Decode a single Huffman block from f.
// hl and hd are the Huffman states for the lit/length values
// and the distance values, respectively. If hd == nil, using the
// fixed distance encoding associated with fixed Huffman blocks.
func (f *decompressor) huffmanStringsReader() ***REMOVED***
	const (
		stateInit = iota // Zero value must be stateInit
		stateDict
	)
	fr := f.r.(*strings.Reader)

	switch f.stepState ***REMOVED***
	case stateInit:
		goto readLiteral
	case stateDict:
		goto copyHistory
	***REMOVED***

readLiteral:
	// Read literal and/or (length, distance) according to RFC section 3.2.3.
	***REMOVED***
		var v int
		***REMOVED***
			// Inlined v, err := f.huffSym(f.hl)
			// Since a huffmanDecoder can be empty or be composed of a degenerate tree
			// with single element, huffSym must error on these two edge cases. In both
			// cases, the chunks slice will be 0 for the invalid sequence, leading it
			// satisfy the n == 0 check below.
			n := uint(f.hl.maxRead)
			// Optimization. Compiler isn't smart enough to keep f.b,f.nb in registers,
			// but is smart enough to keep local variables in registers, so use nb and b,
			// inline call to moreBits and reassign b,nb back to f on return.
			nb, b := f.nb, f.b
			for ***REMOVED***
				for nb < n ***REMOVED***
					c, err := fr.ReadByte()
					if err != nil ***REMOVED***
						f.b = b
						f.nb = nb
						f.err = noEOF(err)
						return
					***REMOVED***
					f.roffset++
					b |= uint32(c) << (nb & regSizeMaskUint32)
					nb += 8
				***REMOVED***
				chunk := f.hl.chunks[b&(huffmanNumChunks-1)]
				n = uint(chunk & huffmanCountMask)
				if n > huffmanChunkBits ***REMOVED***
					chunk = f.hl.links[chunk>>huffmanValueShift][(b>>huffmanChunkBits)&f.hl.linkMask]
					n = uint(chunk & huffmanCountMask)
				***REMOVED***
				if n <= nb ***REMOVED***
					if n == 0 ***REMOVED***
						f.b = b
						f.nb = nb
						if debugDecode ***REMOVED***
							fmt.Println("huffsym: n==0")
						***REMOVED***
						f.err = CorruptInputError(f.roffset)
						return
					***REMOVED***
					f.b = b >> (n & regSizeMaskUint32)
					f.nb = nb - n
					v = int(chunk >> huffmanValueShift)
					break
				***REMOVED***
			***REMOVED***
		***REMOVED***

		var length int
		switch ***REMOVED***
		case v < 256:
			f.dict.writeByte(byte(v))
			if f.dict.availWrite() == 0 ***REMOVED***
				f.toRead = f.dict.readFlush()
				f.step = (*decompressor).huffmanStringsReader
				f.stepState = stateInit
				return
			***REMOVED***
			goto readLiteral
		case v == 256:
			f.finishBlock()
			return
		// otherwise, reference to older data
		case v < 265:
			length = v - (257 - 3)
		case v < maxNumLit:
			val := decCodeToLen[(v - 257)]
			length = int(val.length) + 3
			n := uint(val.extra)
			for f.nb < n ***REMOVED***
				c, err := fr.ReadByte()
				if err != nil ***REMOVED***
					if debugDecode ***REMOVED***
						fmt.Println("morebits n>0:", err)
					***REMOVED***
					f.err = err
					return
				***REMOVED***
				f.roffset++
				f.b |= uint32(c) << f.nb
				f.nb += 8
			***REMOVED***
			length += int(f.b & uint32(1<<(n&regSizeMaskUint32)-1))
			f.b >>= n & regSizeMaskUint32
			f.nb -= n
		default:
			if debugDecode ***REMOVED***
				fmt.Println(v, ">= maxNumLit")
			***REMOVED***
			f.err = CorruptInputError(f.roffset)
			return
		***REMOVED***

		var dist uint32
		if f.hd == nil ***REMOVED***
			for f.nb < 5 ***REMOVED***
				c, err := fr.ReadByte()
				if err != nil ***REMOVED***
					if debugDecode ***REMOVED***
						fmt.Println("morebits f.nb<5:", err)
					***REMOVED***
					f.err = err
					return
				***REMOVED***
				f.roffset++
				f.b |= uint32(c) << f.nb
				f.nb += 8
			***REMOVED***
			dist = uint32(bits.Reverse8(uint8(f.b & 0x1F << 3)))
			f.b >>= 5
			f.nb -= 5
		***REMOVED*** else ***REMOVED***
			// Since a huffmanDecoder can be empty or be composed of a degenerate tree
			// with single element, huffSym must error on these two edge cases. In both
			// cases, the chunks slice will be 0 for the invalid sequence, leading it
			// satisfy the n == 0 check below.
			n := uint(f.hd.maxRead)
			// Optimization. Compiler isn't smart enough to keep f.b,f.nb in registers,
			// but is smart enough to keep local variables in registers, so use nb and b,
			// inline call to moreBits and reassign b,nb back to f on return.
			nb, b := f.nb, f.b
			for ***REMOVED***
				for nb < n ***REMOVED***
					c, err := fr.ReadByte()
					if err != nil ***REMOVED***
						f.b = b
						f.nb = nb
						f.err = noEOF(err)
						return
					***REMOVED***
					f.roffset++
					b |= uint32(c) << (nb & regSizeMaskUint32)
					nb += 8
				***REMOVED***
				chunk := f.hd.chunks[b&(huffmanNumChunks-1)]
				n = uint(chunk & huffmanCountMask)
				if n > huffmanChunkBits ***REMOVED***
					chunk = f.hd.links[chunk>>huffmanValueShift][(b>>huffmanChunkBits)&f.hd.linkMask]
					n = uint(chunk & huffmanCountMask)
				***REMOVED***
				if n <= nb ***REMOVED***
					if n == 0 ***REMOVED***
						f.b = b
						f.nb = nb
						if debugDecode ***REMOVED***
							fmt.Println("huffsym: n==0")
						***REMOVED***
						f.err = CorruptInputError(f.roffset)
						return
					***REMOVED***
					f.b = b >> (n & regSizeMaskUint32)
					f.nb = nb - n
					dist = uint32(chunk >> huffmanValueShift)
					break
				***REMOVED***
			***REMOVED***
		***REMOVED***

		switch ***REMOVED***
		case dist < 4:
			dist++
		case dist < maxNumDist:
			nb := uint(dist-2) >> 1
			// have 1 bit in bottom of dist, need nb more.
			extra := (dist & 1) << (nb & regSizeMaskUint32)
			for f.nb < nb ***REMOVED***
				c, err := fr.ReadByte()
				if err != nil ***REMOVED***
					if debugDecode ***REMOVED***
						fmt.Println("morebits f.nb<nb:", err)
					***REMOVED***
					f.err = err
					return
				***REMOVED***
				f.roffset++
				f.b |= uint32(c) << f.nb
				f.nb += 8
			***REMOVED***
			extra |= f.b & uint32(1<<(nb&regSizeMaskUint32)-1)
			f.b >>= nb & regSizeMaskUint32
			f.nb -= nb
			dist = 1<<((nb+1)&regSizeMaskUint32) + 1 + extra
		default:
			if debugDecode ***REMOVED***
				fmt.Println("dist too big:", dist, maxNumDist)
			***REMOVED***
			f.err = CorruptInputError(f.roffset)
			return
		***REMOVED***

		// No check on length; encoding can be prescient.
		if dist > uint32(f.dict.histSize()) ***REMOVED***
			if debugDecode ***REMOVED***
				fmt.Println("dist > f.dict.histSize():", dist, f.dict.histSize())
			***REMOVED***
			f.err = CorruptInputError(f.roffset)
			return
		***REMOVED***

		f.copyLen, f.copyDist = length, int(dist)
		goto copyHistory
	***REMOVED***

copyHistory:
	// Perform a backwards copy according to RFC section 3.2.3.
	***REMOVED***
		cnt := f.dict.tryWriteCopy(f.copyDist, f.copyLen)
		if cnt == 0 ***REMOVED***
			cnt = f.dict.writeCopy(f.copyDist, f.copyLen)
		***REMOVED***
		f.copyLen -= cnt

		if f.dict.availWrite() == 0 || f.copyLen > 0 ***REMOVED***
			f.toRead = f.dict.readFlush()
			f.step = (*decompressor).huffmanStringsReader // We need to continue this work
			f.stepState = stateDict
			return
		***REMOVED***
		goto readLiteral
	***REMOVED***
***REMOVED***

func (f *decompressor) huffmanBlockDecoder() func() ***REMOVED***
	switch f.r.(type) ***REMOVED***
	case *bytes.Buffer:
		return f.huffmanBytesBuffer
	case *bytes.Reader:
		return f.huffmanBytesReader
	case *bufio.Reader:
		return f.huffmanBufioReader
	case *strings.Reader:
		return f.huffmanStringsReader
	default:
		return f.huffmanBlockGeneric
	***REMOVED***
***REMOVED***
