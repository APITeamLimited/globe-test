// Copyright (c) 2012-2015 Ugorji Nwoke. All rights reserved.
// Use of this source code is governed by a MIT license found in the LICENSE file.

// Code generated from mammoth-test.go.tmpl - DO NOT EDIT.

package codec

import "testing"
import "fmt"
import "reflect"

// TestMammoth has all the different paths optimized in fast-path
// It has all the primitives, slices and maps.
// 
// For each of those types, it has a pointer and a non-pointer field.

func init() ***REMOVED*** _ = fmt.Printf ***REMOVED*** // so we can include fmt as needed

type TestMammoth struct ***REMOVED***

***REMOVED******REMOVED***range .Values ***REMOVED******REMOVED******REMOVED******REMOVED***if .Primitive ***REMOVED******REMOVED******REMOVED******REMOVED***/*
*/***REMOVED******REMOVED******REMOVED******REMOVED*** .MethodNamePfx "F" true ***REMOVED******REMOVED*** ***REMOVED******REMOVED*** .Primitive ***REMOVED******REMOVED***
***REMOVED******REMOVED*** .MethodNamePfx "Fptr" true ***REMOVED******REMOVED*** ****REMOVED******REMOVED*** .Primitive ***REMOVED******REMOVED***
***REMOVED******REMOVED***end***REMOVED******REMOVED******REMOVED******REMOVED***end***REMOVED******REMOVED***

***REMOVED******REMOVED***range .Values ***REMOVED******REMOVED******REMOVED******REMOVED***if not .Primitive ***REMOVED******REMOVED******REMOVED******REMOVED***if not .MapKey ***REMOVED******REMOVED******REMOVED******REMOVED***/*
*/***REMOVED******REMOVED******REMOVED******REMOVED*** .MethodNamePfx "F" false ***REMOVED******REMOVED*** []***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED***
***REMOVED******REMOVED*** .MethodNamePfx "Fptr" false ***REMOVED******REMOVED*** *[]***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED***
***REMOVED******REMOVED***end***REMOVED******REMOVED******REMOVED******REMOVED***end***REMOVED******REMOVED******REMOVED******REMOVED***end***REMOVED******REMOVED***

***REMOVED******REMOVED***range .Values ***REMOVED******REMOVED******REMOVED******REMOVED***if not .Primitive ***REMOVED******REMOVED******REMOVED******REMOVED***if .MapKey ***REMOVED******REMOVED******REMOVED******REMOVED***/*
*/***REMOVED******REMOVED******REMOVED******REMOVED*** .MethodNamePfx "F" false ***REMOVED******REMOVED*** map[***REMOVED******REMOVED*** .MapKey ***REMOVED******REMOVED***]***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED***
***REMOVED******REMOVED*** .MethodNamePfx "Fptr" false ***REMOVED******REMOVED*** *map[***REMOVED******REMOVED*** .MapKey ***REMOVED******REMOVED***]***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED***
***REMOVED******REMOVED***end***REMOVED******REMOVED******REMOVED******REMOVED***end***REMOVED******REMOVED******REMOVED******REMOVED***end***REMOVED******REMOVED***

***REMOVED***

***REMOVED******REMOVED***range .Values ***REMOVED******REMOVED******REMOVED******REMOVED***if not .Primitive ***REMOVED******REMOVED******REMOVED******REMOVED***if not .MapKey ***REMOVED******REMOVED******REMOVED******REMOVED***/*
*/***REMOVED******REMOVED*** type ***REMOVED******REMOVED*** .MethodNamePfx "typMbs" false ***REMOVED******REMOVED*** []***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED***
func (_ ***REMOVED******REMOVED*** .MethodNamePfx "typMbs" false ***REMOVED******REMOVED***) MapBySlice() ***REMOVED*** ***REMOVED***
***REMOVED******REMOVED***end***REMOVED******REMOVED******REMOVED******REMOVED***end***REMOVED******REMOVED******REMOVED******REMOVED***end***REMOVED******REMOVED***

***REMOVED******REMOVED***range .Values ***REMOVED******REMOVED******REMOVED******REMOVED***if not .Primitive ***REMOVED******REMOVED******REMOVED******REMOVED***if .MapKey ***REMOVED******REMOVED******REMOVED******REMOVED***/*
*/***REMOVED******REMOVED*** type ***REMOVED******REMOVED*** .MethodNamePfx "typMap" false ***REMOVED******REMOVED*** map[***REMOVED******REMOVED*** .MapKey ***REMOVED******REMOVED***]***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED***
***REMOVED******REMOVED***end***REMOVED******REMOVED******REMOVED******REMOVED***end***REMOVED******REMOVED******REMOVED******REMOVED***end***REMOVED******REMOVED***

func doTestMammothSlices(t *testing.T, h Handle) ***REMOVED***
***REMOVED******REMOVED***range $i, $e := .Values ***REMOVED******REMOVED******REMOVED******REMOVED***if not .Primitive ***REMOVED******REMOVED******REMOVED******REMOVED***if not .MapKey ***REMOVED******REMOVED******REMOVED******REMOVED***/*
*/***REMOVED******REMOVED***
    var v***REMOVED******REMOVED***$i***REMOVED******REMOVED***va [8]***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED***
    for _, v := range [][]***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED******REMOVED*** nil, ***REMOVED******REMOVED***, ***REMOVED*** ***REMOVED******REMOVED*** nonzerocmd .Elem ***REMOVED******REMOVED***, ***REMOVED******REMOVED*** zerocmd .Elem ***REMOVED******REMOVED***, ***REMOVED******REMOVED*** zerocmd .Elem ***REMOVED******REMOVED***, ***REMOVED******REMOVED*** nonzerocmd .Elem ***REMOVED******REMOVED*** ***REMOVED*** ***REMOVED*** ***REMOVED*** ***REMOVED******REMOVED***/*
    // fmt.Printf(">>>> running mammoth slice v***REMOVED******REMOVED***$i***REMOVED******REMOVED***: %v\n", v)
    //   - encode value to some []byte
    //   - decode into a length-wise-equal []byte
    //   - check if equal to initial slice
    //   - encode ptr to the value
    //   - check if encode bytes are same
    //   - decode into ptrs to: nil, then 1-elem slice, equal-length, then large len slice
    //   - decode into non-addressable slice of equal length, then larger len 
    //   - for each decode, compare elem-by-elem to the original slice
    //   - 
    //   - rinse and repeat for a MapBySlice version
    //   - 
    */***REMOVED******REMOVED***
    var v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1, v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 []***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED***
	v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1 = v
	bs***REMOVED******REMOVED***$i***REMOVED******REMOVED*** := testMarshalErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1, h, t, "enc-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***")
	if v == nil ***REMOVED*** v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 = nil ***REMOVED*** else ***REMOVED*** v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 = make([]***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED***, len(v)) ***REMOVED***
	testUnmarshalErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2, bs***REMOVED******REMOVED***$i***REMOVED******REMOVED***, h, t, "dec-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***")
	testDeepEqualErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1, v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2, t, "equal-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***")
	if v == nil ***REMOVED*** v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 = nil ***REMOVED*** else ***REMOVED*** v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 = make([]***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED***, len(v)) ***REMOVED***
	testUnmarshalErr(reflect.ValueOf(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2), bs***REMOVED******REMOVED***$i***REMOVED******REMOVED***, h, t, "dec-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-noaddr") // non-addressable value
	testDeepEqualErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1, v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2, t, "equal-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-noaddr")
	// ...
	bs***REMOVED******REMOVED***$i***REMOVED******REMOVED*** = testMarshalErr(&v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1, h, t, "enc-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-p")
	v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 = nil
	testUnmarshalErr(&v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2, bs***REMOVED******REMOVED***$i***REMOVED******REMOVED***, h, t, "dec-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-p")
	testDeepEqualErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1, v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2, t, "equal-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-p")
	v***REMOVED******REMOVED***$i***REMOVED******REMOVED***va = [8]***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED******REMOVED******REMOVED*** // clear the array
	v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 = v***REMOVED******REMOVED***$i***REMOVED******REMOVED***va[:1:1]
	testUnmarshalErr(&v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2, bs***REMOVED******REMOVED***$i***REMOVED******REMOVED***, h, t, "dec-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-p-1")
	testDeepEqualErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1, v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2, t, "equal-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-p-1")
	v***REMOVED******REMOVED***$i***REMOVED******REMOVED***va = [8]***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED******REMOVED******REMOVED*** // clear the array
	v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 = v***REMOVED******REMOVED***$i***REMOVED******REMOVED***va[:len(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1):len(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1)]
	testUnmarshalErr(&v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2, bs***REMOVED******REMOVED***$i***REMOVED******REMOVED***, h, t, "dec-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-p-len")
	testDeepEqualErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1, v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2, t, "equal-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-p-len")
	v***REMOVED******REMOVED***$i***REMOVED******REMOVED***va = [8]***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED******REMOVED******REMOVED*** // clear the array
	v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 = v***REMOVED******REMOVED***$i***REMOVED******REMOVED***va[:]
	testUnmarshalErr(&v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2, bs***REMOVED******REMOVED***$i***REMOVED******REMOVED***, h, t, "dec-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-p-cap")
	testDeepEqualErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1, v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2, t, "equal-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-p-cap")
	if len(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1) > 1 ***REMOVED***
	v***REMOVED******REMOVED***$i***REMOVED******REMOVED***va = [8]***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED******REMOVED******REMOVED*** // clear the array
	testUnmarshalErr((&v***REMOVED******REMOVED***$i***REMOVED******REMOVED***va)[:len(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1)], bs***REMOVED******REMOVED***$i***REMOVED******REMOVED***, h, t, "dec-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-p-len-noaddr")
	testDeepEqualErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1, v***REMOVED******REMOVED***$i***REMOVED******REMOVED***va[:len(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1)], t, "equal-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-p-len-noaddr")
	v***REMOVED******REMOVED***$i***REMOVED******REMOVED***va = [8]***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED******REMOVED******REMOVED*** // clear the array
	testUnmarshalErr((&v***REMOVED******REMOVED***$i***REMOVED******REMOVED***va)[:], bs***REMOVED******REMOVED***$i***REMOVED******REMOVED***, h, t, "dec-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-p-cap-noaddr")
	testDeepEqualErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1, v***REMOVED******REMOVED***$i***REMOVED******REMOVED***va[:len(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1)], t, "equal-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-p-cap-noaddr")
    ***REMOVED***
    // ...
    var v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v3, v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v4 ***REMOVED******REMOVED*** .MethodNamePfx "typMbs" false ***REMOVED******REMOVED***
	v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 = nil
    if v != nil ***REMOVED*** v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 = make([]***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED***, len(v)) ***REMOVED***
    v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v3 = ***REMOVED******REMOVED*** .MethodNamePfx "typMbs" false ***REMOVED******REMOVED***(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1)
    v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v4 = ***REMOVED******REMOVED*** .MethodNamePfx "typMbs" false ***REMOVED******REMOVED***(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2)
    bs***REMOVED******REMOVED***$i***REMOVED******REMOVED*** = testMarshalErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v3, h, t, "enc-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-custom")
    testUnmarshalErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v4, bs***REMOVED******REMOVED***$i***REMOVED******REMOVED***, h, t, "dec-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-custom")
    testDeepEqualErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v3, v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v4, t, "equal-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-custom")
    bs***REMOVED******REMOVED***$i***REMOVED******REMOVED*** = testMarshalErr(&v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v3, h, t, "enc-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-custom-p")
    v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 = nil
    v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v4 = ***REMOVED******REMOVED*** .MethodNamePfx "typMbs" false ***REMOVED******REMOVED***(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2)
    testUnmarshalErr(&v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v4, bs***REMOVED******REMOVED***$i***REMOVED******REMOVED***, h, t, "dec-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-custom-p")
    testDeepEqualErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v3, v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v4, t, "equal-slice-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-custom-p")
    ***REMOVED***
***REMOVED******REMOVED***end***REMOVED******REMOVED******REMOVED******REMOVED***end***REMOVED******REMOVED******REMOVED******REMOVED***end***REMOVED******REMOVED***
***REMOVED***

func doTestMammothMaps(t *testing.T, h Handle) ***REMOVED***
***REMOVED******REMOVED***range $i, $e := .Values ***REMOVED******REMOVED******REMOVED******REMOVED***if not .Primitive ***REMOVED******REMOVED******REMOVED******REMOVED***if .MapKey ***REMOVED******REMOVED******REMOVED******REMOVED***/*
*/***REMOVED******REMOVED***
    for _, v := range []map[***REMOVED******REMOVED*** .MapKey ***REMOVED******REMOVED***]***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED******REMOVED*** nil, ***REMOVED******REMOVED***, ***REMOVED*** ***REMOVED******REMOVED*** nonzerocmd .MapKey ***REMOVED******REMOVED***:***REMOVED******REMOVED*** zerocmd .Elem ***REMOVED******REMOVED*** ***REMOVED******REMOVED***if ne "bool" .MapKey***REMOVED******REMOVED***, ***REMOVED******REMOVED*** nonzerocmd .MapKey ***REMOVED******REMOVED***:***REMOVED******REMOVED*** nonzerocmd .Elem ***REMOVED******REMOVED*** ***REMOVED******REMOVED***end***REMOVED******REMOVED*** ***REMOVED*** ***REMOVED*** ***REMOVED***
    // fmt.Printf(">>>> running mammoth map v***REMOVED******REMOVED***$i***REMOVED******REMOVED***: %v\n", v)
    var v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1, v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 map[***REMOVED******REMOVED*** .MapKey ***REMOVED******REMOVED***]***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED***
	v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1 = v
	bs***REMOVED******REMOVED***$i***REMOVED******REMOVED*** := testMarshalErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1, h, t, "enc-map-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***")
	if v == nil ***REMOVED*** v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 = nil ***REMOVED*** else ***REMOVED*** v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 = make(map[***REMOVED******REMOVED*** .MapKey ***REMOVED******REMOVED***]***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED***, len(v)) ***REMOVED*** // reset map
	testUnmarshalErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2, bs***REMOVED******REMOVED***$i***REMOVED******REMOVED***, h, t, "dec-map-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***")
	testDeepEqualErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1, v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2, t, "equal-map-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***")
	if v == nil ***REMOVED*** v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 = nil ***REMOVED*** else ***REMOVED*** v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 = make(map[***REMOVED******REMOVED*** .MapKey ***REMOVED******REMOVED***]***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED***, len(v)) ***REMOVED*** // reset map
	testUnmarshalErr(reflect.ValueOf(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2), bs***REMOVED******REMOVED***$i***REMOVED******REMOVED***, h, t, "dec-map-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-noaddr") // decode into non-addressable map value
	testDeepEqualErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1, v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2, t, "equal-map-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-noaddr")
	if v == nil ***REMOVED*** v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 = nil ***REMOVED*** else ***REMOVED*** v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 = make(map[***REMOVED******REMOVED*** .MapKey ***REMOVED******REMOVED***]***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED***, len(v)) ***REMOVED*** // reset map
	testUnmarshalErr(&v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2, bs***REMOVED******REMOVED***$i***REMOVED******REMOVED***, h, t, "dec-map-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-p-len")
	testDeepEqualErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1, v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2, t, "equal-map-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-p-len")
	bs***REMOVED******REMOVED***$i***REMOVED******REMOVED*** = testMarshalErr(&v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1, h, t, "enc-map-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-p")
	v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 = nil
	testUnmarshalErr(&v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2, bs***REMOVED******REMOVED***$i***REMOVED******REMOVED***, h, t, "dec-map-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-p-nil")
	testDeepEqualErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1, v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2, t, "equal-map-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-p-nil")
    // ...
	if v == nil ***REMOVED*** v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 = nil ***REMOVED*** else ***REMOVED*** v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2 = make(map[***REMOVED******REMOVED*** .MapKey ***REMOVED******REMOVED***]***REMOVED******REMOVED*** .Elem ***REMOVED******REMOVED***, len(v)) ***REMOVED*** // reset map
    var v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v3, v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v4 ***REMOVED******REMOVED*** .MethodNamePfx "typMap" false ***REMOVED******REMOVED***
	v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v3 = ***REMOVED******REMOVED*** .MethodNamePfx "typMap" false ***REMOVED******REMOVED***(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v1)
	v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v4 = ***REMOVED******REMOVED*** .MethodNamePfx "typMap" false ***REMOVED******REMOVED***(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v2)
    bs***REMOVED******REMOVED***$i***REMOVED******REMOVED*** = testMarshalErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v3, h, t, "enc-map-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-custom")
	testUnmarshalErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v4, bs***REMOVED******REMOVED***$i***REMOVED******REMOVED***, h, t, "dec-map-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-p-len")
	testDeepEqualErr(v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v3, v***REMOVED******REMOVED***$i***REMOVED******REMOVED***v4, t, "equal-map-v***REMOVED******REMOVED***$i***REMOVED******REMOVED***-p-len")
    ***REMOVED***
***REMOVED******REMOVED***end***REMOVED******REMOVED******REMOVED******REMOVED***end***REMOVED******REMOVED******REMOVED******REMOVED***end***REMOVED******REMOVED***

***REMOVED***

func doTestMammothMapsAndSlices(t *testing.T, h Handle) ***REMOVED***
     doTestMammothSlices(t, h)
     doTestMammothMaps(t, h)
***REMOVED***
