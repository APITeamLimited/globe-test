// Copyright 2010 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package proto

import (
	"errors"
	"fmt"
	"reflect"

	"google.golang.org/protobuf/encoding/protowire"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/runtime/protoiface"
	"google.golang.org/protobuf/runtime/protoimpl"
)

type (
	// ExtensionDesc represents an extension descriptor and
	// is used to interact with an extension field in a message.
	//
	// Variables of this type are generated in code by protoc-gen-go.
	ExtensionDesc = protoimpl.ExtensionInfo

	// ExtensionRange represents a range of message extensions.
	// Used in code generated by protoc-gen-go.
	ExtensionRange = protoiface.ExtensionRangeV1

	// Deprecated: Do not use; this is an internal type.
	Extension = protoimpl.ExtensionFieldV1

	// Deprecated: Do not use; this is an internal type.
	XXX_InternalExtensions = protoimpl.ExtensionFields
)

// ErrMissingExtension reports whether the extension was not present.
var ErrMissingExtension = errors.New("proto: missing extension")

var errNotExtendable = errors.New("proto: not an extendable proto.Message")

// HasExtension reports whether the extension field is present in m
// either as an explicitly populated field or as an unknown field.
func HasExtension(m Message, xt *ExtensionDesc) (has bool) ***REMOVED***
	mr := MessageReflect(m)
	if mr == nil || !mr.IsValid() ***REMOVED***
		return false
	***REMOVED***

	// Check whether any populated known field matches the field number.
	xtd := xt.TypeDescriptor()
	if isValidExtension(mr.Descriptor(), xtd) ***REMOVED***
		has = mr.Has(xtd)
	***REMOVED*** else ***REMOVED***
		mr.Range(func(fd protoreflect.FieldDescriptor, _ protoreflect.Value) bool ***REMOVED***
			has = int32(fd.Number()) == xt.Field
			return !has
		***REMOVED***)
	***REMOVED***

	// Check whether any unknown field matches the field number.
	for b := mr.GetUnknown(); !has && len(b) > 0; ***REMOVED***
		num, _, n := protowire.ConsumeField(b)
		has = int32(num) == xt.Field
		b = b[n:]
	***REMOVED***
	return has
***REMOVED***

// ClearExtension removes the extension field from m
// either as an explicitly populated field or as an unknown field.
func ClearExtension(m Message, xt *ExtensionDesc) ***REMOVED***
	mr := MessageReflect(m)
	if mr == nil || !mr.IsValid() ***REMOVED***
		return
	***REMOVED***

	xtd := xt.TypeDescriptor()
	if isValidExtension(mr.Descriptor(), xtd) ***REMOVED***
		mr.Clear(xtd)
	***REMOVED*** else ***REMOVED***
		mr.Range(func(fd protoreflect.FieldDescriptor, _ protoreflect.Value) bool ***REMOVED***
			if int32(fd.Number()) == xt.Field ***REMOVED***
				mr.Clear(fd)
				return false
			***REMOVED***
			return true
		***REMOVED***)
	***REMOVED***
	clearUnknown(mr, fieldNum(xt.Field))
***REMOVED***

// ClearAllExtensions clears all extensions from m.
// This includes populated fields and unknown fields in the extension range.
func ClearAllExtensions(m Message) ***REMOVED***
	mr := MessageReflect(m)
	if mr == nil || !mr.IsValid() ***REMOVED***
		return
	***REMOVED***

	mr.Range(func(fd protoreflect.FieldDescriptor, _ protoreflect.Value) bool ***REMOVED***
		if fd.IsExtension() ***REMOVED***
			mr.Clear(fd)
		***REMOVED***
		return true
	***REMOVED***)
	clearUnknown(mr, mr.Descriptor().ExtensionRanges())
***REMOVED***

// GetExtension retrieves a proto2 extended field from m.
//
// If the descriptor is type complete (i.e., ExtensionDesc.ExtensionType is non-nil),
// then GetExtension parses the encoded field and returns a Go value of the specified type.
// If the field is not present, then the default value is returned (if one is specified),
// otherwise ErrMissingExtension is reported.
//
// If the descriptor is type incomplete (i.e., ExtensionDesc.ExtensionType is nil),
// then GetExtension returns the raw encoded bytes for the extension field.
func GetExtension(m Message, xt *ExtensionDesc) (interface***REMOVED******REMOVED***, error) ***REMOVED***
	mr := MessageReflect(m)
	if mr == nil || !mr.IsValid() || mr.Descriptor().ExtensionRanges().Len() == 0 ***REMOVED***
		return nil, errNotExtendable
	***REMOVED***

	// Retrieve the unknown fields for this extension field.
	var bo protoreflect.RawFields
	for bi := mr.GetUnknown(); len(bi) > 0; ***REMOVED***
		num, _, n := protowire.ConsumeField(bi)
		if int32(num) == xt.Field ***REMOVED***
			bo = append(bo, bi[:n]...)
		***REMOVED***
		bi = bi[n:]
	***REMOVED***

	// For type incomplete descriptors, only retrieve the unknown fields.
	if xt.ExtensionType == nil ***REMOVED***
		return []byte(bo), nil
	***REMOVED***

	// If the extension field only exists as unknown fields, unmarshal it.
	// This is rarely done since proto.Unmarshal eagerly unmarshals extensions.
	xtd := xt.TypeDescriptor()
	if !isValidExtension(mr.Descriptor(), xtd) ***REMOVED***
		return nil, fmt.Errorf("proto: bad extended type; %T does not extend %T", xt.ExtendedType, m)
	***REMOVED***
	if !mr.Has(xtd) && len(bo) > 0 ***REMOVED***
		m2 := mr.New()
		if err := (proto.UnmarshalOptions***REMOVED***
			Resolver: extensionResolver***REMOVED***xt***REMOVED***,
		***REMOVED***.Unmarshal(bo, m2.Interface())); err != nil ***REMOVED***
			return nil, err
		***REMOVED***
		if m2.Has(xtd) ***REMOVED***
			mr.Set(xtd, m2.Get(xtd))
			clearUnknown(mr, fieldNum(xt.Field))
		***REMOVED***
	***REMOVED***

	// Check whether the message has the extension field set or a default.
	var pv protoreflect.Value
	switch ***REMOVED***
	case mr.Has(xtd):
		pv = mr.Get(xtd)
	case xtd.HasDefault():
		pv = xtd.Default()
	default:
		return nil, ErrMissingExtension
	***REMOVED***

	v := xt.InterfaceOf(pv)
	rv := reflect.ValueOf(v)
	if isScalarKind(rv.Kind()) ***REMOVED***
		rv2 := reflect.New(rv.Type())
		rv2.Elem().Set(rv)
		v = rv2.Interface()
	***REMOVED***
	return v, nil
***REMOVED***

// extensionResolver is a custom extension resolver that stores a single
// extension type that takes precedence over the global registry.
type extensionResolver struct***REMOVED*** xt protoreflect.ExtensionType ***REMOVED***

func (r extensionResolver) FindExtensionByName(field protoreflect.FullName) (protoreflect.ExtensionType, error) ***REMOVED***
	if xtd := r.xt.TypeDescriptor(); xtd.FullName() == field ***REMOVED***
		return r.xt, nil
	***REMOVED***
	return protoregistry.GlobalTypes.FindExtensionByName(field)
***REMOVED***

func (r extensionResolver) FindExtensionByNumber(message protoreflect.FullName, field protoreflect.FieldNumber) (protoreflect.ExtensionType, error) ***REMOVED***
	if xtd := r.xt.TypeDescriptor(); xtd.ContainingMessage().FullName() == message && xtd.Number() == field ***REMOVED***
		return r.xt, nil
	***REMOVED***
	return protoregistry.GlobalTypes.FindExtensionByNumber(message, field)
***REMOVED***

// GetExtensions returns a list of the extensions values present in m,
// corresponding with the provided list of extension descriptors, xts.
// If an extension is missing in m, the corresponding value is nil.
func GetExtensions(m Message, xts []*ExtensionDesc) ([]interface***REMOVED******REMOVED***, error) ***REMOVED***
	mr := MessageReflect(m)
	if mr == nil || !mr.IsValid() ***REMOVED***
		return nil, errNotExtendable
	***REMOVED***

	vs := make([]interface***REMOVED******REMOVED***, len(xts))
	for i, xt := range xts ***REMOVED***
		v, err := GetExtension(m, xt)
		if err != nil ***REMOVED***
			if err == ErrMissingExtension ***REMOVED***
				continue
			***REMOVED***
			return vs, err
		***REMOVED***
		vs[i] = v
	***REMOVED***
	return vs, nil
***REMOVED***

// SetExtension sets an extension field in m to the provided value.
func SetExtension(m Message, xt *ExtensionDesc, v interface***REMOVED******REMOVED***) error ***REMOVED***
	mr := MessageReflect(m)
	if mr == nil || !mr.IsValid() || mr.Descriptor().ExtensionRanges().Len() == 0 ***REMOVED***
		return errNotExtendable
	***REMOVED***

	rv := reflect.ValueOf(v)
	if reflect.TypeOf(v) != reflect.TypeOf(xt.ExtensionType) ***REMOVED***
		return fmt.Errorf("proto: bad extension value type. got: %T, want: %T", v, xt.ExtensionType)
	***REMOVED***
	if rv.Kind() == reflect.Ptr ***REMOVED***
		if rv.IsNil() ***REMOVED***
			return fmt.Errorf("proto: SetExtension called with nil value of type %T", v)
		***REMOVED***
		if isScalarKind(rv.Elem().Kind()) ***REMOVED***
			v = rv.Elem().Interface()
		***REMOVED***
	***REMOVED***

	xtd := xt.TypeDescriptor()
	if !isValidExtension(mr.Descriptor(), xtd) ***REMOVED***
		return fmt.Errorf("proto: bad extended type; %T does not extend %T", xt.ExtendedType, m)
	***REMOVED***
	mr.Set(xtd, xt.ValueOf(v))
	clearUnknown(mr, fieldNum(xt.Field))
	return nil
***REMOVED***

// SetRawExtension inserts b into the unknown fields of m.
//
// Deprecated: Use Message.ProtoReflect.SetUnknown instead.
func SetRawExtension(m Message, fnum int32, b []byte) ***REMOVED***
	mr := MessageReflect(m)
	if mr == nil || !mr.IsValid() ***REMOVED***
		return
	***REMOVED***

	// Verify that the raw field is valid.
	for b0 := b; len(b0) > 0; ***REMOVED***
		num, _, n := protowire.ConsumeField(b0)
		if int32(num) != fnum ***REMOVED***
			panic(fmt.Sprintf("mismatching field number: got %d, want %d", num, fnum))
		***REMOVED***
		b0 = b0[n:]
	***REMOVED***

	ClearExtension(m, &ExtensionDesc***REMOVED***Field: fnum***REMOVED***)
	mr.SetUnknown(append(mr.GetUnknown(), b...))
***REMOVED***

// ExtensionDescs returns a list of extension descriptors found in m,
// containing descriptors for both populated extension fields in m and
// also unknown fields of m that are in the extension range.
// For the later case, an type incomplete descriptor is provided where only
// the ExtensionDesc.Field field is populated.
// The order of the extension descriptors is undefined.
func ExtensionDescs(m Message) ([]*ExtensionDesc, error) ***REMOVED***
	mr := MessageReflect(m)
	if mr == nil || !mr.IsValid() || mr.Descriptor().ExtensionRanges().Len() == 0 ***REMOVED***
		return nil, errNotExtendable
	***REMOVED***

	// Collect a set of known extension descriptors.
	extDescs := make(map[protoreflect.FieldNumber]*ExtensionDesc)
	mr.Range(func(fd protoreflect.FieldDescriptor, v protoreflect.Value) bool ***REMOVED***
		if fd.IsExtension() ***REMOVED***
			xt := fd.(protoreflect.ExtensionTypeDescriptor)
			if xd, ok := xt.Type().(*ExtensionDesc); ok ***REMOVED***
				extDescs[fd.Number()] = xd
			***REMOVED***
		***REMOVED***
		return true
	***REMOVED***)

	// Collect a set of unknown extension descriptors.
	extRanges := mr.Descriptor().ExtensionRanges()
	for b := mr.GetUnknown(); len(b) > 0; ***REMOVED***
		num, _, n := protowire.ConsumeField(b)
		if extRanges.Has(num) && extDescs[num] == nil ***REMOVED***
			extDescs[num] = nil
		***REMOVED***
		b = b[n:]
	***REMOVED***

	// Transpose the set of descriptors into a list.
	var xts []*ExtensionDesc
	for num, xt := range extDescs ***REMOVED***
		if xt == nil ***REMOVED***
			xt = &ExtensionDesc***REMOVED***Field: int32(num)***REMOVED***
		***REMOVED***
		xts = append(xts, xt)
	***REMOVED***
	return xts, nil
***REMOVED***

// isValidExtension reports whether xtd is a valid extension descriptor for md.
func isValidExtension(md protoreflect.MessageDescriptor, xtd protoreflect.ExtensionTypeDescriptor) bool ***REMOVED***
	return xtd.ContainingMessage() == md && md.ExtensionRanges().Has(xtd.Number())
***REMOVED***

// isScalarKind reports whether k is a protobuf scalar kind (except bytes).
// This function exists for historical reasons since the representation of
// scalars differs between v1 and v2, where v1 uses *T and v2 uses T.
func isScalarKind(k reflect.Kind) bool ***REMOVED***
	switch k ***REMOVED***
	case reflect.Bool, reflect.Int32, reflect.Int64, reflect.Uint32, reflect.Uint64, reflect.Float32, reflect.Float64, reflect.String:
		return true
	default:
		return false
	***REMOVED***
***REMOVED***

// clearUnknown removes unknown fields from m where remover.Has reports true.
func clearUnknown(m protoreflect.Message, remover interface ***REMOVED***
	Has(protoreflect.FieldNumber) bool
***REMOVED***) ***REMOVED***
	var bo protoreflect.RawFields
	for bi := m.GetUnknown(); len(bi) > 0; ***REMOVED***
		num, _, n := protowire.ConsumeField(bi)
		if !remover.Has(num) ***REMOVED***
			bo = append(bo, bi[:n]...)
		***REMOVED***
		bi = bi[n:]
	***REMOVED***
	if bi := m.GetUnknown(); len(bi) != len(bo) ***REMOVED***
		m.SetUnknown(bo)
	***REMOVED***
***REMOVED***

type fieldNum protoreflect.FieldNumber

func (n1 fieldNum) Has(n2 protoreflect.FieldNumber) bool ***REMOVED***
	return protoreflect.FieldNumber(n1) == n2
***REMOVED***
