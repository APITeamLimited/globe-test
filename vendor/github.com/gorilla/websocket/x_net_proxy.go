// Code generated by golang.org/x/tools/cmd/bundle. DO NOT EDIT.
//go:generate bundle -o x_net_proxy.go golang.org/x/net/proxy

// Package proxy provides support for a variety of protocols to proxy network
// data.
//

package websocket

import (
	"errors"
	"io"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"sync"
)

type proxy_direct struct***REMOVED******REMOVED***

// Direct is a direct proxy: one that makes network connections directly.
var proxy_Direct = proxy_direct***REMOVED******REMOVED***

func (proxy_direct) Dial(network, addr string) (net.Conn, error) ***REMOVED***
	return net.Dial(network, addr)
***REMOVED***

// A PerHost directs connections to a default Dialer unless the host name
// requested matches one of a number of exceptions.
type proxy_PerHost struct ***REMOVED***
	def, bypass proxy_Dialer

	bypassNetworks []*net.IPNet
	bypassIPs      []net.IP
	bypassZones    []string
	bypassHosts    []string
***REMOVED***

// NewPerHost returns a PerHost Dialer that directs connections to either
// defaultDialer or bypass, depending on whether the connection matches one of
// the configured rules.
func proxy_NewPerHost(defaultDialer, bypass proxy_Dialer) *proxy_PerHost ***REMOVED***
	return &proxy_PerHost***REMOVED***
		def:    defaultDialer,
		bypass: bypass,
	***REMOVED***
***REMOVED***

// Dial connects to the address addr on the given network through either
// defaultDialer or bypass.
func (p *proxy_PerHost) Dial(network, addr string) (c net.Conn, err error) ***REMOVED***
	host, _, err := net.SplitHostPort(addr)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***

	return p.dialerForRequest(host).Dial(network, addr)
***REMOVED***

func (p *proxy_PerHost) dialerForRequest(host string) proxy_Dialer ***REMOVED***
	if ip := net.ParseIP(host); ip != nil ***REMOVED***
		for _, net := range p.bypassNetworks ***REMOVED***
			if net.Contains(ip) ***REMOVED***
				return p.bypass
			***REMOVED***
		***REMOVED***
		for _, bypassIP := range p.bypassIPs ***REMOVED***
			if bypassIP.Equal(ip) ***REMOVED***
				return p.bypass
			***REMOVED***
		***REMOVED***
		return p.def
	***REMOVED***

	for _, zone := range p.bypassZones ***REMOVED***
		if strings.HasSuffix(host, zone) ***REMOVED***
			return p.bypass
		***REMOVED***
		if host == zone[1:] ***REMOVED***
			// For a zone ".example.com", we match "example.com"
			// too.
			return p.bypass
		***REMOVED***
	***REMOVED***
	for _, bypassHost := range p.bypassHosts ***REMOVED***
		if bypassHost == host ***REMOVED***
			return p.bypass
		***REMOVED***
	***REMOVED***
	return p.def
***REMOVED***

// AddFromString parses a string that contains comma-separated values
// specifying hosts that should use the bypass proxy. Each value is either an
// IP address, a CIDR range, a zone (*.example.com) or a host name
// (localhost). A best effort is made to parse the string and errors are
// ignored.
func (p *proxy_PerHost) AddFromString(s string) ***REMOVED***
	hosts := strings.Split(s, ",")
	for _, host := range hosts ***REMOVED***
		host = strings.TrimSpace(host)
		if len(host) == 0 ***REMOVED***
			continue
		***REMOVED***
		if strings.Contains(host, "/") ***REMOVED***
			// We assume that it's a CIDR address like 127.0.0.0/8
			if _, net, err := net.ParseCIDR(host); err == nil ***REMOVED***
				p.AddNetwork(net)
			***REMOVED***
			continue
		***REMOVED***
		if ip := net.ParseIP(host); ip != nil ***REMOVED***
			p.AddIP(ip)
			continue
		***REMOVED***
		if strings.HasPrefix(host, "*.") ***REMOVED***
			p.AddZone(host[1:])
			continue
		***REMOVED***
		p.AddHost(host)
	***REMOVED***
***REMOVED***

// AddIP specifies an IP address that will use the bypass proxy. Note that
// this will only take effect if a literal IP address is dialed. A connection
// to a named host will never match an IP.
func (p *proxy_PerHost) AddIP(ip net.IP) ***REMOVED***
	p.bypassIPs = append(p.bypassIPs, ip)
***REMOVED***

// AddNetwork specifies an IP range that will use the bypass proxy. Note that
// this will only take effect if a literal IP address is dialed. A connection
// to a named host will never match.
func (p *proxy_PerHost) AddNetwork(net *net.IPNet) ***REMOVED***
	p.bypassNetworks = append(p.bypassNetworks, net)
***REMOVED***

// AddZone specifies a DNS suffix that will use the bypass proxy. A zone of
// "example.com" matches "example.com" and all of its subdomains.
func (p *proxy_PerHost) AddZone(zone string) ***REMOVED***
	if strings.HasSuffix(zone, ".") ***REMOVED***
		zone = zone[:len(zone)-1]
	***REMOVED***
	if !strings.HasPrefix(zone, ".") ***REMOVED***
		zone = "." + zone
	***REMOVED***
	p.bypassZones = append(p.bypassZones, zone)
***REMOVED***

// AddHost specifies a host name that will use the bypass proxy.
func (p *proxy_PerHost) AddHost(host string) ***REMOVED***
	if strings.HasSuffix(host, ".") ***REMOVED***
		host = host[:len(host)-1]
	***REMOVED***
	p.bypassHosts = append(p.bypassHosts, host)
***REMOVED***

// A Dialer is a means to establish a connection.
type proxy_Dialer interface ***REMOVED***
	// Dial connects to the given address via the proxy.
	Dial(network, addr string) (c net.Conn, err error)
***REMOVED***

// Auth contains authentication parameters that specific Dialers may require.
type proxy_Auth struct ***REMOVED***
	User, Password string
***REMOVED***

// FromEnvironment returns the dialer specified by the proxy related variables in
// the environment.
func proxy_FromEnvironment() proxy_Dialer ***REMOVED***
	allProxy := proxy_allProxyEnv.Get()
	if len(allProxy) == 0 ***REMOVED***
		return proxy_Direct
	***REMOVED***

	proxyURL, err := url.Parse(allProxy)
	if err != nil ***REMOVED***
		return proxy_Direct
	***REMOVED***
	proxy, err := proxy_FromURL(proxyURL, proxy_Direct)
	if err != nil ***REMOVED***
		return proxy_Direct
	***REMOVED***

	noProxy := proxy_noProxyEnv.Get()
	if len(noProxy) == 0 ***REMOVED***
		return proxy
	***REMOVED***

	perHost := proxy_NewPerHost(proxy, proxy_Direct)
	perHost.AddFromString(noProxy)
	return perHost
***REMOVED***

// proxySchemes is a map from URL schemes to a function that creates a Dialer
// from a URL with such a scheme.
var proxy_proxySchemes map[string]func(*url.URL, proxy_Dialer) (proxy_Dialer, error)

// RegisterDialerType takes a URL scheme and a function to generate Dialers from
// a URL with that scheme and a forwarding Dialer. Registered schemes are used
// by FromURL.
func proxy_RegisterDialerType(scheme string, f func(*url.URL, proxy_Dialer) (proxy_Dialer, error)) ***REMOVED***
	if proxy_proxySchemes == nil ***REMOVED***
		proxy_proxySchemes = make(map[string]func(*url.URL, proxy_Dialer) (proxy_Dialer, error))
	***REMOVED***
	proxy_proxySchemes[scheme] = f
***REMOVED***

// FromURL returns a Dialer given a URL specification and an underlying
// Dialer for it to make network requests.
func proxy_FromURL(u *url.URL, forward proxy_Dialer) (proxy_Dialer, error) ***REMOVED***
	var auth *proxy_Auth
	if u.User != nil ***REMOVED***
		auth = new(proxy_Auth)
		auth.User = u.User.Username()
		if p, ok := u.User.Password(); ok ***REMOVED***
			auth.Password = p
		***REMOVED***
	***REMOVED***

	switch u.Scheme ***REMOVED***
	case "socks5":
		return proxy_SOCKS5("tcp", u.Host, auth, forward)
	***REMOVED***

	// If the scheme doesn't match any of the built-in schemes, see if it
	// was registered by another package.
	if proxy_proxySchemes != nil ***REMOVED***
		if f, ok := proxy_proxySchemes[u.Scheme]; ok ***REMOVED***
			return f(u, forward)
		***REMOVED***
	***REMOVED***

	return nil, errors.New("proxy: unknown scheme: " + u.Scheme)
***REMOVED***

var (
	proxy_allProxyEnv = &proxy_envOnce***REMOVED***
		names: []string***REMOVED***"ALL_PROXY", "all_proxy"***REMOVED***,
	***REMOVED***
	proxy_noProxyEnv = &proxy_envOnce***REMOVED***
		names: []string***REMOVED***"NO_PROXY", "no_proxy"***REMOVED***,
	***REMOVED***
)

// envOnce looks up an environment variable (optionally by multiple
// names) once. It mitigates expensive lookups on some platforms
// (e.g. Windows).
// (Borrowed from net/http/transport.go)
type proxy_envOnce struct ***REMOVED***
	names []string
	once  sync.Once
	val   string
***REMOVED***

func (e *proxy_envOnce) Get() string ***REMOVED***
	e.once.Do(e.init)
	return e.val
***REMOVED***

func (e *proxy_envOnce) init() ***REMOVED***
	for _, n := range e.names ***REMOVED***
		e.val = os.Getenv(n)
		if e.val != "" ***REMOVED***
			return
		***REMOVED***
	***REMOVED***
***REMOVED***

// SOCKS5 returns a Dialer that makes SOCKSv5 connections to the given address
// with an optional username and password. See RFC 1928 and RFC 1929.
func proxy_SOCKS5(network, addr string, auth *proxy_Auth, forward proxy_Dialer) (proxy_Dialer, error) ***REMOVED***
	s := &proxy_socks5***REMOVED***
		network: network,
		addr:    addr,
		forward: forward,
	***REMOVED***
	if auth != nil ***REMOVED***
		s.user = auth.User
		s.password = auth.Password
	***REMOVED***

	return s, nil
***REMOVED***

type proxy_socks5 struct ***REMOVED***
	user, password string
	network, addr  string
	forward        proxy_Dialer
***REMOVED***

const proxy_socks5Version = 5

const (
	proxy_socks5AuthNone     = 0
	proxy_socks5AuthPassword = 2
)

const proxy_socks5Connect = 1

const (
	proxy_socks5IP4    = 1
	proxy_socks5Domain = 3
	proxy_socks5IP6    = 4
)

var proxy_socks5Errors = []string***REMOVED***
	"",
	"general failure",
	"connection forbidden",
	"network unreachable",
	"host unreachable",
	"connection refused",
	"TTL expired",
	"command not supported",
	"address type not supported",
***REMOVED***

// Dial connects to the address addr on the given network via the SOCKS5 proxy.
func (s *proxy_socks5) Dial(network, addr string) (net.Conn, error) ***REMOVED***
	switch network ***REMOVED***
	case "tcp", "tcp6", "tcp4":
	default:
		return nil, errors.New("proxy: no support for SOCKS5 proxy connections of type " + network)
	***REMOVED***

	conn, err := s.forward.Dial(s.network, s.addr)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	if err := s.connect(conn, addr); err != nil ***REMOVED***
		conn.Close()
		return nil, err
	***REMOVED***
	return conn, nil
***REMOVED***

// connect takes an existing connection to a socks5 proxy server,
// and commands the server to extend that connection to target,
// which must be a canonical address with a host and port.
func (s *proxy_socks5) connect(conn net.Conn, target string) error ***REMOVED***
	host, portStr, err := net.SplitHostPort(target)
	if err != nil ***REMOVED***
		return err
	***REMOVED***

	port, err := strconv.Atoi(portStr)
	if err != nil ***REMOVED***
		return errors.New("proxy: failed to parse port number: " + portStr)
	***REMOVED***
	if port < 1 || port > 0xffff ***REMOVED***
		return errors.New("proxy: port number out of range: " + portStr)
	***REMOVED***

	// the size here is just an estimate
	buf := make([]byte, 0, 6+len(host))

	buf = append(buf, proxy_socks5Version)
	if len(s.user) > 0 && len(s.user) < 256 && len(s.password) < 256 ***REMOVED***
		buf = append(buf, 2 /* num auth methods */, proxy_socks5AuthNone, proxy_socks5AuthPassword)
	***REMOVED*** else ***REMOVED***
		buf = append(buf, 1 /* num auth methods */, proxy_socks5AuthNone)
	***REMOVED***

	if _, err := conn.Write(buf); err != nil ***REMOVED***
		return errors.New("proxy: failed to write greeting to SOCKS5 proxy at " + s.addr + ": " + err.Error())
	***REMOVED***

	if _, err := io.ReadFull(conn, buf[:2]); err != nil ***REMOVED***
		return errors.New("proxy: failed to read greeting from SOCKS5 proxy at " + s.addr + ": " + err.Error())
	***REMOVED***
	if buf[0] != 5 ***REMOVED***
		return errors.New("proxy: SOCKS5 proxy at " + s.addr + " has unexpected version " + strconv.Itoa(int(buf[0])))
	***REMOVED***
	if buf[1] == 0xff ***REMOVED***
		return errors.New("proxy: SOCKS5 proxy at " + s.addr + " requires authentication")
	***REMOVED***

	// See RFC 1929
	if buf[1] == proxy_socks5AuthPassword ***REMOVED***
		buf = buf[:0]
		buf = append(buf, 1 /* password protocol version */)
		buf = append(buf, uint8(len(s.user)))
		buf = append(buf, s.user...)
		buf = append(buf, uint8(len(s.password)))
		buf = append(buf, s.password...)

		if _, err := conn.Write(buf); err != nil ***REMOVED***
			return errors.New("proxy: failed to write authentication request to SOCKS5 proxy at " + s.addr + ": " + err.Error())
		***REMOVED***

		if _, err := io.ReadFull(conn, buf[:2]); err != nil ***REMOVED***
			return errors.New("proxy: failed to read authentication reply from SOCKS5 proxy at " + s.addr + ": " + err.Error())
		***REMOVED***

		if buf[1] != 0 ***REMOVED***
			return errors.New("proxy: SOCKS5 proxy at " + s.addr + " rejected username/password")
		***REMOVED***
	***REMOVED***

	buf = buf[:0]
	buf = append(buf, proxy_socks5Version, proxy_socks5Connect, 0 /* reserved */)

	if ip := net.ParseIP(host); ip != nil ***REMOVED***
		if ip4 := ip.To4(); ip4 != nil ***REMOVED***
			buf = append(buf, proxy_socks5IP4)
			ip = ip4
		***REMOVED*** else ***REMOVED***
			buf = append(buf, proxy_socks5IP6)
		***REMOVED***
		buf = append(buf, ip...)
	***REMOVED*** else ***REMOVED***
		if len(host) > 255 ***REMOVED***
			return errors.New("proxy: destination host name too long: " + host)
		***REMOVED***
		buf = append(buf, proxy_socks5Domain)
		buf = append(buf, byte(len(host)))
		buf = append(buf, host...)
	***REMOVED***
	buf = append(buf, byte(port>>8), byte(port))

	if _, err := conn.Write(buf); err != nil ***REMOVED***
		return errors.New("proxy: failed to write connect request to SOCKS5 proxy at " + s.addr + ": " + err.Error())
	***REMOVED***

	if _, err := io.ReadFull(conn, buf[:4]); err != nil ***REMOVED***
		return errors.New("proxy: failed to read connect reply from SOCKS5 proxy at " + s.addr + ": " + err.Error())
	***REMOVED***

	failure := "unknown error"
	if int(buf[1]) < len(proxy_socks5Errors) ***REMOVED***
		failure = proxy_socks5Errors[buf[1]]
	***REMOVED***

	if len(failure) > 0 ***REMOVED***
		return errors.New("proxy: SOCKS5 proxy at " + s.addr + " failed to connect: " + failure)
	***REMOVED***

	bytesToDiscard := 0
	switch buf[3] ***REMOVED***
	case proxy_socks5IP4:
		bytesToDiscard = net.IPv4len
	case proxy_socks5IP6:
		bytesToDiscard = net.IPv6len
	case proxy_socks5Domain:
		_, err := io.ReadFull(conn, buf[:1])
		if err != nil ***REMOVED***
			return errors.New("proxy: failed to read domain length from SOCKS5 proxy at " + s.addr + ": " + err.Error())
		***REMOVED***
		bytesToDiscard = int(buf[0])
	default:
		return errors.New("proxy: got unknown address type " + strconv.Itoa(int(buf[3])) + " from SOCKS5 proxy at " + s.addr)
	***REMOVED***

	if cap(buf) < bytesToDiscard ***REMOVED***
		buf = make([]byte, bytesToDiscard)
	***REMOVED*** else ***REMOVED***
		buf = buf[:bytesToDiscard]
	***REMOVED***
	if _, err := io.ReadFull(conn, buf); err != nil ***REMOVED***
		return errors.New("proxy: failed to read address from SOCKS5 proxy at " + s.addr + ": " + err.Error())
	***REMOVED***

	// Also need to discard the port number
	if _, err := io.ReadFull(conn, buf[:2]); err != nil ***REMOVED***
		return errors.New("proxy: failed to read port from SOCKS5 proxy at " + s.addr + ": " + err.Error())
	***REMOVED***

	return nil
***REMOVED***
