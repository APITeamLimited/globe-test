package assert

import (
	"bufio"
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"math"
	"reflect"
	"regexp"
	"runtime"
	"strings"
	"time"
	"unicode"
	"unicode/utf8"

	"github.com/davecgh/go-spew/spew"
	"github.com/pmezard/go-difflib/difflib"
)

//go:generate go run ../_codegen/main.go -output-package=assert -template=assertion_format.go.tmpl

// TestingT is an interface wrapper around *testing.T
type TestingT interface ***REMOVED***
	Errorf(format string, args ...interface***REMOVED******REMOVED***)
***REMOVED***

// Comparison a custom function that returns true on success and false on failure
type Comparison func() (success bool)

/*
	Helper functions
*/

// ObjectsAreEqual determines if two objects are considered equal.
//
// This function does no assertion of any kind.
func ObjectsAreEqual(expected, actual interface***REMOVED******REMOVED***) bool ***REMOVED***

	if expected == nil || actual == nil ***REMOVED***
		return expected == actual
	***REMOVED***
	if exp, ok := expected.([]byte); ok ***REMOVED***
		act, ok := actual.([]byte)
		if !ok ***REMOVED***
			return false
		***REMOVED*** else if exp == nil || act == nil ***REMOVED***
			return exp == nil && act == nil
		***REMOVED***
		return bytes.Equal(exp, act)
	***REMOVED***
	return reflect.DeepEqual(expected, actual)

***REMOVED***

// ObjectsAreEqualValues gets whether two objects are equal, or if their
// values are equal.
func ObjectsAreEqualValues(expected, actual interface***REMOVED******REMOVED***) bool ***REMOVED***
	if ObjectsAreEqual(expected, actual) ***REMOVED***
		return true
	***REMOVED***

	actualType := reflect.TypeOf(actual)
	if actualType == nil ***REMOVED***
		return false
	***REMOVED***
	expectedValue := reflect.ValueOf(expected)
	if expectedValue.IsValid() && expectedValue.Type().ConvertibleTo(actualType) ***REMOVED***
		// Attempt comparison after type conversion
		return reflect.DeepEqual(expectedValue.Convert(actualType).Interface(), actual)
	***REMOVED***

	return false
***REMOVED***

/* CallerInfo is necessary because the assert functions use the testing object
internally, causing it to print the file:line of the assert method, rather than where
the problem actually occurred in calling code.*/

// CallerInfo returns an array of strings containing the file and line number
// of each stack frame leading from the current test to the assert call that
// failed.
func CallerInfo() []string ***REMOVED***

	pc := uintptr(0)
	file := ""
	line := 0
	ok := false
	name := ""

	callers := []string***REMOVED******REMOVED***
	for i := 0; ; i++ ***REMOVED***
		pc, file, line, ok = runtime.Caller(i)
		if !ok ***REMOVED***
			// The breaks below failed to terminate the loop, and we ran off the
			// end of the call stack.
			break
		***REMOVED***

		// This is a huge edge case, but it will panic if this is the case, see #180
		if file == "<autogenerated>" ***REMOVED***
			break
		***REMOVED***

		f := runtime.FuncForPC(pc)
		if f == nil ***REMOVED***
			break
		***REMOVED***
		name = f.Name()

		// testing.tRunner is the standard library function that calls
		// tests. Subtests are called directly by tRunner, without going through
		// the Test/Benchmark/Example function that contains the t.Run calls, so
		// with subtests we should break when we hit tRunner, without adding it
		// to the list of callers.
		if name == "testing.tRunner" ***REMOVED***
			break
		***REMOVED***

		parts := strings.Split(file, "/")
		file = parts[len(parts)-1]
		if len(parts) > 1 ***REMOVED***
			dir := parts[len(parts)-2]
			if (dir != "assert" && dir != "mock" && dir != "require") || file == "mock_test.go" ***REMOVED***
				callers = append(callers, fmt.Sprintf("%s:%d", file, line))
			***REMOVED***
		***REMOVED***

		// Drop the package
		segments := strings.Split(name, ".")
		name = segments[len(segments)-1]
		if isTest(name, "Test") ||
			isTest(name, "Benchmark") ||
			isTest(name, "Example") ***REMOVED***
			break
		***REMOVED***
	***REMOVED***

	return callers
***REMOVED***

// Stolen from the `go test` tool.
// isTest tells whether name looks like a test (or benchmark, according to prefix).
// It is a Test (say) if there is a character after Test that is not a lower-case letter.
// We don't want TesticularCancer.
func isTest(name, prefix string) bool ***REMOVED***
	if !strings.HasPrefix(name, prefix) ***REMOVED***
		return false
	***REMOVED***
	if len(name) == len(prefix) ***REMOVED*** // "Test" is ok
		return true
	***REMOVED***
	rune, _ := utf8.DecodeRuneInString(name[len(prefix):])
	return !unicode.IsLower(rune)
***REMOVED***

// getWhitespaceString returns a string that is long enough to overwrite the default
// output from the go testing framework.
func getWhitespaceString() string ***REMOVED***

	_, file, line, ok := runtime.Caller(1)
	if !ok ***REMOVED***
		return ""
	***REMOVED***
	parts := strings.Split(file, "/")
	file = parts[len(parts)-1]

	return strings.Repeat(" ", len(fmt.Sprintf("%s:%d:        ", file, line)))

***REMOVED***

func messageFromMsgAndArgs(msgAndArgs ...interface***REMOVED******REMOVED***) string ***REMOVED***
	if len(msgAndArgs) == 0 || msgAndArgs == nil ***REMOVED***
		return ""
	***REMOVED***
	if len(msgAndArgs) == 1 ***REMOVED***
		return msgAndArgs[0].(string)
	***REMOVED***
	if len(msgAndArgs) > 1 ***REMOVED***
		return fmt.Sprintf(msgAndArgs[0].(string), msgAndArgs[1:]...)
	***REMOVED***
	return ""
***REMOVED***

// Aligns the provided message so that all lines after the first line start at the same location as the first line.
// Assumes that the first line starts at the correct location (after carriage return, tab, label, spacer and tab).
// The longestLabelLen parameter specifies the length of the longest label in the output (required becaues this is the
// basis on which the alignment occurs).
func indentMessageLines(message string, longestLabelLen int) string ***REMOVED***
	outBuf := new(bytes.Buffer)

	for i, scanner := 0, bufio.NewScanner(strings.NewReader(message)); scanner.Scan(); i++ ***REMOVED***
		// no need to align first line because it starts at the correct location (after the label)
		if i != 0 ***REMOVED***
			// append alignLen+1 spaces to align with "***REMOVED******REMOVED***longestLabel***REMOVED******REMOVED***:" before adding tab
			outBuf.WriteString("\n\r\t" + strings.Repeat(" ", longestLabelLen+1) + "\t")
		***REMOVED***
		outBuf.WriteString(scanner.Text())
	***REMOVED***

	return outBuf.String()
***REMOVED***

type failNower interface ***REMOVED***
	FailNow()
***REMOVED***

// FailNow fails test
func FailNow(t TestingT, failureMessage string, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***
	Fail(t, failureMessage, msgAndArgs...)

	// We cannot extend TestingT with FailNow() and
	// maintain backwards compatibility, so we fallback
	// to panicking when FailNow is not available in
	// TestingT.
	// See issue #263

	if t, ok := t.(failNower); ok ***REMOVED***
		t.FailNow()
	***REMOVED*** else ***REMOVED***
		panic("test failed and t is missing `FailNow()`")
	***REMOVED***
	return false
***REMOVED***

// Fail reports a failure through
func Fail(t TestingT, failureMessage string, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***
	content := []labeledContent***REMOVED***
		***REMOVED***"Error Trace", strings.Join(CallerInfo(), "\n\r\t\t\t")***REMOVED***,
		***REMOVED***"Error", failureMessage***REMOVED***,
	***REMOVED***

	message := messageFromMsgAndArgs(msgAndArgs...)
	if len(message) > 0 ***REMOVED***
		content = append(content, labeledContent***REMOVED***"Messages", message***REMOVED***)
	***REMOVED***

	t.Errorf("%s", "\r"+getWhitespaceString()+labeledOutput(content...))

	return false
***REMOVED***

type labeledContent struct ***REMOVED***
	label   string
	content string
***REMOVED***

// labeledOutput returns a string consisting of the provided labeledContent. Each labeled output is appended in the following manner:
//
//   \r\t***REMOVED******REMOVED***label***REMOVED******REMOVED***:***REMOVED******REMOVED***align_spaces***REMOVED******REMOVED***\t***REMOVED******REMOVED***content***REMOVED******REMOVED***\n
//
// The initial carriage return is required to undo/erase any padding added by testing.T.Errorf. The "\t***REMOVED******REMOVED***label***REMOVED******REMOVED***:" is for the label.
// If a label is shorter than the longest label provided, padding spaces are added to make all the labels match in length. Once this
// alignment is achieved, "\t***REMOVED******REMOVED***content***REMOVED******REMOVED***\n" is added for the output.
//
// If the content of the labeledOutput contains line breaks, the subsequent lines are aligned so that they start at the same location as the first line.
func labeledOutput(content ...labeledContent) string ***REMOVED***
	longestLabel := 0
	for _, v := range content ***REMOVED***
		if len(v.label) > longestLabel ***REMOVED***
			longestLabel = len(v.label)
		***REMOVED***
	***REMOVED***
	var output string
	for _, v := range content ***REMOVED***
		output += "\r\t" + v.label + ":" + strings.Repeat(" ", longestLabel-len(v.label)) + "\t" + indentMessageLines(v.content, longestLabel) + "\n"
	***REMOVED***
	return output
***REMOVED***

// Implements asserts that an object is implemented by the specified interface.
//
//    assert.Implements(t, (*MyInterface)(nil), new(MyObject))
func Implements(t TestingT, interfaceObject interface***REMOVED******REMOVED***, object interface***REMOVED******REMOVED***, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***

	interfaceType := reflect.TypeOf(interfaceObject).Elem()

	if !reflect.TypeOf(object).Implements(interfaceType) ***REMOVED***
		return Fail(t, fmt.Sprintf("%T must implement %v", object, interfaceType), msgAndArgs...)
	***REMOVED***

	return true

***REMOVED***

// IsType asserts that the specified objects are of the same type.
func IsType(t TestingT, expectedType interface***REMOVED******REMOVED***, object interface***REMOVED******REMOVED***, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***

	if !ObjectsAreEqual(reflect.TypeOf(object), reflect.TypeOf(expectedType)) ***REMOVED***
		return Fail(t, fmt.Sprintf("Object expected to be of type %v, but was %v", reflect.TypeOf(expectedType), reflect.TypeOf(object)), msgAndArgs...)
	***REMOVED***

	return true
***REMOVED***

// Equal asserts that two objects are equal.
//
//    assert.Equal(t, 123, 123)
//
// Returns whether the assertion was successful (true) or not (false).
//
// Pointer variable equality is determined based on the equality of the
// referenced values (as opposed to the memory addresses). Function equality
// cannot be determined and will always fail.
func Equal(t TestingT, expected, actual interface***REMOVED******REMOVED***, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***
	if err := validateEqualArgs(expected, actual); err != nil ***REMOVED***
		return Fail(t, fmt.Sprintf("Invalid operation: %#v == %#v (%s)",
			expected, actual, err), msgAndArgs...)
	***REMOVED***

	if !ObjectsAreEqual(expected, actual) ***REMOVED***
		diff := diff(expected, actual)
		expected, actual = formatUnequalValues(expected, actual)
		return Fail(t, fmt.Sprintf("Not equal: \n"+
			"expected: %s\n"+
			"actual: %s%s", expected, actual, diff), msgAndArgs...)
	***REMOVED***

	return true

***REMOVED***

// formatUnequalValues takes two values of arbitrary types and returns string
// representations appropriate to be presented to the user.
//
// If the values are not of like type, the returned strings will be prefixed
// with the type name, and the value will be enclosed in parenthesis similar
// to a type conversion in the Go grammar.
func formatUnequalValues(expected, actual interface***REMOVED******REMOVED***) (e string, a string) ***REMOVED***
	if reflect.TypeOf(expected) != reflect.TypeOf(actual) ***REMOVED***
		return fmt.Sprintf("%T(%#v)", expected, expected),
			fmt.Sprintf("%T(%#v)", actual, actual)
	***REMOVED***

	return fmt.Sprintf("%#v", expected),
		fmt.Sprintf("%#v", actual)
***REMOVED***

// EqualValues asserts that two objects are equal or convertable to the same types
// and equal.
//
//    assert.EqualValues(t, uint32(123), int32(123))
//
// Returns whether the assertion was successful (true) or not (false).
func EqualValues(t TestingT, expected, actual interface***REMOVED******REMOVED***, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***

	if !ObjectsAreEqualValues(expected, actual) ***REMOVED***
		diff := diff(expected, actual)
		expected, actual = formatUnequalValues(expected, actual)
		return Fail(t, fmt.Sprintf("Not equal: \n"+
			"expected: %s\n"+
			"actual: %s%s", expected, actual, diff), msgAndArgs...)
	***REMOVED***

	return true

***REMOVED***

// Exactly asserts that two objects are equal is value and type.
//
//    assert.Exactly(t, int32(123), int64(123))
//
// Returns whether the assertion was successful (true) or not (false).
func Exactly(t TestingT, expected, actual interface***REMOVED******REMOVED***, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***

	aType := reflect.TypeOf(expected)
	bType := reflect.TypeOf(actual)

	if aType != bType ***REMOVED***
		return Fail(t, fmt.Sprintf("Types expected to match exactly\n\r\t%v != %v", aType, bType), msgAndArgs...)
	***REMOVED***

	return Equal(t, expected, actual, msgAndArgs...)

***REMOVED***

// NotNil asserts that the specified object is not nil.
//
//    assert.NotNil(t, err)
//
// Returns whether the assertion was successful (true) or not (false).
func NotNil(t TestingT, object interface***REMOVED******REMOVED***, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***
	if !isNil(object) ***REMOVED***
		return true
	***REMOVED***
	return Fail(t, "Expected value not to be nil.", msgAndArgs...)
***REMOVED***

// isNil checks if a specified object is nil or not, without Failing.
func isNil(object interface***REMOVED******REMOVED***) bool ***REMOVED***
	if object == nil ***REMOVED***
		return true
	***REMOVED***

	value := reflect.ValueOf(object)
	kind := value.Kind()
	if kind >= reflect.Chan && kind <= reflect.Slice && value.IsNil() ***REMOVED***
		return true
	***REMOVED***

	return false
***REMOVED***

// Nil asserts that the specified object is nil.
//
//    assert.Nil(t, err)
//
// Returns whether the assertion was successful (true) or not (false).
func Nil(t TestingT, object interface***REMOVED******REMOVED***, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***
	if isNil(object) ***REMOVED***
		return true
	***REMOVED***
	return Fail(t, fmt.Sprintf("Expected nil, but got: %#v", object), msgAndArgs...)
***REMOVED***

var numericZeros = []interface***REMOVED******REMOVED******REMOVED***
	int(0),
	int8(0),
	int16(0),
	int32(0),
	int64(0),
	uint(0),
	uint8(0),
	uint16(0),
	uint32(0),
	uint64(0),
	float32(0),
	float64(0),
***REMOVED***

// isEmpty gets whether the specified object is considered empty or not.
func isEmpty(object interface***REMOVED******REMOVED***) bool ***REMOVED***

	if object == nil ***REMOVED***
		return true
	***REMOVED*** else if object == "" ***REMOVED***
		return true
	***REMOVED*** else if object == false ***REMOVED***
		return true
	***REMOVED***

	for _, v := range numericZeros ***REMOVED***
		if object == v ***REMOVED***
			return true
		***REMOVED***
	***REMOVED***

	objValue := reflect.ValueOf(object)

	switch objValue.Kind() ***REMOVED***
	case reflect.Map:
		fallthrough
	case reflect.Slice, reflect.Chan:
		***REMOVED***
			return (objValue.Len() == 0)
		***REMOVED***
	case reflect.Struct:
		switch object.(type) ***REMOVED***
		case time.Time:
			return object.(time.Time).IsZero()
		***REMOVED***
	case reflect.Ptr:
		***REMOVED***
			if objValue.IsNil() ***REMOVED***
				return true
			***REMOVED***
			switch object.(type) ***REMOVED***
			case *time.Time:
				return object.(*time.Time).IsZero()
			default:
				return false
			***REMOVED***
		***REMOVED***
	***REMOVED***
	return false
***REMOVED***

// Empty asserts that the specified object is empty.  I.e. nil, "", false, 0 or either
// a slice or a channel with len == 0.
//
//  assert.Empty(t, obj)
//
// Returns whether the assertion was successful (true) or not (false).
func Empty(t TestingT, object interface***REMOVED******REMOVED***, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***

	pass := isEmpty(object)
	if !pass ***REMOVED***
		Fail(t, fmt.Sprintf("Should be empty, but was %v", object), msgAndArgs...)
	***REMOVED***

	return pass

***REMOVED***

// NotEmpty asserts that the specified object is NOT empty.  I.e. not nil, "", false, 0 or either
// a slice or a channel with len == 0.
//
//  if assert.NotEmpty(t, obj) ***REMOVED***
//    assert.Equal(t, "two", obj[1])
//  ***REMOVED***
//
// Returns whether the assertion was successful (true) or not (false).
func NotEmpty(t TestingT, object interface***REMOVED******REMOVED***, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***

	pass := !isEmpty(object)
	if !pass ***REMOVED***
		Fail(t, fmt.Sprintf("Should NOT be empty, but was %v", object), msgAndArgs...)
	***REMOVED***

	return pass

***REMOVED***

// getLen try to get length of object.
// return (false, 0) if impossible.
func getLen(x interface***REMOVED******REMOVED***) (ok bool, length int) ***REMOVED***
	v := reflect.ValueOf(x)
	defer func() ***REMOVED***
		if e := recover(); e != nil ***REMOVED***
			ok = false
		***REMOVED***
	***REMOVED***()
	return true, v.Len()
***REMOVED***

// Len asserts that the specified object has specific length.
// Len also fails if the object has a type that len() not accept.
//
//    assert.Len(t, mySlice, 3)
//
// Returns whether the assertion was successful (true) or not (false).
func Len(t TestingT, object interface***REMOVED******REMOVED***, length int, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***
	ok, l := getLen(object)
	if !ok ***REMOVED***
		return Fail(t, fmt.Sprintf("\"%s\" could not be applied builtin len()", object), msgAndArgs...)
	***REMOVED***

	if l != length ***REMOVED***
		return Fail(t, fmt.Sprintf("\"%s\" should have %d item(s), but has %d", object, length, l), msgAndArgs...)
	***REMOVED***
	return true
***REMOVED***

// True asserts that the specified value is true.
//
//    assert.True(t, myBool)
//
// Returns whether the assertion was successful (true) or not (false).
func True(t TestingT, value bool, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***

	if value != true ***REMOVED***
		return Fail(t, "Should be true", msgAndArgs...)
	***REMOVED***

	return true

***REMOVED***

// False asserts that the specified value is false.
//
//    assert.False(t, myBool)
//
// Returns whether the assertion was successful (true) or not (false).
func False(t TestingT, value bool, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***

	if value != false ***REMOVED***
		return Fail(t, "Should be false", msgAndArgs...)
	***REMOVED***

	return true

***REMOVED***

// NotEqual asserts that the specified values are NOT equal.
//
//    assert.NotEqual(t, obj1, obj2)
//
// Returns whether the assertion was successful (true) or not (false).
//
// Pointer variable equality is determined based on the equality of the
// referenced values (as opposed to the memory addresses).
func NotEqual(t TestingT, expected, actual interface***REMOVED******REMOVED***, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***
	if err := validateEqualArgs(expected, actual); err != nil ***REMOVED***
		return Fail(t, fmt.Sprintf("Invalid operation: %#v != %#v (%s)",
			expected, actual, err), msgAndArgs...)
	***REMOVED***

	if ObjectsAreEqual(expected, actual) ***REMOVED***
		return Fail(t, fmt.Sprintf("Should not be: %#v\n", actual), msgAndArgs...)
	***REMOVED***

	return true

***REMOVED***

// containsElement try loop over the list check if the list includes the element.
// return (false, false) if impossible.
// return (true, false) if element was not found.
// return (true, true) if element was found.
func includeElement(list interface***REMOVED******REMOVED***, element interface***REMOVED******REMOVED***) (ok, found bool) ***REMOVED***

	listValue := reflect.ValueOf(list)
	elementValue := reflect.ValueOf(element)
	defer func() ***REMOVED***
		if e := recover(); e != nil ***REMOVED***
			ok = false
			found = false
		***REMOVED***
	***REMOVED***()

	if reflect.TypeOf(list).Kind() == reflect.String ***REMOVED***
		return true, strings.Contains(listValue.String(), elementValue.String())
	***REMOVED***

	if reflect.TypeOf(list).Kind() == reflect.Map ***REMOVED***
		mapKeys := listValue.MapKeys()
		for i := 0; i < len(mapKeys); i++ ***REMOVED***
			if ObjectsAreEqual(mapKeys[i].Interface(), element) ***REMOVED***
				return true, true
			***REMOVED***
		***REMOVED***
		return true, false
	***REMOVED***

	for i := 0; i < listValue.Len(); i++ ***REMOVED***
		if ObjectsAreEqual(listValue.Index(i).Interface(), element) ***REMOVED***
			return true, true
		***REMOVED***
	***REMOVED***
	return true, false

***REMOVED***

// Contains asserts that the specified string, list(array, slice...) or map contains the
// specified substring or element.
//
//    assert.Contains(t, "Hello World", "World")
//    assert.Contains(t, ["Hello", "World"], "World")
//    assert.Contains(t, ***REMOVED***"Hello": "World"***REMOVED***, "Hello")
//
// Returns whether the assertion was successful (true) or not (false).
func Contains(t TestingT, s, contains interface***REMOVED******REMOVED***, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***

	ok, found := includeElement(s, contains)
	if !ok ***REMOVED***
		return Fail(t, fmt.Sprintf("\"%s\" could not be applied builtin len()", s), msgAndArgs...)
	***REMOVED***
	if !found ***REMOVED***
		return Fail(t, fmt.Sprintf("\"%s\" does not contain \"%s\"", s, contains), msgAndArgs...)
	***REMOVED***

	return true

***REMOVED***

// NotContains asserts that the specified string, list(array, slice...) or map does NOT contain the
// specified substring or element.
//
//    assert.NotContains(t, "Hello World", "Earth")
//    assert.NotContains(t, ["Hello", "World"], "Earth")
//    assert.NotContains(t, ***REMOVED***"Hello": "World"***REMOVED***, "Earth")
//
// Returns whether the assertion was successful (true) or not (false).
func NotContains(t TestingT, s, contains interface***REMOVED******REMOVED***, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***

	ok, found := includeElement(s, contains)
	if !ok ***REMOVED***
		return Fail(t, fmt.Sprintf("\"%s\" could not be applied builtin len()", s), msgAndArgs...)
	***REMOVED***
	if found ***REMOVED***
		return Fail(t, fmt.Sprintf("\"%s\" should not contain \"%s\"", s, contains), msgAndArgs...)
	***REMOVED***

	return true

***REMOVED***

// Subset asserts that the specified list(array, slice...) contains all
// elements given in the specified subset(array, slice...).
//
//    assert.Subset(t, [1, 2, 3], [1, 2], "But [1, 2, 3] does contain [1, 2]")
//
// Returns whether the assertion was successful (true) or not (false).
func Subset(t TestingT, list, subset interface***REMOVED******REMOVED***, msgAndArgs ...interface***REMOVED******REMOVED***) (ok bool) ***REMOVED***
	if subset == nil ***REMOVED***
		return true // we consider nil to be equal to the nil set
	***REMOVED***

	subsetValue := reflect.ValueOf(subset)
	defer func() ***REMOVED***
		if e := recover(); e != nil ***REMOVED***
			ok = false
		***REMOVED***
	***REMOVED***()

	listKind := reflect.TypeOf(list).Kind()
	subsetKind := reflect.TypeOf(subset).Kind()

	if listKind != reflect.Array && listKind != reflect.Slice ***REMOVED***
		return Fail(t, fmt.Sprintf("%q has an unsupported type %s", list, listKind), msgAndArgs...)
	***REMOVED***

	if subsetKind != reflect.Array && subsetKind != reflect.Slice ***REMOVED***
		return Fail(t, fmt.Sprintf("%q has an unsupported type %s", subset, subsetKind), msgAndArgs...)
	***REMOVED***

	for i := 0; i < subsetValue.Len(); i++ ***REMOVED***
		element := subsetValue.Index(i).Interface()
		ok, found := includeElement(list, element)
		if !ok ***REMOVED***
			return Fail(t, fmt.Sprintf("\"%s\" could not be applied builtin len()", list), msgAndArgs...)
		***REMOVED***
		if !found ***REMOVED***
			return Fail(t, fmt.Sprintf("\"%s\" does not contain \"%s\"", list, element), msgAndArgs...)
		***REMOVED***
	***REMOVED***

	return true
***REMOVED***

// NotSubset asserts that the specified list(array, slice...) contains not all
// elements given in the specified subset(array, slice...).
//
//    assert.NotSubset(t, [1, 3, 4], [1, 2], "But [1, 3, 4] does not contain [1, 2]")
//
// Returns whether the assertion was successful (true) or not (false).
func NotSubset(t TestingT, list, subset interface***REMOVED******REMOVED***, msgAndArgs ...interface***REMOVED******REMOVED***) (ok bool) ***REMOVED***
	if subset == nil ***REMOVED***
		return false // we consider nil to be equal to the nil set
	***REMOVED***

	subsetValue := reflect.ValueOf(subset)
	defer func() ***REMOVED***
		if e := recover(); e != nil ***REMOVED***
			ok = false
		***REMOVED***
	***REMOVED***()

	listKind := reflect.TypeOf(list).Kind()
	subsetKind := reflect.TypeOf(subset).Kind()

	if listKind != reflect.Array && listKind != reflect.Slice ***REMOVED***
		return Fail(t, fmt.Sprintf("%q has an unsupported type %s", list, listKind), msgAndArgs...)
	***REMOVED***

	if subsetKind != reflect.Array && subsetKind != reflect.Slice ***REMOVED***
		return Fail(t, fmt.Sprintf("%q has an unsupported type %s", subset, subsetKind), msgAndArgs...)
	***REMOVED***

	for i := 0; i < subsetValue.Len(); i++ ***REMOVED***
		element := subsetValue.Index(i).Interface()
		ok, found := includeElement(list, element)
		if !ok ***REMOVED***
			return Fail(t, fmt.Sprintf("\"%s\" could not be applied builtin len()", list), msgAndArgs...)
		***REMOVED***
		if !found ***REMOVED***
			return true
		***REMOVED***
	***REMOVED***

	return Fail(t, fmt.Sprintf("%q is a subset of %q", subset, list), msgAndArgs...)
***REMOVED***

// Condition uses a Comparison to assert a complex condition.
func Condition(t TestingT, comp Comparison, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***
	result := comp()
	if !result ***REMOVED***
		Fail(t, "Condition failed!", msgAndArgs...)
	***REMOVED***
	return result
***REMOVED***

// PanicTestFunc defines a func that should be passed to the assert.Panics and assert.NotPanics
// methods, and represents a simple func that takes no arguments, and returns nothing.
type PanicTestFunc func()

// didPanic returns true if the function passed to it panics. Otherwise, it returns false.
func didPanic(f PanicTestFunc) (bool, interface***REMOVED******REMOVED***) ***REMOVED***

	didPanic := false
	var message interface***REMOVED******REMOVED***
	func() ***REMOVED***

		defer func() ***REMOVED***
			if message = recover(); message != nil ***REMOVED***
				didPanic = true
			***REMOVED***
		***REMOVED***()

		// call the target function
		f()

	***REMOVED***()

	return didPanic, message

***REMOVED***

// Panics asserts that the code inside the specified PanicTestFunc panics.
//
//   assert.Panics(t, func()***REMOVED*** GoCrazy() ***REMOVED***)
//
// Returns whether the assertion was successful (true) or not (false).
func Panics(t TestingT, f PanicTestFunc, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***

	if funcDidPanic, panicValue := didPanic(f); !funcDidPanic ***REMOVED***
		return Fail(t, fmt.Sprintf("func %#v should panic\n\r\tPanic value:\t%v", f, panicValue), msgAndArgs...)
	***REMOVED***

	return true
***REMOVED***

// PanicsWithValue asserts that the code inside the specified PanicTestFunc panics, and that
// the recovered panic value equals the expected panic value.
//
//   assert.PanicsWithValue(t, "crazy error", func()***REMOVED*** GoCrazy() ***REMOVED***)
//
// Returns whether the assertion was successful (true) or not (false).
func PanicsWithValue(t TestingT, expected interface***REMOVED******REMOVED***, f PanicTestFunc, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***

	funcDidPanic, panicValue := didPanic(f)
	if !funcDidPanic ***REMOVED***
		return Fail(t, fmt.Sprintf("func %#v should panic\n\r\tPanic value:\t%v", f, panicValue), msgAndArgs...)
	***REMOVED***
	if panicValue != expected ***REMOVED***
		return Fail(t, fmt.Sprintf("func %#v should panic with value:\t%v\n\r\tPanic value:\t%v", f, expected, panicValue), msgAndArgs...)
	***REMOVED***

	return true
***REMOVED***

// NotPanics asserts that the code inside the specified PanicTestFunc does NOT panic.
//
//   assert.NotPanics(t, func()***REMOVED*** RemainCalm() ***REMOVED***)
//
// Returns whether the assertion was successful (true) or not (false).
func NotPanics(t TestingT, f PanicTestFunc, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***

	if funcDidPanic, panicValue := didPanic(f); funcDidPanic ***REMOVED***
		return Fail(t, fmt.Sprintf("func %#v should not panic\n\r\tPanic value:\t%v", f, panicValue), msgAndArgs...)
	***REMOVED***

	return true
***REMOVED***

// WithinDuration asserts that the two times are within duration delta of each other.
//
//   assert.WithinDuration(t, time.Now(), time.Now(), 10*time.Second)
//
// Returns whether the assertion was successful (true) or not (false).
func WithinDuration(t TestingT, expected, actual time.Time, delta time.Duration, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***

	dt := expected.Sub(actual)
	if dt < -delta || dt > delta ***REMOVED***
		return Fail(t, fmt.Sprintf("Max difference between %v and %v allowed is %v, but difference was %v", expected, actual, delta, dt), msgAndArgs...)
	***REMOVED***

	return true
***REMOVED***

func toFloat(x interface***REMOVED******REMOVED***) (float64, bool) ***REMOVED***
	var xf float64
	xok := true

	switch xn := x.(type) ***REMOVED***
	case uint8:
		xf = float64(xn)
	case uint16:
		xf = float64(xn)
	case uint32:
		xf = float64(xn)
	case uint64:
		xf = float64(xn)
	case int:
		xf = float64(xn)
	case int8:
		xf = float64(xn)
	case int16:
		xf = float64(xn)
	case int32:
		xf = float64(xn)
	case int64:
		xf = float64(xn)
	case float32:
		xf = float64(xn)
	case float64:
		xf = float64(xn)
	default:
		xok = false
	***REMOVED***

	return xf, xok
***REMOVED***

// InDelta asserts that the two numerals are within delta of each other.
//
// 	 assert.InDelta(t, math.Pi, (22 / 7.0), 0.01)
//
// Returns whether the assertion was successful (true) or not (false).
func InDelta(t TestingT, expected, actual interface***REMOVED******REMOVED***, delta float64, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***

	af, aok := toFloat(expected)
	bf, bok := toFloat(actual)

	if !aok || !bok ***REMOVED***
		return Fail(t, fmt.Sprintf("Parameters must be numerical"), msgAndArgs...)
	***REMOVED***

	if math.IsNaN(af) ***REMOVED***
		return Fail(t, fmt.Sprintf("Actual must not be NaN"), msgAndArgs...)
	***REMOVED***

	if math.IsNaN(bf) ***REMOVED***
		return Fail(t, fmt.Sprintf("Expected %v with delta %v, but was NaN", expected, delta), msgAndArgs...)
	***REMOVED***

	dt := af - bf
	if dt < -delta || dt > delta ***REMOVED***
		return Fail(t, fmt.Sprintf("Max difference between %v and %v allowed is %v, but difference was %v", expected, actual, delta, dt), msgAndArgs...)
	***REMOVED***

	return true
***REMOVED***

// InDeltaSlice is the same as InDelta, except it compares two slices.
func InDeltaSlice(t TestingT, expected, actual interface***REMOVED******REMOVED***, delta float64, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***
	if expected == nil || actual == nil ||
		reflect.TypeOf(actual).Kind() != reflect.Slice ||
		reflect.TypeOf(expected).Kind() != reflect.Slice ***REMOVED***
		return Fail(t, fmt.Sprintf("Parameters must be slice"), msgAndArgs...)
	***REMOVED***

	actualSlice := reflect.ValueOf(actual)
	expectedSlice := reflect.ValueOf(expected)

	for i := 0; i < actualSlice.Len(); i++ ***REMOVED***
		result := InDelta(t, actualSlice.Index(i).Interface(), expectedSlice.Index(i).Interface(), delta, msgAndArgs...)
		if !result ***REMOVED***
			return result
		***REMOVED***
	***REMOVED***

	return true
***REMOVED***

func calcRelativeError(expected, actual interface***REMOVED******REMOVED***) (float64, error) ***REMOVED***
	af, aok := toFloat(expected)
	if !aok ***REMOVED***
		return 0, fmt.Errorf("expected value %q cannot be converted to float", expected)
	***REMOVED***
	if af == 0 ***REMOVED***
		return 0, fmt.Errorf("expected value must have a value other than zero to calculate the relative error")
	***REMOVED***
	bf, bok := toFloat(actual)
	if !bok ***REMOVED***
		return 0, fmt.Errorf("expected value %q cannot be converted to float", actual)
	***REMOVED***

	return math.Abs(af-bf) / math.Abs(af), nil
***REMOVED***

// InEpsilon asserts that expected and actual have a relative error less than epsilon
//
// Returns whether the assertion was successful (true) or not (false).
func InEpsilon(t TestingT, expected, actual interface***REMOVED******REMOVED***, epsilon float64, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***
	actualEpsilon, err := calcRelativeError(expected, actual)
	if err != nil ***REMOVED***
		return Fail(t, err.Error(), msgAndArgs...)
	***REMOVED***
	if actualEpsilon > epsilon ***REMOVED***
		return Fail(t, fmt.Sprintf("Relative error is too high: %#v (expected)\n"+
			"        < %#v (actual)", actualEpsilon, epsilon), msgAndArgs...)
	***REMOVED***

	return true
***REMOVED***

// InEpsilonSlice is the same as InEpsilon, except it compares each value from two slices.
func InEpsilonSlice(t TestingT, expected, actual interface***REMOVED******REMOVED***, epsilon float64, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***
	if expected == nil || actual == nil ||
		reflect.TypeOf(actual).Kind() != reflect.Slice ||
		reflect.TypeOf(expected).Kind() != reflect.Slice ***REMOVED***
		return Fail(t, fmt.Sprintf("Parameters must be slice"), msgAndArgs...)
	***REMOVED***

	actualSlice := reflect.ValueOf(actual)
	expectedSlice := reflect.ValueOf(expected)

	for i := 0; i < actualSlice.Len(); i++ ***REMOVED***
		result := InEpsilon(t, actualSlice.Index(i).Interface(), expectedSlice.Index(i).Interface(), epsilon)
		if !result ***REMOVED***
			return result
		***REMOVED***
	***REMOVED***

	return true
***REMOVED***

/*
	Errors
*/

// NoError asserts that a function returned no error (i.e. `nil`).
//
//   actualObj, err := SomeFunction()
//   if assert.NoError(t, err) ***REMOVED***
//	   assert.Equal(t, expectedObj, actualObj)
//   ***REMOVED***
//
// Returns whether the assertion was successful (true) or not (false).
func NoError(t TestingT, err error, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***
	if err != nil ***REMOVED***
		return Fail(t, fmt.Sprintf("Received unexpected error:\n%+v", err), msgAndArgs...)
	***REMOVED***

	return true
***REMOVED***

// Error asserts that a function returned an error (i.e. not `nil`).
//
//   actualObj, err := SomeFunction()
//   if assert.Error(t, err) ***REMOVED***
//	   assert.Equal(t, expectedError, err)
//   ***REMOVED***
//
// Returns whether the assertion was successful (true) or not (false).
func Error(t TestingT, err error, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***

	if err == nil ***REMOVED***
		return Fail(t, "An error is expected but got nil.", msgAndArgs...)
	***REMOVED***

	return true
***REMOVED***

// EqualError asserts that a function returned an error (i.e. not `nil`)
// and that it is equal to the provided error.
//
//   actualObj, err := SomeFunction()
//   assert.EqualError(t, err,  expectedErrorString)
//
// Returns whether the assertion was successful (true) or not (false).
func EqualError(t TestingT, theError error, errString string, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***
	if !Error(t, theError, msgAndArgs...) ***REMOVED***
		return false
	***REMOVED***
	expected := errString
	actual := theError.Error()
	// don't need to use deep equals here, we know they are both strings
	if expected != actual ***REMOVED***
		return Fail(t, fmt.Sprintf("Error message not equal:\n"+
			"expected: %q\n"+
			"actual: %q", expected, actual), msgAndArgs...)
	***REMOVED***
	return true
***REMOVED***

// matchRegexp return true if a specified regexp matches a string.
func matchRegexp(rx interface***REMOVED******REMOVED***, str interface***REMOVED******REMOVED***) bool ***REMOVED***

	var r *regexp.Regexp
	if rr, ok := rx.(*regexp.Regexp); ok ***REMOVED***
		r = rr
	***REMOVED*** else ***REMOVED***
		r = regexp.MustCompile(fmt.Sprint(rx))
	***REMOVED***

	return (r.FindStringIndex(fmt.Sprint(str)) != nil)

***REMOVED***

// Regexp asserts that a specified regexp matches a string.
//
//  assert.Regexp(t, regexp.MustCompile("start"), "it's starting")
//  assert.Regexp(t, "start...$", "it's not starting")
//
// Returns whether the assertion was successful (true) or not (false).
func Regexp(t TestingT, rx interface***REMOVED******REMOVED***, str interface***REMOVED******REMOVED***, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***

	match := matchRegexp(rx, str)

	if !match ***REMOVED***
		Fail(t, fmt.Sprintf("Expect \"%v\" to match \"%v\"", str, rx), msgAndArgs...)
	***REMOVED***

	return match
***REMOVED***

// NotRegexp asserts that a specified regexp does not match a string.
//
//  assert.NotRegexp(t, regexp.MustCompile("starts"), "it's starting")
//  assert.NotRegexp(t, "^start", "it's not starting")
//
// Returns whether the assertion was successful (true) or not (false).
func NotRegexp(t TestingT, rx interface***REMOVED******REMOVED***, str interface***REMOVED******REMOVED***, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***
	match := matchRegexp(rx, str)

	if match ***REMOVED***
		Fail(t, fmt.Sprintf("Expect \"%v\" to NOT match \"%v\"", str, rx), msgAndArgs...)
	***REMOVED***

	return !match

***REMOVED***

// Zero asserts that i is the zero value for its type and returns the truth.
func Zero(t TestingT, i interface***REMOVED******REMOVED***, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***
	if i != nil && !reflect.DeepEqual(i, reflect.Zero(reflect.TypeOf(i)).Interface()) ***REMOVED***
		return Fail(t, fmt.Sprintf("Should be zero, but was %v", i), msgAndArgs...)
	***REMOVED***
	return true
***REMOVED***

// NotZero asserts that i is not the zero value for its type and returns the truth.
func NotZero(t TestingT, i interface***REMOVED******REMOVED***, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***
	if i == nil || reflect.DeepEqual(i, reflect.Zero(reflect.TypeOf(i)).Interface()) ***REMOVED***
		return Fail(t, fmt.Sprintf("Should not be zero, but was %v", i), msgAndArgs...)
	***REMOVED***
	return true
***REMOVED***

// JSONEq asserts that two JSON strings are equivalent.
//
//  assert.JSONEq(t, `***REMOVED***"hello": "world", "foo": "bar"***REMOVED***`, `***REMOVED***"foo": "bar", "hello": "world"***REMOVED***`)
//
// Returns whether the assertion was successful (true) or not (false).
func JSONEq(t TestingT, expected string, actual string, msgAndArgs ...interface***REMOVED******REMOVED***) bool ***REMOVED***
	var expectedJSONAsInterface, actualJSONAsInterface interface***REMOVED******REMOVED***

	if err := json.Unmarshal([]byte(expected), &expectedJSONAsInterface); err != nil ***REMOVED***
		return Fail(t, fmt.Sprintf("Expected value ('%s') is not valid json.\nJSON parsing error: '%s'", expected, err.Error()), msgAndArgs...)
	***REMOVED***

	if err := json.Unmarshal([]byte(actual), &actualJSONAsInterface); err != nil ***REMOVED***
		return Fail(t, fmt.Sprintf("Input ('%s') needs to be valid json.\nJSON parsing error: '%s'", actual, err.Error()), msgAndArgs...)
	***REMOVED***

	return Equal(t, expectedJSONAsInterface, actualJSONAsInterface, msgAndArgs...)
***REMOVED***

func typeAndKind(v interface***REMOVED******REMOVED***) (reflect.Type, reflect.Kind) ***REMOVED***
	t := reflect.TypeOf(v)
	k := t.Kind()

	if k == reflect.Ptr ***REMOVED***
		t = t.Elem()
		k = t.Kind()
	***REMOVED***
	return t, k
***REMOVED***

// diff returns a diff of both values as long as both are of the same type and
// are a struct, map, slice or array. Otherwise it returns an empty string.
func diff(expected interface***REMOVED******REMOVED***, actual interface***REMOVED******REMOVED***) string ***REMOVED***
	if expected == nil || actual == nil ***REMOVED***
		return ""
	***REMOVED***

	et, ek := typeAndKind(expected)
	at, _ := typeAndKind(actual)

	if et != at ***REMOVED***
		return ""
	***REMOVED***

	if ek != reflect.Struct && ek != reflect.Map && ek != reflect.Slice && ek != reflect.Array ***REMOVED***
		return ""
	***REMOVED***

	e := spewConfig.Sdump(expected)
	a := spewConfig.Sdump(actual)

	diff, _ := difflib.GetUnifiedDiffString(difflib.UnifiedDiff***REMOVED***
		A:        difflib.SplitLines(e),
		B:        difflib.SplitLines(a),
		FromFile: "Expected",
		FromDate: "",
		ToFile:   "Actual",
		ToDate:   "",
		Context:  1,
	***REMOVED***)

	return "\n\nDiff:\n" + diff
***REMOVED***

// validateEqualArgs checks whether provided arguments can be safely used in the
// Equal/NotEqual functions.
func validateEqualArgs(expected, actual interface***REMOVED******REMOVED***) error ***REMOVED***
	if isFunction(expected) || isFunction(actual) ***REMOVED***
		return errors.New("cannot take func type as argument")
	***REMOVED***
	return nil
***REMOVED***

func isFunction(arg interface***REMOVED******REMOVED***) bool ***REMOVED***
	if arg == nil ***REMOVED***
		return false
	***REMOVED***
	return reflect.TypeOf(arg).Kind() == reflect.Func
***REMOVED***

var spewConfig = spew.ConfigState***REMOVED***
	Indent:                  " ",
	DisablePointerAddresses: true,
	DisableCapacities:       true,
	SortKeys:                true,
***REMOVED***
