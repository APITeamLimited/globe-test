// Code generated by "enumer -type=ResponseType -transform=snake -json -text -trimprefix ResponseType -output response_type_gen.go"; DO NOT EDIT.

//
package httpext

import (
	"encoding/json"
	"fmt"
)

const _ResponseTypeName = "textbinarynone"

var _ResponseTypeIndex = [...]uint8***REMOVED***0, 4, 10, 14***REMOVED***

func (i ResponseType) String() string ***REMOVED***
	if i >= ResponseType(len(_ResponseTypeIndex)-1) ***REMOVED***
		return fmt.Sprintf("ResponseType(%d)", i)
	***REMOVED***
	return _ResponseTypeName[_ResponseTypeIndex[i]:_ResponseTypeIndex[i+1]]
***REMOVED***

var _ResponseTypeValues = []ResponseType***REMOVED***0, 1, 2***REMOVED***

var _ResponseTypeNameToValueMap = map[string]ResponseType***REMOVED***
	_ResponseTypeName[0:4]:   0,
	_ResponseTypeName[4:10]:  1,
	_ResponseTypeName[10:14]: 2,
***REMOVED***

// ResponseTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ResponseTypeString(s string) (ResponseType, error) ***REMOVED***
	if val, ok := _ResponseTypeNameToValueMap[s]; ok ***REMOVED***
		return val, nil
	***REMOVED***
	return 0, fmt.Errorf("%s does not belong to ResponseType values", s)
***REMOVED***

// ResponseTypeValues returns all values of the enum
func ResponseTypeValues() []ResponseType ***REMOVED***
	return _ResponseTypeValues
***REMOVED***

// IsAResponseType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ResponseType) IsAResponseType() bool ***REMOVED***
	for _, v := range _ResponseTypeValues ***REMOVED***
		if i == v ***REMOVED***
			return true
		***REMOVED***
	***REMOVED***
	return false
***REMOVED***

// MarshalJSON implements the json.Marshaler interface for ResponseType
func (i ResponseType) MarshalJSON() ([]byte, error) ***REMOVED***
	return json.Marshal(i.String())
***REMOVED***

// UnmarshalJSON implements the json.Unmarshaler interface for ResponseType
func (i *ResponseType) UnmarshalJSON(data []byte) error ***REMOVED***
	var s string
	if err := json.Unmarshal(data, &s); err != nil ***REMOVED***
		return fmt.Errorf("ResponseType should be a string, got %s", data)
	***REMOVED***

	var err error
	*i, err = ResponseTypeString(s)
	return err
***REMOVED***

// MarshalText implements the encoding.TextMarshaler interface for ResponseType
func (i ResponseType) MarshalText() ([]byte, error) ***REMOVED***
	return []byte(i.String()), nil
***REMOVED***

// UnmarshalText implements the encoding.TextUnmarshaler interface for ResponseType
func (i *ResponseType) UnmarshalText(text []byte) error ***REMOVED***
	var err error
	*i, err = ResponseTypeString(string(text))
	return err
***REMOVED***
