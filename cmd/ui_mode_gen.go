// Code generated by "enumer -type=UIMode -transform=snake -trimprefix=UIMode -output ui_mode_gen.go"; DO NOT EDIT.

//
package cmd

import (
	"fmt"
)

const _UIModeName = "responsivecompactfull"

var _UIModeIndex = [...]uint8***REMOVED***0, 10, 17, 21***REMOVED***

func (i UIMode) String() string ***REMOVED***
	i -= 2
	if i >= UIMode(len(_UIModeIndex)-1) ***REMOVED***
		return fmt.Sprintf("UIMode(%d)", i+2)
	***REMOVED***
	return _UIModeName[_UIModeIndex[i]:_UIModeIndex[i+1]]
***REMOVED***

var _UIModeValues = []UIMode***REMOVED***2, 3, 4***REMOVED***

var _UIModeNameToValueMap = map[string]UIMode***REMOVED***
	_UIModeName[0:10]:  2,
	_UIModeName[10:17]: 3,
	_UIModeName[17:21]: 4,
***REMOVED***

// UIModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func UIModeString(s string) (UIMode, error) ***REMOVED***
	if val, ok := _UIModeNameToValueMap[s]; ok ***REMOVED***
		return val, nil
	***REMOVED***
	return 0, fmt.Errorf("%s does not belong to UIMode values", s)
***REMOVED***

// UIModeValues returns all values of the enum
func UIModeValues() []UIMode ***REMOVED***
	return _UIModeValues
***REMOVED***

// IsAUIMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i UIMode) IsAUIMode() bool ***REMOVED***
	for _, v := range _UIModeValues ***REMOVED***
		if i == v ***REMOVED***
			return true
		***REMOVED***
	***REMOVED***
	return false
***REMOVED***
